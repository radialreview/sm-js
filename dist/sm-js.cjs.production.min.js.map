{"version":3,"file":"sm-js.cjs.production.min.js","sources":["../src/types.ts","../src/exceptions.ts","../src/dataTypes.ts","../src/consts.ts","../src/dataConversions.ts","../src/OptimisticUpdates.ts","../src/dataUtilities.ts","../node_modules/regenerator-runtime/runtime.js","../src/generateMockDataUtilities.ts","../src/queryDefinitionAdapters.ts","../src/transaction/revisedConvertNodeDataToSMPersistedData.ts","../src/generateMockData.ts","../src/clientSideOperators.ts","../src/queriers.ts","../src/nodesCollection.ts","../src/transaction/getMutationNameFromOperations.ts","../src/transaction/edges/utilities.ts","../src/transaction/edges/create.ts","../src/transaction/edges/drop.ts","../src/transaction/edges/replace.ts","../src/transaction/edges/update.ts","../src/transaction/convertNodeDataToSMPersistedData.ts","../src/transaction/create.ts","../src/QuerySlimmer.ts","../src/react/context.tsx","../src/react/useSubscription.tsx","../src/gqlClient.ts","../src/transaction/update.ts","../src/index.ts","../src/DOProxyGenerator.ts","../src/DO.ts","../src/QueryManager.ts","../src/transaction/transaction.ts","../src/transaction/drop.ts","../src/Repository.ts","../src/config.ts"],"sourcesContent":["import { OnPaginateCallback, NodesCollection } from './nodesCollection';\r\nimport { DEFAULT_NODE_PROPERTIES, PROPERTIES_QUERIED_FOR_ALL_NODES } from './consts';\r\nimport { createDOFactory } from './DO';\r\nimport { createDOProxyGenerator } from './DOProxyGenerator';\r\nimport { generateQuerier, generateSubscriber } from './queriers';\r\nimport { createQueryManager } from './QueryManager';\r\nimport { createTransaction } from './transaction/transaction';\r\nimport { QuerySlimmer } from './QuerySlimmer'\r\n\r\nexport type BOmit<T, K extends keyof T> = T extends any ? Omit<T, K> : never;\r\n\r\nexport type Maybe<T> = T | null;\r\n\r\nexport type IsMaybe<Type> = null extends Type ? true : false\r\n\r\nexport type DataDefaultFn = {\r\n  _default: IData\r\n  (_default: any): IData;\r\n} \r\n\r\nexport type DocumentNode = import('@apollo/client/core').DocumentNode;\r\n\r\nexport type Plugin = {\r\n  DO?: {\r\n    onConstruct?: (opts: { DOInstance: NodeDO; parsedDataKey: string }) => void;\r\n    computedDecorator?: <\r\n      TReturnType,\r\n      TComputedFn extends (data: Record<string, any>) => TReturnType\r\n    >(opts: {\r\n      DOInstance: NodeDO;\r\n      computedFn: TComputedFn;\r\n    }) => () => TReturnType;\r\n  };\r\n  DOProxy?: {\r\n    computedDecorator?: <\r\n      TReturnType,\r\n      TComputedFn extends (data: Record<string, any>) => TReturnType\r\n    >(opts: {\r\n      ProxyInstance: IDOProxy;\r\n      computedFn: TComputedFn;\r\n    }) => () => TReturnType;\r\n  };\r\n};\r\n\r\nexport type Config = {\r\n  gqlClient: IGQLClient;\r\n  plugins?: Array<Plugin>;\r\n  generateMockData: boolean\r\n  enableQuerySlimming: boolean\r\n  enableQuerySlimmingLogging: boolean\r\n  paginationFilteringSortingInstance: EPaginationFilteringSortingInstance\r\n};\r\n\r\nexport interface IGQLClient {\r\n  query(opts: {\r\n    gql: DocumentNode;\r\n    token: string;\r\n    batchKey?: string;\r\n  }): Promise<any>;\r\n  subscribe(opts: {\r\n    gql: DocumentNode;\r\n    token: string;\r\n    onMessage: (message: Record<string, any>) => void;\r\n    onError: (error: any) => void;\r\n  }): SubscriptionCanceller;\r\n  mutate(opts: { mutations: Array<DocumentNode>; token: string }): Promise<any>;\r\n}\r\n\r\nexport interface IQueryManager {\r\n  onQueryResult(opts: { queryResult: any; queryId: string }): void;\r\n  onSubscriptionMessage(opts: {\r\n    node: Record<string, any>;\r\n    operation: {\r\n      action: 'UpdateNode' | 'DeleteNode' | 'InsertNode';\r\n      path: string;\r\n    };\r\n    queryId: string;\r\n    subscriptionAlias: string;\r\n  }): void;\r\n  getResults: () => Record<string, any>;\r\n}\r\n\r\nexport type QueryReturn<\r\n  // @ts-ignore\r\n  TQueryDefinitions extends QueryDefinitions\r\n> = {\r\n  data: QueryDataReturn<TQueryDefinitions>;\r\n  error: any;\r\n};\r\n\r\nexport type QueryOpts<\r\n  // @ts-ignore\r\n  TQueryDefinitions extends QueryDefinitions\r\n> = {\r\n  onData?: (info: { results: QueryDataReturn<TQueryDefinitions> }) => void;\r\n  // When onError is provided, we pass it any errors encountered instead of throwing them.\r\n  // This is by design, for consistency with the interface of subscribe\r\n  onError?: (...args: any) => void;\r\n  queryId?: string;\r\n  batchKey?: string;\r\n};\r\n\r\nexport type SubscriptionOpts<\r\n  // @ts-ignore\r\n  TQueryDefinitions extends QueryDefinitions\r\n> = {\r\n  onData: (info: { results: QueryDataReturn<TQueryDefinitions> }) => void;\r\n  // To catch an error in a subscription, you must provide an onError handler,\r\n  // since we resolve this promise as soon as the subscriptions are initialized and the query is resolved (if it wasn't skipped)\r\n  //\r\n  // This means you can use the try/catch syntax try { await subscription } catch (e) {}\r\n  // to catch errors querying or initializing subscriptions.\r\n  //\r\n  // However, when onError is given, errors will no longer be thrown\r\n  // They will instead all be passed to the onError handler\r\n  onError?: (...args: any) => void;\r\n  // Allow subscriptions to be cancelled immediately after \"subscribe\" is called, and before the initial query resolves\r\n  onSubscriptionInitialized?: (\r\n    subscriptionCanceller: SubscriptionCanceller\r\n  ) => void;\r\n  onQueryInfoConstructed?: (queryInfo: {\r\n    queryGQL: DocumentNode;\r\n    queryId: string;\r\n    queryParamsString: string;\r\n  }) => void;\r\n  onPaginate?: OnPaginateCallback\r\n  skipInitialQuery?: boolean;\r\n  queryId?: string;\r\n  batchKey?: string;\r\n};\r\n\r\n\r\nexport type NodeDefaultProps = typeof DEFAULT_NODE_PROPERTIES;\r\nexport type PropertiesQueriedForAllNodes = typeof PROPERTIES_QUERIED_FOR_ALL_NODES;\r\n\r\nexport type SubscriptionCanceller = () => void;\r\nexport type SubscriptionMeta = { unsub: SubscriptionCanceller; error: any };\r\n\r\nexport enum EPaginationFilteringSortingInstance {\r\n  'SERVER', \r\n  'CLIENT'\r\n}\r\n\r\nexport interface IMMGQL {\r\n  getToken(opts: { tokenName: string }): string\r\n  setToken(opts: { tokenName: string; token: string }): void\r\n  clearTokens(): void\r\n  query: ReturnType<typeof generateQuerier>\r\n  subscribe: ReturnType<typeof generateSubscriber>\r\n  transaction: ReturnType<typeof createTransaction>\r\n  gqlClient: IGQLClient\r\n  plugins: Array<Plugin> | undefined\r\n  generateMockData: boolean | undefined\r\n  enableQuerySlimming: boolean | undefined\r\n  enableQuerySlimmingLogging: boolean | undefined\r\n  paginationFilteringSortingInstance: EPaginationFilteringSortingInstance\r\n  DOProxyGenerator: ReturnType<typeof createDOProxyGenerator>\r\n  DOFactory: ReturnType<typeof createDOFactory>\r\n  QueryManager: ReturnType<typeof createQueryManager>\r\n  QuerySlimmer: QuerySlimmer\r\n\r\n  def<\r\n    TNodeType extends string,\r\n    TNodeData extends Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData extends Record<string, any> = {},\r\n    TNodeRelationalData extends NodeRelationalQueryBuilderRecord = {}\r\n  >(\r\n    def: NodeDefArgs<{\r\n      TNodeType: TNodeType;\r\n      TNodeData: TNodeData;\r\n      TNodeComputedData: TNodeComputedData;\r\n      TNodeRelationalData: TNodeRelationalData;\r\n    }>\r\n  ): INode<{\r\n    TNodeType: TNodeType;\r\n    TNodeData: TNodeData;\r\n    TNodeComputedData: TNodeComputedData;\r\n    TNodeRelationalData: TNodeRelationalData;\r\n  }>;\r\n\r\n  defTyped<\r\n    TNode extends INode\r\n  >(def: TNode extends INode<infer TNodeArgs> ? NodeDefArgs<TNodeArgs> : never): TNode\r\n}\r\n\r\nexport type NodeDefArgs<\r\n  TDefArgs extends {\r\n    TNodeType: string,\r\n    TNodeData: Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData: Record<string, any>,\r\n    TNodeRelationalData: NodeRelationalQueryBuilderRecord,\r\n  }\r\n> = {\r\n  type: TDefArgs[\"TNodeType\"];\r\n  properties: TDefArgs[\"TNodeData\"];\r\n  computed?: NodeComputedFns<{TNodeData: TDefArgs[\"TNodeData\"] & NodeDefaultProps, TNodeComputedData: TDefArgs[\"TNodeComputedData\"]}>;\r\n  relational?: NodeRelationalFns<TDefArgs[\"TNodeRelationalData\"]>;\r\n  generateMockData?: () => DeepPartial<GetResultingDataTypeFromProperties<TDefArgs[\"TNodeData\"]>>\r\n};\r\n\r\n/**\r\n * The interface implemented by each data type (like data.string, data.boolean)\r\n */\r\nexport interface IData<\r\n  TDataArgs extends {\r\n    TValue: any,\r\n    TParsedValue: any,\r\n    /**\r\n     * only defined for object and array types\r\n     *\r\n     * for arrays is the data type of each item in that array\r\n     * for objects is a record of strings to data (matching the structure the data.object received as an argument)\r\n     */\r\n    TBoxedValue:\r\n      | IData<any>\r\n      | DataDefaultFn\r\n      | Record<string, IData | DataDefaultFn>\r\n      | undefined\r\n  } = any\r\n> {\r\n  type: string;\r\n  parser(value: TDataArgs[\"TValue\"]): TDataArgs[\"TParsedValue\"];\r\n  boxedValue: TDataArgs[\"TBoxedValue\"];\r\n  defaultValue: Maybe<TDataArgs[\"TParsedValue\"]>;\r\n  // if isOptional is false, the DO will set a default value on this property if it receives a null value from the BE\r\n  isOptional: boolean;\r\n  /**\r\n   *  Enum type data will keep a reference to its acceptable values\r\n   *  so that later this can be used by the mock data generator to produce a random value from this array\r\n   */\r\n  acceptableValues?: Array<TDataArgs[\"TParsedValue\"]>\r\n}\r\n\r\n/**\r\n * Utility to extract the parsed value of an Data type\r\n */\r\nexport type GetDataType<TData extends IData | DataDefaultFn> = TData extends IData<\r\n  infer TDataArgs\r\n>\r\n  ? TDataArgs['TParsedValue']\r\n  : TData extends DataDefaultFn\r\n    ? TData extends (_: any) => IData<infer TDataArgs>\r\n      ? TDataArgs['TParsedValue']\r\n      : never\r\n  : never\r\n\r\n\r\n\r\nexport type GetParsedValueTypeFromDefaultFn<\r\n  TDefaultFn extends (_default: any) => IData\r\n> = TDefaultFn extends (_default: any) => IData<infer TDataArgs>\r\n  ? TDataArgs[\"TParsedValue\"]\r\n  : never;\r\n\r\n  /**\r\n   * Utility to extract the resulting data type from the properties definition of a node\r\n   * for example\r\n   * \r\n   * {\r\n   *   flag: boolean(false), // boolean and string types from mm-gql\r\n   *   name: string\r\n   * }\r\n   * \r\n   * will return\r\n   * \r\n   * {\r\n   *   flag: boolean, // boolean and string native types from TS\r\n   *   name: string\r\n   * }\r\n   */\r\nexport type GetResultingDataTypeFromProperties<TProperties extends Record<string, IData | DataDefaultFn>> =  {\r\n  [key in keyof TProperties]:\r\n    TProperties[key] extends IData<infer TDataArgs>\r\n      ? TDataArgs[\"TBoxedValue\"] extends Record<string, IData | DataDefaultFn>\r\n        ? IsMaybe<TDataArgs[\"TParsedValue\"]> extends true\r\n          ? Maybe<GetAllAvailableNodeDataTypeWithoutDefaultProps<{ TNodeData: TDataArgs[\"TBoxedValue\"], TNodeComputedData: {}}>>\r\n          : GetAllAvailableNodeDataTypeWithoutDefaultProps<{ TNodeData: TDataArgs[\"TBoxedValue\"], TNodeComputedData: {}}>\r\n        : TDataArgs[\"TParsedValue\"] extends Array<infer TArrayItemType>\r\n          ? IsMaybe<TDataArgs[\"TParsedValue\"]> extends true\r\n            ? Maybe<Array<TArrayItemType>>\r\n            : Array<TArrayItemType>\r\n          : TDataArgs[\"TParsedValue\"]\r\n      : TProperties[key] extends DataDefaultFn\r\n        ? GetParsedValueTypeFromDefaultFn<TProperties[key]>\r\n        : never;\r\n}\r\n\r\nexport type GetResultingFilterDataTypeFromProperties<TProperties extends Record<string, IData | DataDefaultFn>> =  {\r\n  [key in keyof TProperties]:\r\n    TProperties[key] extends IData<infer TDataArgs>\r\n        ? TDataArgs['TBoxedValue'] extends Record<string, IData | DataDefaultFn>\r\n          ? IsMaybe<TDataArgs['TParsedValue']> extends true\r\n            ? Maybe<GetAllAvailableNodeFilterDataTypeWithoutDefaultProps<{ TNodeData: TDataArgs['TBoxedValue'], TNodeComputedData: {} }>>\r\n            : GetAllAvailableNodeFilterDataTypeWithoutDefaultProps<{TNodeData: TDataArgs['TBoxedValue'], TNodeComputedData: {}}>\r\n          : TDataArgs['TParsedValue'] extends Array<infer TArrayItemType>\r\n            ? IsMaybe<TDataArgs['TParsedValue']> extends true\r\n              ? Maybe<Array<TArrayItemType>>\r\n              : Array<TArrayItemType>\r\n            : FilterValue<TDataArgs['TParsedValue']>\r\n      : TProperties[key] extends DataDefaultFn\r\n        ? FilterValue<GetParsedValueTypeFromDefaultFn<TProperties[key]>>\r\n        : never;\r\n}\r\n\r\nexport type GetSortingDataTypeFromProperties<TProperties extends Record<string, IData | DataDefaultFn>> =  {\r\n  [key in keyof TProperties]:\r\n    TProperties[key] extends IData<infer TDataArgs>\r\n      ? TDataArgs['TBoxedValue'] extends Record<string, IData | DataDefaultFn>\r\n        ? IsMaybe<TDataArgs['TParsedValue']> extends true\r\n          ? Maybe<GetAllAvailableNodeDataTypeWithoutDefaultPropsForSorting<{ TNodeData: TDataArgs['TBoxedValue'], TNodeComputedData: {}}>>\r\n          : GetAllAvailableNodeDataTypeWithoutDefaultPropsForSorting<{ TNodeData: TDataArgs['TBoxedValue'], TNodeComputedData: {}}>\r\n        : TDataArgs['TParsedValue'] extends Array<infer TArrayItemType>\r\n          ? IsMaybe<TDataArgs['TParsedValue']> extends true\r\n            ? Maybe<Array<TArrayItemType>>\r\n            : Array<TArrayItemType>\r\n          : SortValue\r\n      : TProperties[key] extends DataDefaultFn\r\n        ?  SortValue\r\n        : never;\r\n}\r\n\r\nexport type GetResultingDataTypeFromNodeDefinition<TNode extends INode> =\r\n  TNode extends INode<infer TNodeArgs> ? GetResultingDataTypeFromProperties<TNodeArgs[\"TNodeData\"]> : never\r\n\r\n\r\nexport type SortDirection = 'asc' | 'desc'\r\nexport type FilterCondition = 'or' | 'and'\r\nexport type FilterValue<TValue extends string | number> = TValue | (Partial<Record<TValue extends string ? EStringFilterOperator : ENumberFilterOperator, TValue> & {_condition?: FilterCondition}>)\r\nexport type SortObject = {_direction: SortDirection, _priority?: number}\r\nexport type SortValue = SortDirection | SortObject\r\n\r\nexport type GetResultingFilterDataTypeFromNodeDefinition<TSMNode extends INode> = TSMNode extends INode<infer TNodeArgs> ? GetResultingFilterDataTypeFromProperties<TNodeArgs[\"TNodeData\"] & NodeDefaultProps> : never\r\nexport type GetSortingDataTypeFromNodeDefinition<TSMNode extends INode> = TSMNode extends INode<infer TNodeArgs> ? GetSortingDataTypeFromProperties<TNodeArgs[\"TNodeData\"] & NodeDefaultProps> : never\r\n\r\n/**\r\n * Utility to extract the expected data type of a node based on its' properties and computed data\r\n * For data resulting from property definitions only, use GetResultingDataTypeFromProperties\r\n */\r\n\r\nexport type GetAllAvailableNodeDataType<\r\n  TGetAllAvailableNodeDataTypeArgs extends {\r\n    TNodeData: Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData: Record<string, any>\r\n  }\r\n> = GetResultingDataTypeFromProperties<\r\n  TGetAllAvailableNodeDataTypeArgs['TNodeData'] & NodeDefaultProps\r\n> & TGetAllAvailableNodeDataTypeArgs['TNodeComputedData'];\r\n\r\ntype GetAllAvailableNodeDataTypeWithoutDefaultPropsForSorting<\r\n  TGetAllAvailableNodeDataTypeWithoutDefaultPropsForSortingArgs extends {\r\n    TNodeData: Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData: Record<string, any>\r\n  }\r\n> = GetSortingDataTypeFromProperties<\r\n  TGetAllAvailableNodeDataTypeWithoutDefaultPropsForSortingArgs['TNodeData']\r\n> & TGetAllAvailableNodeDataTypeWithoutDefaultPropsForSortingArgs['TNodeComputedData'];\r\n\r\ntype GetAllAvailableNodeDataTypeWithoutDefaultProps<\r\n  TGetAllAvailableNodeDataTypeWithoutDefaultPropsArgs extends {\r\n    TNodeData: Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData: Record<string, any>\r\n  }\r\n> = GetResultingDataTypeFromProperties<\r\n  TGetAllAvailableNodeDataTypeWithoutDefaultPropsArgs['TNodeData']\r\n> & TGetAllAvailableNodeDataTypeWithoutDefaultPropsArgs['TNodeComputedData'];\r\n\r\ntype GetAllAvailableNodeFilterDataTypeWithoutDefaultProps<\r\n  TGetAllAvailableNodeFilterDataTypeWithoutDefaultPropsArgs extends {\r\n    TNodeData:  Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData:  Record<string, any>,\r\n  }\r\n> = GetResultingFilterDataTypeFromProperties<\r\n  TGetAllAvailableNodeFilterDataTypeWithoutDefaultPropsArgs['TNodeData']\r\n> & TGetAllAvailableNodeFilterDataTypeWithoutDefaultPropsArgs['TNodeComputedData'];\r\n\r\n/**\r\n * Takes in any object and returns a Partial of that object type\r\n * for nested objects, those will also be turned into partials\r\n */\r\nexport type DeepPartial<ObjectType extends Record<string, any>> = Partial<\r\n  {\r\n    [Key in keyof ObjectType]: ObjectType[Key] extends Maybe<Array<any>>\r\n      ? ObjectType[Key]\r\n      : ObjectType[Key] extends Maybe<Record<string, any>>\r\n      ? ObjectType[Key] extends null\r\n        ? Maybe<DeepPartial<ObjectType[Key]>>\r\n        : DeepPartial<ObjectType[Key]>\r\n      : ObjectType[Key];\r\n  }\r\n>;\r\n\r\ntype IsArray<Thing extends any, Y = true, N = false> = Thing extends Array<any> ? Y : N\r\n\r\n/**\r\n * A record that lives on each instance of a DOProxy to determine\r\n * if each data property on that DO is currently guaranteed to be up to date.\r\n * Any property that is read while not being up to date throws a run-time error to ensure the devs never use outdated data mistakenly\r\n */\r\nexport type UpToDateData<\r\n  TNodeData extends Record<string, IData | DataDefaultFn>\r\n> = DeepPartial<\r\n  {\r\n    [Key in keyof TNodeData]: TNodeData[Key] extends IData<{ TNodeData: Maybe<Array<any>>, TBoxedValue: any, TParsedValue: any, TValue: any }>\r\n      ? boolean\r\n      : TNodeData[Key] extends IData<infer TDataArgs>\r\n      ? TDataArgs[\"TBoxedValue\"] extends Record<string, IData | DataDefaultFn>\r\n        ? UpToDateData<TDataArgs[\"TBoxedValue\"]>\r\n        : boolean\r\n      : boolean;\r\n  }\r\n>;\r\n\r\n/**\r\n * These methods are called automatically when using this lib's public methods like \"useData\"\r\n */\r\nexport interface IDOMethods {\r\n  /**\r\n   * Called when we get data from the backend for this particular DO instance, found by its id\r\n   */\r\n  onDataReceived(data: Record<string, any>, opts?: {__unsafeIgnoreVersion?: boolean}): void;\r\n}\r\n\r\nexport interface IDOAccessors {\r\n  id: string\r\n  version: number\r\n  lastUpdatedBy: string\r\n  persistedData: Record<string,any>\r\n}\r\n\r\nexport type NodeDO = Record<string, any> & IDOMethods & IDOAccessors;\r\n\r\nexport type NodeComputedFns<\r\n  TNodeComputedFnsArgs extends {\r\n    TNodeData: Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData: Record<string, any>\r\n  }\r\n> = {\r\n  [key in keyof TNodeComputedFnsArgs[\"TNodeComputedData\"]]: (\r\n    data: GetAllAvailableNodeDataType<TNodeComputedFnsArgs>\r\n  ) => TNodeComputedFnsArgs[\"TNodeComputedData\"][key];\r\n};\r\n\r\nexport type NodeRelationalFns<\r\n  TNodeRelationalData extends NodeRelationalQueryBuilderRecord\r\n> = {\r\n  [key in keyof TNodeRelationalData]: () => TNodeRelationalData[key];\r\n};\r\n\r\nexport interface INode<\r\n  TNodeArgs extends {\r\n    TNodeType: string,\r\n    TNodeData: Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData: Record<string, any>,\r\n    TNodeRelationalData: NodeRelationalQueryBuilderRecord,\r\n  } = any,\r\n  TNodeComputedFns = NodeComputedFns<{ TNodeData: TNodeArgs['TNodeData'] & NodeDefaultProps, TNodeComputedData: TNodeArgs['TNodeComputedData'] }>,\r\n  TNodeDO = NodeDO\r\n> {\r\n  _isNodeDef: true;\r\n  data: TNodeArgs['TNodeData'] & NodeDefaultProps;\r\n  computed?: TNodeComputedFns;\r\n  relational?: NodeRelationalFns<TNodeArgs['TNodeRelationalData']>;\r\n  type: TNodeArgs['TNodeType'];\r\n  repository: INodeRepository;\r\n  do: new (data?: Record<string, any>) => TNodeDO;\r\n  generateMockData?: () => DeepPartial<GetResultingDataTypeFromProperties<TNodeArgs[\"TNodeData\"]>>\r\n}\r\n\r\n/**\r\n * These inform the library how to query for data that is related to the node type we're building.\r\n * So, for example, if a user has meetings under them, one of the user's relational data properties is \"meetings\", which will be \"IChildren\".\r\n * This teaches the library how to interpret a query that asks for the user's meetings.\r\n */\r\nexport type NodeRelationalQueryBuilder<TTargetNodeOrTargetNodeRecord extends INode | Maybe<INode> | Record<string, INode> | Maybe<Record<string,INode>>> =\r\n  | IOneToOneQueryBuilder<TTargetNodeOrTargetNodeRecord>\r\n  | IOneToManyQueryBuilder<TTargetNodeOrTargetNodeRecord>\r\n\r\nexport type NodeRelationalQuery<TTargetNodeOrTargetNodeRecord extends INode | Maybe<INode> | Record<string, INode> | Maybe<Record<string,INode>>> =\r\n  | IOneToOneQuery<{ TTargetNodeOrTargetNodeRecord: TTargetNodeOrTargetNodeRecord, TQueryBuilderOpts: any }>\r\n  | IOneToManyQuery<{ TTargetNodeOrTargetNodeRecord: TTargetNodeOrTargetNodeRecord, TQueryBuilderOpts: any }>\r\n\r\nexport type IOneToOneQueryBuilderOpts<TTargetNodeOrTargetNodeRecord extends INode | Maybe<INode> | Record<string, INode> | Maybe<Record<string,INode>>> =\r\n  TTargetNodeOrTargetNodeRecord extends INode\r\n  ? {\r\n      map: MapFnForNode<NonNullable<TTargetNodeOrTargetNodeRecord>>;\r\n  }\r\n  : TTargetNodeOrTargetNodeRecord extends Record<string, INode>\r\n    ? {\r\n      [Tkey in keyof TTargetNodeOrTargetNodeRecord]: { map: MapFnForNode<TTargetNodeOrTargetNodeRecord[Tkey]> }\r\n    }\r\n    : never\r\nexport interface IOneToOneQueryBuilder<\r\n  TTargetNodeOrTargetNodeRecord extends INode | Maybe<INode> | Record<string, INode> | Maybe<Record<string,INode>>\r\n> {\r\n  <TQueryBuilderOpts extends IOneToOneQueryBuilderOpts<TTargetNodeOrTargetNodeRecord>>(\r\n    queryBuilderOpts: TQueryBuilderOpts\r\n  ): IOneToOneQuery<{TTargetNodeOrTargetNodeRecord: TTargetNodeOrTargetNodeRecord, TQueryBuilderOpts: TQueryBuilderOpts}>;\r\n}\r\nexport interface IOneToOneQuery<\r\n  TOneToOneQueryArgs extends {\r\n    TTargetNodeOrTargetNodeRecord: INode | Maybe<INode> | Record<string, INode> | Maybe<Record<string,INode>>,\r\n    TQueryBuilderOpts: IOneToOneQueryBuilderOpts<TOneToOneQueryArgs[\"TTargetNodeOrTargetNodeRecord\"]>\r\n  }\r\n> {\r\n  _relational: RELATIONAL_TYPES.oneToOne;\r\n  _relationshipName: string;\r\n  queryBuilderOpts: TOneToOneQueryArgs[\"TQueryBuilderOpts\"]\r\n  def: TOneToOneQueryArgs[\"TTargetNodeOrTargetNodeRecord\"]\r\n}\r\n\r\nexport type IOneToManyQueryBuilderOpts<TTargetNodeOrTargetNodeRecord extends INode | Maybe<INode> | Record<string, INode> | Maybe<Record<string,INode>>> =\r\n  TTargetNodeOrTargetNodeRecord extends INode\r\n  ? {\r\n      map: MapFnForNode<NonNullable<TTargetNodeOrTargetNodeRecord>>;\r\n      filter?: ValidFilterForNode<TTargetNodeOrTargetNodeRecord>\r\n      pagination?: IQueryPagination\r\n      sort?: ValidSortForNode<TTargetNodeOrTargetNodeRecord>\r\n  }\r\n  : TTargetNodeOrTargetNodeRecord extends Record<string, INode>\r\n    ? {\r\n      [Tkey in keyof TTargetNodeOrTargetNodeRecord]: { map: MapFnForNode<TTargetNodeOrTargetNodeRecord[Tkey]> }\r\n    }\r\n    : never\r\nexport interface IOneToManyQueryBuilder<\r\n  TTargetNodeOrTargetNodeRecord extends INode | Maybe<INode> | Record<string, INode> | Maybe<Record<string,INode>>\r\n> {\r\n  <TQueryBuilderOpts extends IOneToManyQueryBuilderOpts<TTargetNodeOrTargetNodeRecord>>(\r\n    queryBuilderOpts: TQueryBuilderOpts\r\n  ): IOneToManyQuery<{ TTargetNodeOrTargetNodeRecord: TTargetNodeOrTargetNodeRecord, TQueryBuilderOpts: TQueryBuilderOpts }>;\r\n}\r\nexport interface IOneToManyQuery<\r\n  TOneToManyQueryArgs extends {\r\n    TTargetNodeOrTargetNodeRecord: INode | Maybe<INode> | Record<string, INode> | Maybe<Record<string,INode>>,\r\n    TQueryBuilderOpts: IOneToManyQueryBuilderOpts<TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord']>\r\n  }\r\n> {\r\n  _relational: RELATIONAL_TYPES.oneToMany;\r\n  _relationshipName: string;\r\n  queryBuilderOpts: TOneToManyQueryArgs['TQueryBuilderOpts']\r\n  def: TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord']\r\n}\r\n\r\nexport enum DATA_TYPES {\r\n  string = 's',\r\n  maybeString = 'mS',\r\n  stringEnum = 'sE',\r\n  maybeStringEnum = 'mSE',\r\n  number = 'n',\r\n  maybeNumber = 'mN',\r\n  boolean = 'b',\r\n  maybeBoolean = 'mB',\r\n  object = 'o',\r\n  maybeObject = 'mO',\r\n  record = 'r',\r\n  maybeRecord = 'mR',\r\n  array = 'a',\r\n  maybeArray = 'mA',\r\n}\r\n\r\nexport enum RELATIONAL_TYPES {\r\n  oneToOne = 'oTO',\r\n  oneToMany = 'otM',\r\n}\r\n\r\nexport interface IQueryPagination {\r\n  itemsPerPage: number\r\n  page: number\r\n}\r\n\r\nexport type NodeRelationalQueryBuilderRecord = Record<\r\n  string,\r\n  // the tsignore here is necessary\r\n  // because the generic that NodeRelationalQueryBuilder needs is\r\n  // the node definition for the origin of the relational queries\r\n  // which when defining a node, is the node being defined\r\n  // attempting to replicate the node here would always end up in a loop\r\n  // since we need the relational data to construct a node\r\n  // and need the node to construct the relational data (without this ts ignore)\r\n  // @ts-ignore\r\n  NodeRelationalQueryBuilder\r\n>;\r\n\r\nexport interface INodeRepository {\r\n  byId(id: string): NodeDO;\r\n  onDataReceived(data: { id: string } & Record<string, any>): void;\r\n  onNodeDeleted(id: string): void;\r\n}\r\n\r\nexport enum EStringFilterOperator {\r\n  /** equal */\r\n  'eq' = 'eq',\r\n  /** not equal */\r\n  'neq' = 'neq',\r\n  'contains' = 'contains',\r\n  'ncontains' = 'ncontains',\r\n  'startsWith' = 'startsWith',\r\n  'nstartsWith' = 'nstartsWith',\r\n  'endsWith' = 'endsWith',\r\n  'nendsWith' = 'nendsWith',\r\n}\r\n\r\nexport enum ENumberFilterOperator {\r\n  'eq' = 'eq',\r\n  'neq' = 'neq',\r\n  'gt' = 'gt',\r\n  'ngt' = 'ngt',\r\n  'gte' = 'gte',\r\n  'ngte' = 'ngte',\r\n  'lt' = 'lt',\r\n  'nlt' = 'nlt',\r\n  'lte' = 'lte',\r\n  'nlte' = 'nlte'\r\n}\r\n\r\n/**\r\n * Returns the valid filter for a node\r\n * excluding properties which are arrays and records\r\n * and including properties which are nested in objects\r\n */\r\nexport type ValidFilterForNode<TNode extends INode> = ExtractNodeFilterData<TNode> | ExtractNodeRelationalDataFilter<TNode>\r\nexport type ValidSortForNode<TNode extends INode> = ExtractNodeSortData<TNode> | ExtractNodeRelationalDataSort<TNode>\r\n\r\nexport type ExtractNodeFilterData<TNode extends INode> = DeepPartial<{\r\n  [\r\n    TKey in keyof ExtractNodeDataWithDefaultProperties<TNode> as\r\n      ExtractNodeDataWithDefaultProperties<TNode>[TKey] extends IData<infer TDataArgs>\r\n        ? IsArray<TDataArgs[\"TParsedValue\"]> extends true\r\n          ? never\r\n          : TDataArgs[\"TBoxedValue\"] extends undefined \r\n            ? TKey\r\n            : TDataArgs[\"TBoxedValue\"] extends Record<string, IData | DataDefaultFn>\r\n              ? TKey\r\n              : never\r\n        : ExtractNodeDataWithDefaultProperties<TNode>[TKey] extends DataDefaultFn\r\n          ? IsArray<GetParsedValueTypeFromDefaultFn<ExtractNodeDataWithDefaultProperties<TNode>[TKey]>> extends true\r\n            ? never\r\n            : TKey\r\n          : TKey  \r\n  ]: TKey extends keyof GetResultingFilterDataTypeFromNodeDefinition<TNode>\r\n    ? GetResultingFilterDataTypeFromNodeDefinition<TNode>[TKey]\r\n    : never\r\n}> \r\n\r\nexport type ExtractNodeSortData<TNode extends INode> = DeepPartial<{\r\n  [\r\n    TKey in keyof ExtractNodeDataWithDefaultProperties<TNode> as\r\n      ExtractNodeDataWithDefaultProperties<TNode>[TKey] extends IData<infer TDataArgs>\r\n        ? IsArray<TDataArgs[\"TParsedValue\"]> extends true\r\n          ? never\r\n          : TDataArgs[\"TBoxedValue\"] extends undefined \r\n            ? TKey\r\n            : TDataArgs[\"TBoxedValue\"] extends Record<string, IData | DataDefaultFn>\r\n              ? TKey\r\n              : never\r\n        : ExtractNodeDataWithDefaultProperties<TNode>[TKey] extends DataDefaultFn\r\n          ? IsArray<GetParsedValueTypeFromDefaultFn<ExtractNodeDataWithDefaultProperties<TNode>[TKey]>> extends true\r\n            ? never\r\n            : TKey\r\n          : TKey  \r\n  ]: TKey extends keyof GetSortingDataTypeFromNodeDefinition<TNode>\r\n    ? GetSortingDataTypeFromNodeDefinition<TNode>[TKey]\r\n    : never\r\n}> \r\n\r\nexport type QueryDefinitionTarget =\r\n  | { id: string, allowNullResult?: boolean }\r\n  | { ids: Array<string> }\r\n    \r\nexport type FilterObjectForNode<TNode extends INode> = ValidFilterForNode<TNode> \r\nexport type SortObjectForNode<TNode extends INode> = ValidSortForNode<TNode> \r\n// The config needed by a query to get one or multiple nodes of a single type\r\nexport type QueryDefinition<\r\n  TQueryDefinitionArgs extends {\r\n    TNode: INode,\r\n    TMapFn: MapFnForNode<TQueryDefinitionArgs[\"TNode\"]> | undefined,\r\n    TQueryDefinitionTarget: QueryDefinitionTarget\r\n  }\r\n> = { \r\n  def: TQueryDefinitionArgs[\"TNode\"];\r\n  map: TQueryDefinitionArgs[\"TMapFn\"];\r\n  filter?: FilterObjectForNode<TQueryDefinitionArgs[\"TNode\"]>\r\n  sort?: SortObjectForNode<TQueryDefinitionArgs[\"TNode\"]>\r\n  target?: TQueryDefinitionArgs[\"TQueryDefinitionTarget\"]\r\n  pagination?: IQueryPagination\r\n  tokenName?: string\r\n};\r\n\r\n// A query takes a record where you can specify aliases for each node type you're querying (including 2 aliases for different sets of the same node type)\r\n//\r\n// example:\r\n//  usersTodos: queryDefinition({\r\n//    def: todo,\r\n//    under: [authenticatedUser.id],\r\n//    map: ({ id }) => ({ id })\r\n//  }),\r\n//  meetingTodos: queryDefinition({\r\n//    def: todo,\r\n//    under: [meeting.id],\r\n//    map: ({ id } => ({ id })\r\n//  })\r\n//\r\nexport type QueryDefinitions<TNode, TMapFn, TQueryDefinitionTarget> = Record<\r\n  string,\r\n  // adding strict params to QueryDefinition here breaks the return type of a query function, since the TNodeData and TNodeComputedData types being infered\r\n  // in QueryDefinition would no longer be infered correctly. This would result in \"any\" types being returned for the query result, or implicit anys in the query fn definition\r\n  // strangely, if we simply tell TS to ignore the error it works perfectly\r\n  // see https://tractiontools.atlassian.net/browse/MM-433 for simplified examples\r\n  // @ts-ignore\r\n  QueryDefinition<{ TNode: TNode, TMapFn: TMapFn, TQueryDefinitionTarget: TQueryDefinitionTarget }> | INode | null\r\n>;\r\n\r\nexport type UseSubscriptionQueryDefinitionOpts = {doNotSuspend?: boolean}\r\n\r\nexport type UseSubscriptionQueryDefinition<\r\n  TUseSubscriptionQueryDefinitionArgs extends {\r\n    TNode : INode,\r\n    TMapFn :  MapFnForNode<TUseSubscriptionQueryDefinitionArgs['TNode']> | undefined,\r\n    TQueryDefinitionTarget : QueryDefinitionTarget,\r\n    TUseSubscriptionQueryDefinitionOpts: UseSubscriptionQueryDefinitionOpts\r\n  }\r\n> = QueryDefinition<{\r\n  TNode: TUseSubscriptionQueryDefinitionArgs[\"TNode\"],\r\n  TMapFn: TUseSubscriptionQueryDefinitionArgs[\"TMapFn\"],\r\n  TQueryDefinitionTarget: TUseSubscriptionQueryDefinitionArgs[\"TQueryDefinitionTarget\"]\r\n}> & {useSubOpts?: TUseSubscriptionQueryDefinitionArgs[\"TUseSubscriptionQueryDefinitionOpts\"]}\r\n\r\nexport type UseSubscriptionQueryDefinitions<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TUseSubscriptionQueryDefinitionOpts\r\n> = Record<\r\n  string,\r\n  // adding strict params to UseSubscriptionQueryDefinition here breaks the return type of a query function, since the TNodeData and TNodeComputedData types being infered\r\n  // in UseSubscriptionQueryDefinition would no longer be infered correctly. This would result in \"any\" types being returned for the query result, or implicit anys in the query fn definition\r\n  // strangely, if we simply tell TS to ignore the error it works perfectly\r\n  // see https://tractiontools.atlassian.net/browse/MM-433 for simplified examples\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  UseSubscriptionQueryDefinition<{\r\n    TNode: TNode,\r\n    TMapFn: TMapFn,\r\n    TQueryDefinitionTarget: TQueryDefinitionTarget,\r\n    TUseSubscriptionQueryDefinitionOpts: TUseSubscriptionQueryDefinitionOpts\r\n  }> | INode | null\r\n>\r\n\r\nexport type QueryDataReturn<\r\n  // @ts-ignore\r\n  TQueryDefinitions extends QueryDefinitions\r\n> = {\r\n  [Key in keyof TQueryDefinitions]: IsMaybe<TQueryDefinitions[Key]> extends true\r\n    ? Maybe<GetResultingDataFromQueryDefinition<TQueryDefinitions[Key]>>\r\n    : GetResultingDataFromQueryDefinition<TQueryDefinitions[Key]>\r\n};\r\n\r\nexport type GetResultingDataFromQueryDefinition<TQueryDefinition extends QueryDefinition<any> | INode | null> = TQueryDefinition extends {\r\n  map: MapFn<any>;\r\n}\r\n  ? /**\r\n     * full query definition provided, with a map fn\r\n     */\r\n    TQueryDefinition extends { def: infer TNode; map: infer TMapFn }\r\n    ? TNode extends INode\r\n      ? TMapFn extends MapFnForNode<TNode>\r\n        ? TQueryDefinition extends { target?: { id: string } }\r\n          ? TQueryDefinition extends { target?: { allowNullResult: true } }\r\n            ? Maybe<ExtractQueriedDataFromMapFn<TMapFn, TNode>>\r\n            : ExtractQueriedDataFromMapFn<TMapFn, TNode>\r\n          : NodesCollection<ExtractQueriedDataFromMapFn<TMapFn, TNode>>\r\n        : never\r\n      : never\r\n    : never\r\n  : TQueryDefinition extends { def: INode } // full query definition provided, but map function omitted // return the entirety of the node's data\r\n  ? TQueryDefinition extends { def: infer TNode }\r\n    ? TNode extends INode\r\n      ? TQueryDefinition extends { target?: { id: string } }\r\n        ? GetAllAvailableNodeDataType<{ TNodeData: ExtractNodeData<TNode>, TNodeComputedData: ExtractNodeComputedData<TNode> }> & DataExpectedOnAllNodeResults<TNode>\r\n        : NodesCollection<\r\n          GetAllAvailableNodeDataType<{ TNodeData: ExtractNodeData<TNode>, TNodeComputedData: ExtractNodeComputedData<TNode> }>  & DataExpectedOnAllNodeResults<TNode>\r\n        >\r\n      : never\r\n    : never\r\n  : TQueryDefinition extends INode\r\n  ? /**\r\n     * shorthand syntax used, only a node definition was provided\r\n     */\r\n    NodesCollection<\r\n      GetAllAvailableNodeDataType<{\r\n        TNodeData: ExtractNodeData<TQueryDefinition>,\r\n        TNodeComputedData: ExtractNodeComputedData<TQueryDefinition>\r\n      }> & DataExpectedOnAllNodeResults<TQueryDefinition>\r\n    >\r\n  : never;\r\n\r\nexport type UseSubscriptionReturn<\r\n  // @ts-ignore\r\n  TQueryDefinitions extends UseSubscriptionQueryDefinitions\r\n> = {\r\n  data: {\r\n    [key in keyof TQueryDefinitions]:\r\n      TQueryDefinitions[key] extends { useSubOpts?:{ doNotSuspend: true } }\r\n          ? Maybe<GetResultingDataFromQueryDefinition<TQueryDefinitions[key]>>\r\n          : IsMaybe<TQueryDefinitions[key]> extends true\r\n            ? Maybe<GetResultingDataFromQueryDefinition<TQueryDefinitions[key]>>\r\n            : GetResultingDataFromQueryDefinition<TQueryDefinitions[key]>\r\n  },\r\n  querying: boolean,\r\n  error: any\r\n}\r\n  \r\nexport type MapFnForNode<TNode extends INode> = MapFn<{\r\n  TNodeData: ExtractNodeData<TNode>,\r\n  TNodeComputedData: ExtractNodeComputedData<TNode>,\r\n  TNodeRelationalData: ExtractNodeRelationalData<TNode>\r\n}>;\r\n\r\nexport type MapFn<\r\n  TMapFnArgs extends {\r\n    TNodeData: Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData: Record<string, any>,\r\n    TNodeRelationalData: NodeRelationalQueryBuilderRecord,\r\n  }\r\n> = (\r\n  data: GetMapFnArgs<INode<TMapFnArgs & { TNodeType: any }>>\r\n) => RequestedData<TMapFnArgs>;\r\n\r\nexport type GetMapFnArgs<\r\n  TNode extends INode,\r\n> = TNode extends INode<infer TNodeArgs>\r\n  ? GetMapFnArgsFromProperties<TNodeArgs['TNodeData']> &\r\n      TNodeArgs['TNodeRelationalData']\r\n      & GetMapFnArgsFromProperties<NodeDefaultProps>\r\n  : never;\r\n\r\ntype GetMapFnArgsFromProperties<TProperties extends Record<string, IData | DataDefaultFn>> = {\r\n  [key in keyof TProperties]: \r\n    TProperties[key] extends IData<{TParsedValue: Maybe<Array<any>>, TValue: any, TBoxedValue: any}>\r\n      ? TProperties[key]\r\n      : TProperties[key] extends IData<infer TDataArgs>\r\n        ? TDataArgs['TBoxedValue'] extends Record<string, IData | DataDefaultFn>\r\n          // allows querying a partial of an object within a node\r\n          ? <TMapFn extends MapFn<{ TNodeData: TDataArgs['TBoxedValue'], TNodeComputedData:{},  TNodeRelationalData: {} }>>(opts: {\r\n              map: TMapFn;\r\n            }) => TMapFn\r\n          : TProperties[key]\r\n        : TProperties[key]\r\n}\r\n\r\n\r\n// The accepted type for a map fn return\r\n// validates that the engineer is querying data that exists on the nodes\r\n// which gives us typo prevention :)\r\ntype RequestedData<\r\n    TRequestedDataArgs extends {\r\n      TNodeData: Record<string, IData | DataDefaultFn>,\r\n      TNodeComputedData: Record<string, any>,\r\n    }\r\n  // TS-TYPE-TEST-1 making this a partial seems to cause TS to not throw errors when a random property is put into a map fn return with a bogus value\r\n  // this will likely lead to developers misusing the query function (such as forgetting to define a map function for a relational query)\r\n> = Partial<{\r\n      [Key in\r\n        keyof TRequestedDataArgs['TNodeData']\r\n        | keyof TRequestedDataArgs['TNodeComputedData']\r\n       ]: Key extends keyof TRequestedDataArgs['TNodeData']\r\n        ? TRequestedDataArgs['TNodeData'][Key] extends IData<{TParsedValue: Maybe<Array<any>>, TBoxedValue: any, TValue: any}>\r\n          ? TRequestedDataArgs['TNodeData'][Key]\r\n          : TRequestedDataArgs['TNodeData'][Key] extends IData<infer TDataArgs> \r\n            ? TDataArgs['TValue'] extends Maybe<Record<string,any>> // Allows querying partials of nested objects\r\n              ? MapFn<{TNodeData: TDataArgs['TValue'], TNodeComputedData: {}, TNodeRelationalData:{}}> // {} because there should be no computed data or relational data for objects nested in nodes\r\n              : TRequestedDataArgs['TNodeData'][Key]\r\n            : TRequestedDataArgs['TNodeData'][Key]\r\n          : Key extends keyof  TRequestedDataArgs['TNodeComputedData']\r\n        ? TRequestedDataArgs['TNodeComputedData'][Key] \r\n        : never;\r\n  } | {}>\r\n\r\n\r\n// A generic to extract the resulting data based on a map fn\r\nexport type ExtractQueriedDataFromMapFn<\r\n  TMapFn extends MapFnForNode<TNode>,\r\n  TNode extends INode\r\n> = DataExpectedOnAllNodeResults<TNode>\r\n  & ExtractQueriedDataFromMapFnReturn<ReturnType<TMapFn>, TNode>\r\n\r\ntype DataExpectedOnAllNodeResults<TNode extends INode> =\r\n  { type: TNode['type'] }\r\n  & GetResultingDataTypeFromProperties<PropertiesQueriedForAllNodes>\r\n  & ExtractNodeComputedData<TNode>\r\n\r\n// From the return of a map fn, get the type of data that will be returned by that portion of the query, aka the expected response from the API\r\ntype ExtractQueriedDataFromMapFnReturn<\r\n  TMapFnReturn,\r\n  TNode extends INode\r\n> = {\r\n  [Key in keyof TMapFnReturn]:\r\n    // when we passed through a relational property without specifying a mapFn\r\n    TMapFnReturn[Key] extends NodeRelationalQueryBuilder<any>\r\n    ? never\r\n    :\r\n    TMapFnReturn[Key] extends IOneToOneQuery<any>\r\n    ? ExtractQueriedDataFromOneToOneQuery<TMapFnReturn[Key]>\r\n    :\r\n    TMapFnReturn[Key] extends IOneToManyQuery<any>\r\n    ? ExtractQueriedDataFromOneToManyQuery<TMapFnReturn[Key]>\r\n    :\r\n    TMapFnReturn[Key] extends MapFnForNode<TNode>\r\n    ? ExtractQueriedDataFromMapFn<TMapFnReturn[Key], TNode>  \r\n    :\r\n    // when we're querying data on the node we used as the \"def\"\r\n    TMapFnReturn[Key] extends IData | DataDefaultFn\r\n    ? GetDataType<TMapFnReturn[Key]>\r\n    :\r\n    // when we passed through an object property without specifying a mapFn\r\n    TMapFnReturn[Key] extends (opts: {map: MapFn<infer TMapFnArgs>}) => MapFn<any>\r\n    ? GetResultingDataTypeFromProperties<TMapFnArgs['TNodeData']>\r\n    :\r\n    // when we're querying data inside a nested object\r\n    TMapFnReturn[Key] extends MapFn<any>\r\n    ? ExtractQueriedDataFromMapFn<TMapFnReturn[Key], TNode>\r\n    :\r\n    never;\r\n};\r\n\r\n// Without this,ExtractQueriedDataFromOneToOneQuery and ExtractResultsUnionFromOneToOneQueryBuilder somehow cause a loop\r\n// even though ExtractQueriedDataFromOneToOneQuery does not call ExtractResultsUnionFromOneToOneQueryBuilder unless it's dealing with a record of node definitions (union representation)\r\n// borrowed this solution from this article\r\n// https://www.angularfix.com/2022/01/why-am-i-getting-instantiation-is.html\r\n// relavant github discussions:\r\n// https://github.com/microsoft/TypeScript/issues/34933\r\n// https://github.com/microsoft/TypeScript/pull/44997\r\n// https://github.com/microsoft/TypeScript/pull/45025\r\ntype Prev = [never, 0, 1];\r\n\r\ntype ExtractQueriedDataFromOneToOneQuery<\r\n  TOneToOneQuery extends IOneToOneQuery<any>,\r\n  D extends Prev[number] = 1\r\n> = \r\n  [D] extends [never] ? never :\r\n  TOneToOneQuery extends IOneToOneQuery<infer TOneToOneQueryArgs>\r\n    ? IsMaybe<TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord']> extends true\r\n      ? TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord'] extends Maybe<INode>\r\n        ? TOneToOneQueryArgs['TQueryBuilderOpts'] extends IOneToOneQueryBuilderOpts<NonNullable<TOneToOneQueryArgs[\"TTargetNodeOrTargetNodeRecord\"]>>\r\n          ? Maybe<ExtractQueriedDataFromMapFn<TOneToOneQueryArgs['TQueryBuilderOpts']['map'], NonNullable<TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord']>>>\r\n          : never\r\n        : TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord'] extends Maybe<Record<string, INode>>\r\n          ? TOneToOneQueryArgs['TQueryBuilderOpts'] extends IOneToOneQueryBuilderOpts<NonNullable<TOneToOneQueryArgs[\"TTargetNodeOrTargetNodeRecord\"]>>\r\n            ? Maybe<ExtractResultsUnionFromOneToOneQueryBuilder<NonNullable<TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord']>, TOneToOneQueryArgs['TQueryBuilderOpts'], Prev[D]>>\r\n            : never\r\n          : never\r\n      : TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord'] extends INode\r\n        ? TOneToOneQueryArgs['TQueryBuilderOpts'] extends IOneToOneQueryBuilderOpts<TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord']>\r\n          ? ExtractQueriedDataFromMapFn<TOneToOneQueryArgs['TQueryBuilderOpts']['map'], TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord']>\r\n          : never\r\n        : TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord'] extends Record<string, INode>\r\n          ? TOneToOneQueryArgs['TQueryBuilderOpts'] extends IOneToOneQueryBuilderOpts<TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord']>\r\n            ? ExtractResultsUnionFromOneToOneQueryBuilder<TOneToOneQueryArgs['TTargetNodeOrTargetNodeRecord'], TOneToOneQueryArgs['TQueryBuilderOpts'], Prev[D]>\r\n            : never\r\n          : never\r\n    : never\r\n\r\ntype ExtractQueriedDataFromOneToManyQuery<\r\n  TOneToManyQuery extends IOneToManyQuery<any>,\r\n  D extends Prev[number] = 1\r\n> = \r\n  [D] extends [never] ? never :\r\n  TOneToManyQuery extends IOneToManyQuery<infer TOneToManyQueryArgs>\r\n    ? IsMaybe<TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord']> extends true\r\n      ? TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord'] extends Maybe<INode>\r\n        ? TOneToManyQueryArgs['TQueryBuilderOpts'] extends IOneToManyQueryBuilderOpts<NonNullable<TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord']>>\r\n          ? Maybe<NodesCollection<ExtractQueriedDataFromMapFn<TOneToManyQueryArgs['TQueryBuilderOpts']['map'], NonNullable<TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord']>>>>\r\n          : never\r\n        : TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord'] extends Maybe<Record<string, INode>>\r\n          ? TOneToManyQueryArgs['TQueryBuilderOpts'] extends IOneToManyQueryBuilderOpts<NonNullable<TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord']>> \r\n            ? Maybe<NodesCollection<ExtractResultsUnionFromOneToOneQueryBuilder<NonNullable<TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord']>, TOneToManyQueryArgs['TQueryBuilderOpts'], Prev[D]>>>\r\n            : never\r\n          : never\r\n      : TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord'] extends INode\r\n        ? TOneToManyQueryArgs['TQueryBuilderOpts'] extends IOneToManyQueryBuilderOpts<TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord']>\r\n          ? NodesCollection<ExtractQueriedDataFromMapFn<TOneToManyQueryArgs['TQueryBuilderOpts']['map'], TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord']>>\r\n          : never\r\n        : TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord'] extends Record<string, INode>\r\n        ? TOneToManyQueryArgs['TQueryBuilderOpts'] extends IOneToManyQueryBuilderOpts<TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord']>\r\n            ? NodesCollection<ExtractResultsUnionFromOneToOneQueryBuilder<TOneToManyQueryArgs['TTargetNodeOrTargetNodeRecord'], TOneToManyQueryArgs['TQueryBuilderOpts'], Prev[D]>>\r\n            : never\r\n          : never\r\n    : never\r\n\r\ntype ExtractResultsUnionFromOneToOneQueryBuilder<\r\n  TTargetNodeOrTargetNodeRecord extends Record<string, INode>,\r\n  TQueryBuilderOpts extends IOneToOneQueryBuilderOpts<TTargetNodeOrTargetNodeRecord>,\r\n  D extends Prev[number]\r\n> = ExtractObjectValues<{\r\n  [key in keyof TQueryBuilderOpts]:\r\n      key extends keyof TTargetNodeOrTargetNodeRecord \r\n        ? TQueryBuilderOpts[key] extends IOneToOneQueryBuilderOpts<TTargetNodeOrTargetNodeRecord[key]>\r\n          ?\r\n            ExtractQueriedDataFromOneToOneQuery<\r\n              // says this doesn't satisfy the constraint of IOneToOneQueryBuilderOpts<TTargetNodeOrTargetNodeRecord[key]>\r\n              // but it does, and it works anyway\r\n              // @ts-ignore\r\n              IOneToOneQuery<{\r\n                TTargetNodeOrTargetNodeRecord: TTargetNodeOrTargetNodeRecord[key],\r\n                TQueryBuilderOpts: {\r\n                  map: TQueryBuilderOpts[key]['map']\r\n                }\r\n              }>,\r\n               D\r\n            >\r\n          : never\r\n        : never\r\n}>\r\n\r\ntype ExtractObjectValues<TObject extends Record<string,any>> = TObject extends Record<string, infer TValueType> ? TValueType : never\r\n\r\nexport type ExtractNodeData<TNode extends INode> = TNode extends INode<\r\n  infer TNodeArgs\r\n>\r\n  ? TNodeArgs[\"TNodeData\"]\r\n  : never;\r\nexport type ExtractNodeDataWithDefaultProperties<TNode extends INode> = TNode extends INode<\r\n  infer TNodeArgs\r\n>\r\n  ? TNodeArgs[\"TNodeData\"] & NodeDefaultProps\r\n  : never;\r\n\r\nexport type ExtractNodeRelationalDataFilter<TNode extends INode> = TNode extends INode<infer TNodeArgs>\r\n  ? DeepPartial<{[Tkey in keyof TNodeArgs['TNodeRelationalData']]: \r\n    TNodeArgs['TNodeRelationalData'][Tkey] extends IOneToManyQueryBuilder<infer TOneToManyRelationalNode> \r\n      ? TOneToManyRelationalNode extends INode<any> \r\n        ? ExtractNodeFilterData<TOneToManyRelationalNode> : never \r\n    : TNodeArgs['TNodeRelationalData'][Tkey] extends IOneToOneQueryBuilder<infer TOneToOneRelationalNode> \r\n      ? TOneToOneRelationalNode extends INode<any> \r\n        ? ExtractNodeFilterData<TOneToOneRelationalNode> : never  \r\n    : never}>\r\n  : never;\r\nexport type ExtractNodeRelationalDataSort<TNode extends INode> = TNode extends INode<infer TNodeArgs>\r\n  ? DeepPartial<{[Tkey in keyof TNodeArgs['TNodeRelationalData']]: \r\n    TNodeArgs['TNodeRelationalData'][Tkey] extends IOneToManyQueryBuilder<infer TOneToManyRelationalNode> \r\n      ? TOneToManyRelationalNode extends INode<any> \r\n        ? ExtractNodeSortData<TOneToManyRelationalNode> : never \r\n    : TNodeArgs['TNodeRelationalData'][Tkey] extends IOneToOneQueryBuilder<infer TOneToOneRelationalNode> \r\n      ? TOneToOneRelationalNode extends INode<any> \r\n        ? ExtractNodeSortData<TOneToOneRelationalNode> : never  \r\n    : never}>\r\n  : never;\r\n\r\ntype ExtractNodeComputedData<TNode extends INode> = TNode extends INode<\r\n  infer TNodeArgs\r\n>\r\n  ? TNodeArgs[\"TNodeComputedData\"]\r\n  : never;\r\n\r\ntype ExtractNodeRelationalData<\r\n  TNode extends INode\r\n> = TNode extends INode<infer TNodeArgs>\r\n  ? TNodeArgs[\"TNodeRelationalData\"]\r\n  : never;\r\n\r\n/**\r\n * a record of all the queries identified in this query definitions\r\n * looks something like this\r\n *\r\n * {\r\n *   // alias\r\n *   usersTodos: {\r\n *     // the Node we're querying\r\n *     def: todo,\r\n *     // id used as under\r\n *     under: ['some-id-I-want-to-get-children-for'],\r\n *     // ^ could have under or ids, not both\r\n *     ids: ['some-specific-node-id-im-trying-to-query'],\r\n *     // properties being queried on this todo, Array<keyof Todo>\r\n *     properties: ['id', 'task'],\r\n *     // relational data being queried\r\n *     relational: {\r\n *       // alias for the relational query result\r\n *       assignee: {\r\n *         // the node for the relational data we're querying\r\n *         def: user,\r\n *         properties: ['firstName', 'lastName'],\r\n *\r\n *         // if the todo node defines the assignee as being a \"oneToMany\" relationship\r\n *         // This would also return an array of users, instead of a single user in that case.\r\n *         oneToMany: true,\r\n *         // OR if the todo node defines the assignee as being a \"oneToOne\" relationship\r\n *         oneToOne: true\r\n *       }\r\n *     }\r\n *   })\r\n * }\r\n */\r\nexport type BaseQueryRecordEntry = {\r\n  def: INode;\r\n  properties: Array<string>;\r\n  relational?: RelationalQueryRecord;\r\n  filter?: ValidFilterForNode<INode>\r\n  sort?: ValidFilterForNode<INode>\r\n  pagination?: IQueryPagination\r\n};\r\n\r\nexport type QueryRecordEntry = BaseQueryRecordEntry & {\r\n  pagination?: IQueryPagination\r\n  ids?: Array<string> \r\n  id?: string\r\n  allowNullResult?: boolean\r\n}\r\n\r\nexport type RelationalQueryRecordEntry =  { _relationshipName: string } & (\r\n  | (BaseQueryRecordEntry & { oneToOne: true })\r\n  | (BaseQueryRecordEntry & { oneToMany: true })\r\n)\r\n\r\nexport type QueryRecord = Record<string, QueryRecordEntry>;\r\n\r\nexport type RelationalQueryRecord = Record<string, RelationalQueryRecordEntry>\r\n\r\nexport interface IDOProxy {\r\n  updateRelationalResults(\r\n    newRelationalResults: Maybe<Record<string, IDOProxy | Array<IDOProxy>>>\r\n  ): void;\r\n}\r\n","// thrown when any property on the DO is accessed but is not marked as upToDate\r\n// by calling DO.setUpToDateData({ [propName]: true })\r\n// or DO.setUpToDateData({ nested: { [propName]: true } })\r\n// this is done automatically by data fetchers, smQuery and smSubscribe\r\nimport { FilterOperator } from './types';\r\n// so this error should only occur when data is accessed but was never queried or is not currently being subscribed to (is cached only)\r\nexport class NotUpToDateException extends Error {\r\n  public propName: string;\r\n\r\n  constructor(opts: { propName: string; nodeType: string; queryId: string }) {\r\n    super(\r\n      `NotUpToDate exception - The property \"${opts.propName}\" on the DO for the node type ${opts.nodeType} was read but is not guaranteed to be up to date. Add that property to the query with the id ${opts.queryId}`\r\n    );\r\n    this.propName = opts.propName;\r\n  }\r\n}\r\n\r\nexport class NotUpToDateInComputedException extends Error {\r\n  constructor(opts: {\r\n    computedPropName: string;\r\n    propName: string;\r\n    nodeType: string;\r\n    queryId: string;\r\n  }) {\r\n    super(\r\n      `NotUpToDateInComputed exception - The property \"${opts.propName}\" on the DO for the node type \"${opts.nodeType}\" was read for the computed property \"${opts.computedPropName}\" but is not guaranteed to be up to date. Add that property to the query with the id ${opts.queryId}`\r\n    );\r\n  }\r\n}\r\n\r\nexport class FilterPropertyNotDefinedInQueryException extends Error {\r\n  constructor(opts: { filterPropName: string }) {\r\n    super(\r\n      `FilterPropertyNotDefinedInQueryException exception - The filter property '${opts.filterPropName}' is not defined in the 'map' function of the queryDefinition. Add that property to the queryDefinition 'map' function.`\r\n    );\r\n  }\r\n}\r\nexport class SortPropertyNotDefinedInQueryException extends Error {\r\n  constructor(opts: { sortPropName: string }) {\r\n    super(\r\n      `SortPropertyNotDefinedInQueryException exception - The sort property '${opts.sortPropName}' is not defined in the 'map' function of the queryDefinition. Add that property to the queryDefinition 'map' function.`\r\n    );\r\n  }\r\n}\r\nexport class ImpliedNodePropertyException extends Error {\r\n  constructor(opts: { propName: string }) {\r\n    super(\r\n      `ImpliedPropertyException exception - The property \"${opts.propName}\" is implied and cannot be customized within a node definition.`\r\n    );\r\n  }\r\n}\r\n\r\nexport class NotCachedException extends Error {\r\n  constructor(opts: { nodeType: string; id: string }) {\r\n    super(\r\n      `NotCached exception - Attempted to get the node with the type \"${opts.nodeType}\" and id \"${opts.id}\" but it was not cached.`\r\n    );\r\n  }\r\n}\r\nexport class NodesCollectionPageOutOfBoundsException extends Error {\r\n  constructor(opts: { page: number }) {\r\n    super(\r\n      `NodesCollectionPageOutOfBoundsException - page '${opts.page}' does not exist.`\r\n    );\r\n  }\r\n}\r\n\r\nexport class DataTypeException extends Error {\r\n  constructor(opts: { dataType: string; value: any }) {\r\n    super(\r\n      `DataType exception - the data type ${opts.dataType} received a bad value. Value: \"${opts.value}\"`\r\n    );\r\n  }\r\n}\r\n\r\nexport class DataTypeExplicitDefaultException extends Error {\r\n  constructor(opts: { dataType: string }) {\r\n    super(\r\n      `DataTypeExplicitDefaultException - the data type ${opts.dataType} requires setting an explicit default value for non-optional properties`\r\n    );\r\n  }\r\n}\r\n\r\nexport class DataParsingException extends Error {\r\n  constructor(opts: { receivedData: any; message: string }) {\r\n    super(\r\n      `DataParsing exception - ${opts.message}\\nData: ${JSON.stringify(\r\n        opts.receivedData,\r\n        null,\r\n        2\r\n      )}.`\r\n    );\r\n  }\r\n}\r\n\r\nexport class UnexpectedSubscriptionMessageException extends Error {\r\n  public exception: {\r\n    subscriptionMessage: Record<string, any>;\r\n    description: string;\r\n  };\r\n\r\n  constructor(exception: {\r\n    subscriptionMessage: Record<string, any>;\r\n    description: string;\r\n  }) {\r\n    super(\r\n      `UnexpectedSubscriptionMessage exception - unexpected subscription message received`\r\n    );\r\n    this.exception = exception;\r\n  }\r\n}\r\n\r\nexport class UnexpectedQueryResultException extends Error {\r\n  public exception: {\r\n    queryRecord: Record<string, any>;\r\n    resultData: Record<string, any>;\r\n  };\r\n\r\n  constructor(exception: {\r\n    queryRecord: Record<string, any>;\r\n    resultData: Record<string, any>;\r\n  }) {\r\n    super(`UnexpectedQueryResult exception - unexpected query result received`);\r\n    this.exception = exception;\r\n  }\r\n}\r\n\r\nexport class FilterOperatorNotImplementedException extends Error {\r\n  constructor(exeption: { operator: FilterOperator }) {\r\n    super(\r\n      `FilterOperatorNotImplementedException - '${exeption.operator}' operator not implemented.`\r\n    );\r\n  }\r\n}\r\n\r\nexport function throwLocallyLogInProd(error: Error) {\r\n  if (process?.env?.NODE_ENV !== 'production') {\r\n    throw error;\r\n  } else {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n// http://ideasintosoftware.com/exhaustive-switch-in-typescript/\r\nexport class UnreachableCaseError extends Error {\r\n  constructor(val: never) {\r\n    super(\r\n      `Unreachable case: ${\r\n        typeof val === 'object' ? JSON.stringify(val, null, 2) : val\r\n      }`\r\n    );\r\n  }\r\n}\r\n","import {\r\n  DataTypeException,\r\n  DataTypeExplicitDefaultException,\r\n  throwLocallyLogInProd,\r\n} from './exceptions';\r\nimport {\r\n  GetResultingDataTypeFromProperties,\r\n  GetDataType,\r\n  IOneToOneQueryBuilder,\r\n  IOneToOneQueryBuilderOpts,\r\n  IOneToManyQueryBuilder,\r\n  IOneToManyQueryBuilderOpts,\r\n  IData,\r\n  INode,\r\n  MapFnForNode,\r\n  Maybe,\r\n  QueryDefinitionTarget,\r\n  DataDefaultFn,\r\n  DATA_TYPES,\r\n  RELATIONAL_TYPES,\r\n  UseSubscriptionQueryDefinitionOpts,\r\n  UseSubscriptionQueryDefinition,\r\n  ValidFilterForNode,\r\n  ValidSortForNode,\r\n} from './types';\r\n\r\nexport class Data<\r\n  TDataArgs extends {\r\n    TParsedValue: any;\r\n    TValue: any;\r\n    TBoxedValue:\r\n      | IData\r\n      | DataDefaultFn\r\n      | Record<string, IData | DataDefaultFn>\r\n      | undefined;\r\n  }\r\n> implements IData<TDataArgs> {\r\n  type: DATA_TYPES;\r\n  parser: (value: TDataArgs['TValue']) => TDataArgs['TParsedValue'];\r\n  boxedValue: TDataArgs['TBoxedValue'];\r\n  defaultValue: Maybe<TDataArgs['TParsedValue']>;\r\n  isOptional: boolean;\r\n  acceptableValues?: Array<TDataArgs['TParsedValue']>;\r\n\r\n  constructor(opts: {\r\n    type: DATA_TYPES;\r\n    parser: (value: TDataArgs['TValue']) => TDataArgs['TParsedValue'];\r\n    boxedValue?: TDataArgs['TBoxedValue'];\r\n    defaultValue?: TDataArgs['TParsedValue'];\r\n    isOptional: boolean;\r\n    acceptableValues?: Array<TDataArgs['TParsedValue']>;\r\n  }) {\r\n    this.type = opts.type;\r\n    this.parser = opts.parser;\r\n    this.boxedValue = opts.boxedValue as TDataArgs['TBoxedValue'];\r\n    this.defaultValue = opts.defaultValue ?? null;\r\n    this.isOptional = opts.isOptional;\r\n    this.acceptableValues = opts.acceptableValues;\r\n  }\r\n}\r\n\r\n/**\r\n * data serve 2 purposes:\r\n * 1) they convert strings from the backend into their real types (objects, strings, numbers, booleans)\r\n * 2) they serve as a way for TS to infer the data type of the node based on the data types used,\r\n */\r\nexport const string = (\r\n  defaultValue: string\r\n): IData<{ TValue: string; TParsedValue: string; TBoxedValue: undefined }> =>\r\n  // TStringType, TStringType,  undefined}\r\n  new Data<{ TValue: string; TParsedValue: string; TBoxedValue: undefined }>({\r\n    type: DATA_TYPES.string,\r\n    parser: value => (value != null ? String(value) : value),\r\n    defaultValue,\r\n    isOptional: false,\r\n  });\r\n\r\nstring._default = string('');\r\n\r\nstring.optional = new Data<{\r\n  TValue: Maybe<string>;\r\n  TParsedValue: Maybe<string>;\r\n  TBoxedValue: undefined;\r\n}>({\r\n  type: DATA_TYPES.maybeString,\r\n  parser: value => (value != null ? String(value) : value),\r\n  isOptional: true,\r\n}) as IData<{\r\n  TValue: Maybe<string>;\r\n  TParsedValue: Maybe<string>;\r\n  TBoxedValue: undefined;\r\n}>;\r\n\r\nexport const stringEnum = <\r\n  TEnumEntry extends string,\r\n  TEnumType extends Array<TEnumEntry> = Array<TEnumEntry>\r\n>(\r\n  enumValues: TEnumType\r\n) => {\r\n  const dataType: IData<{\r\n    TValue: TEnumType[number];\r\n    TParsedValue: TEnumType[number];\r\n    TBoxedValue: undefined;\r\n  }> = new Data<{\r\n    TValue: TEnumType[number];\r\n    TParsedValue: TEnumType[number];\r\n    TBoxedValue: undefined;\r\n  }>({\r\n    type: DATA_TYPES.stringEnum,\r\n    parser: value =>\r\n      value != null\r\n        ? ((String(value) as unknown) as TEnumType[number])\r\n        : (value as TEnumType[number]),\r\n    defaultValue: enumValues[0],\r\n    isOptional: false,\r\n    acceptableValues: enumValues,\r\n  });\r\n\r\n  return dataType;\r\n};\r\n\r\nstringEnum.optional = <\r\n  TEnumEntry extends string,\r\n  TEnumType extends Array<TEnumEntry> = Array<TEnumEntry>\r\n>(\r\n  enumValues: TEnumType\r\n) => {\r\n  const dataType: IData<{\r\n    TValue: Maybe<TEnumType[number]>;\r\n    TParsedValue: Maybe<TEnumType[number]>;\r\n    TBoxedValue: undefined;\r\n  }> = new Data<{\r\n    TValue: Maybe<TEnumType[number]>;\r\n    TParsedValue: Maybe<TEnumType[number]>;\r\n    TBoxedValue: undefined;\r\n  }>({\r\n    type: DATA_TYPES.maybeStringEnum,\r\n    parser: value =>\r\n      value != null ? (String(value) as TEnumType[number]) : null,\r\n    defaultValue: enumValues[0],\r\n    isOptional: true,\r\n    acceptableValues: enumValues,\r\n  });\r\n\r\n  return dataType;\r\n};\r\n\r\nexport const number = (\r\n  defaultValue: number\r\n): IData<{ TValue: string; TParsedValue: number; TBoxedValue: undefined }> =>\r\n  new Data<{ TValue: string; TParsedValue: number; TBoxedValue: undefined }>({\r\n    type: DATA_TYPES.number,\r\n    parser: value => {\r\n      const parsed = Number(value);\r\n\r\n      if (isNaN(parsed)) {\r\n        throwLocallyLogInProd(\r\n          new DataTypeException({\r\n            dataType: DATA_TYPES.number,\r\n            value,\r\n          })\r\n        );\r\n        return number._default.defaultValue as number;\r\n      }\r\n\r\n      return parsed;\r\n    },\r\n    defaultValue,\r\n    isOptional: false,\r\n  });\r\n\r\nnumber._default = number(0);\r\n\r\nnumber.optional = new Data<{\r\n  TValue: Maybe<string>;\r\n  TParsedValue: Maybe<number>;\r\n  TBoxedValue: undefined;\r\n}>({\r\n  type: DATA_TYPES.maybeNumber,\r\n  parser: value => {\r\n    if (value != null) {\r\n      return Number(value);\r\n    }\r\n    return value;\r\n  },\r\n  isOptional: true,\r\n}) as IData<{\r\n  TValue: Maybe<string>;\r\n  TParsedValue: Maybe<number>;\r\n  TBoxedValue: undefined;\r\n}>;\r\n\r\nexport const boolean = <TDefaultValue extends boolean>(\r\n  defaultValue?: TDefaultValue\r\n) => {\r\n  if (defaultValue === undefined) {\r\n    return (new DataTypeExplicitDefaultException({\r\n      dataType: DATA_TYPES.boolean,\r\n    }) as unknown) as IData<{\r\n      TValue: string | boolean;\r\n      TParsedValue: boolean;\r\n      TBoxedValue: undefined;\r\n    }>;\r\n  }\r\n\r\n  return new Data<{\r\n    TValue: string | boolean;\r\n    TParsedValue: boolean;\r\n    TBoxedValue: undefined;\r\n  }>({\r\n    type: DATA_TYPES.boolean,\r\n    parser: value => {\r\n      if (value === 'true' || value === true) {\r\n        return true;\r\n      } else if (value === 'false' || value === false) {\r\n        return false;\r\n      } else {\r\n        throw new DataTypeException({\r\n          dataType: DATA_TYPES.boolean,\r\n          value: value,\r\n        });\r\n      }\r\n    },\r\n    defaultValue,\r\n    isOptional: false,\r\n  }) as TDefaultValue extends undefined\r\n    ? Error\r\n    : IData<{\r\n        TValue: string | boolean;\r\n        TParsedValue: boolean;\r\n        TBoxedValue: undefined;\r\n      }>;\r\n};\r\n// need this in order to trigger an error when a user doesn't provide a default\r\nboolean._default = boolean();\r\n\r\nboolean.optional = new Data<{\r\n  TValue: Maybe<string | boolean>;\r\n  TParsedValue: Maybe<boolean>;\r\n  TBoxedValue: undefined;\r\n}>({\r\n  type: DATA_TYPES.maybeBoolean,\r\n  parser: value => {\r\n    if (value == null) return value;\r\n\r\n    if (value === 'true' || value === true) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  isOptional: true,\r\n}) as IData<{\r\n  TValue: Maybe<string | boolean>;\r\n  TParsedValue: Maybe<boolean>;\r\n  TBoxedValue: undefined;\r\n}>;\r\n\r\ntype ObjectDataType = {\r\n  <TBoxedValue extends Record<string, IData | DataDefaultFn>>(\r\n    boxedValue: TBoxedValue\r\n  ): IData<{\r\n    TValue: GetResultingDataTypeFromProperties<TBoxedValue>;\r\n    TParsedValue: GetResultingDataTypeFromProperties<TBoxedValue>;\r\n    TBoxedValue: TBoxedValue;\r\n  }>;\r\n  _default: any;\r\n  optional: <TBoxedValue extends Record<string, IData | DataDefaultFn>>(\r\n    boxedValue: TBoxedValue\r\n  ) => IData<{\r\n    TValue: Maybe<GetResultingDataTypeFromProperties<TBoxedValue>>;\r\n    TParsedValue: Maybe<GetResultingDataTypeFromProperties<TBoxedValue>>;\r\n    TBoxedValue: TBoxedValue;\r\n  }>;\r\n};\r\n\r\nexport const object: ObjectDataType = <\r\n  TBoxedValue extends Record<string, IData | DataDefaultFn>\r\n>(\r\n  boxedValue: TBoxedValue\r\n) =>\r\n  new Data({\r\n    type: DATA_TYPES.object,\r\n    /**\r\n     * Doesn't need to do any parsing on the data to convert strings to their real types\r\n     * That's done by the DO class's \"objectDataSetter\" method\r\n     */\r\n    parser: val => val,\r\n    boxedValue,\r\n    isOptional: false,\r\n  }) as IData<{\r\n    TValue: GetResultingDataTypeFromProperties<TBoxedValue>;\r\n    TParsedValue: GetResultingDataTypeFromProperties<TBoxedValue>;\r\n    TBoxedValue: TBoxedValue;\r\n  }>;\r\n\r\nobject._default = null;\r\n\r\nobject.optional = <TBoxedValue extends Record<string, IData | DataDefaultFn>>(\r\n  boxedValue: TBoxedValue\r\n): IData<{\r\n  TValue: GetResultingDataTypeFromProperties<TBoxedValue>;\r\n  TParsedValue: GetResultingDataTypeFromProperties<TBoxedValue>;\r\n  TBoxedValue: TBoxedValue;\r\n}> =>\r\n  new Data({\r\n    type: DATA_TYPES.maybeObject,\r\n    /**\r\n     * Doesn't need to do any parsing on the data to convert strings to their real types\r\n     * That's done by the DO class's \"objectDataSetter\" method\r\n     */\r\n    parser: val => val,\r\n    boxedValue,\r\n    isOptional: true,\r\n  }) as IData<{\r\n    TValue: GetResultingDataTypeFromProperties<TBoxedValue>;\r\n    TParsedValue: GetResultingDataTypeFromProperties<TBoxedValue>;\r\n    TBoxedValue: TBoxedValue;\r\n  }>;\r\n\r\nexport const record = <\r\n  TKey extends string,\r\n  TBoxedValue extends IData | DataDefaultFn\r\n>(\r\n  boxedValue: TBoxedValue\r\n) => {\r\n  const parsedBoxedValue: TBoxedValue =\r\n    // will be a function if no explicit default set\r\n    typeof boxedValue === 'function'\r\n      ? ((boxedValue as any)._default as TBoxedValue)\r\n      : (boxedValue as TBoxedValue);\r\n\r\n  return new Data<{\r\n    TValue: Record<TKey, GetDataType<typeof parsedBoxedValue>>;\r\n    TParsedValue: Record<TKey, GetDataType<typeof parsedBoxedValue>>;\r\n    TBoxedValue: TBoxedValue;\r\n  }>({\r\n    type: DATA_TYPES.record,\r\n    parser: val => val,\r\n    boxedValue: boxedValue as typeof parsedBoxedValue,\r\n    isOptional: false,\r\n    defaultValue: {} as Record<string, any>,\r\n  }) as IData<{\r\n    TValue: Record<TKey, GetDataType<typeof parsedBoxedValue>>;\r\n    TParsedValue: Record<TKey, GetDataType<typeof parsedBoxedValue>>;\r\n    TBoxedValue: TBoxedValue;\r\n  }>;\r\n};\r\n\r\nrecord.optional = <TBoxedValue extends IData | DataDefaultFn>(\r\n  boxedValue: TBoxedValue\r\n) => {\r\n  const parsedBoxedValue: IData =\r\n    // will be a function if no explicit default set\r\n    typeof boxedValue === 'function'\r\n      ? ((boxedValue as any)._default as IData)\r\n      : (boxedValue as IData);\r\n\r\n  return new Data<{\r\n    TValue: Maybe<Record<string, GetDataType<typeof parsedBoxedValue>>>;\r\n    TParsedValue: Maybe<Record<string, GetDataType<typeof parsedBoxedValue>>>;\r\n    TBoxedValue: typeof parsedBoxedValue;\r\n  }>({\r\n    type: DATA_TYPES.maybeRecord,\r\n    parser: val => val,\r\n    boxedValue: parsedBoxedValue,\r\n    isOptional: true,\r\n    defaultValue: null,\r\n  }) as IData<{\r\n    TValue: Maybe<Record<string, GetDataType<typeof parsedBoxedValue>>>;\r\n    TParsedValue: Maybe<Record<string, GetDataType<typeof parsedBoxedValue>>>;\r\n    TBoxedValue: typeof parsedBoxedValue;\r\n  }>;\r\n};\r\n\r\nrecord._default = null as any;\r\n\r\nexport const array = <TBoxedValue extends IData | DataDefaultFn>(\r\n  boxedValue: TBoxedValue\r\n) => {\r\n  const parsedBoxedValue: TBoxedValue =\r\n    // will be a function if no explicit default set\r\n    typeof boxedValue === 'function'\r\n      ? ((boxedValue as any)._default as TBoxedValue)\r\n      : (boxedValue as TBoxedValue);\r\n\r\n  function array(defaultValue: Array<GetDataType<TBoxedValue>>) {\r\n    return new Data<{\r\n      TValue: Array<GetDataType<TBoxedValue>>;\r\n      TParsedValue: Array<GetDataType<TBoxedValue>>;\r\n      TBoxedValue: TBoxedValue;\r\n    }>({\r\n      type: DATA_TYPES.array,\r\n      parser: value => value,\r\n      boxedValue: parsedBoxedValue,\r\n      defaultValue,\r\n      isOptional: false,\r\n    }) as IData<{\r\n      TValue: Array<GetDataType<TBoxedValue>>;\r\n      TParsedValue: Array<GetDataType<TBoxedValue>>;\r\n      TBoxedValue: TBoxedValue;\r\n    }>;\r\n  }\r\n\r\n  array.optional = new Data<{\r\n    TValue: Maybe<Array<GetDataType<TBoxedValue>>>;\r\n    TParsedValue: Maybe<Array<GetDataType<TBoxedValue>>>;\r\n    TBoxedValue: TBoxedValue;\r\n  }>({\r\n    type: DATA_TYPES.maybeArray,\r\n    parser: value => value,\r\n    boxedValue: parsedBoxedValue,\r\n    isOptional: true,\r\n  }) as IData<{\r\n    TValue: Maybe<Array<GetDataType<TBoxedValue>>>;\r\n    TParsedValue: Maybe<Array<GetDataType<TBoxedValue>>>;\r\n    TBoxedValue: TBoxedValue;\r\n  }>;\r\n\r\n  array._default = array([]);\r\n\r\n  return array;\r\n};\r\n\r\nexport const oneToOne = <\r\n  TTargetNodeOrTargetNodeRecord extends\r\n    | INode\r\n    | Maybe<INode>\r\n    | Record<string, INode>\r\n    | Maybe<Record<string, INode>>\r\n>(\r\n  def: NonNullable<TTargetNodeOrTargetNodeRecord>\r\n) => {\r\n  return (<\r\n    TQueryBuilderOpts extends IOneToOneQueryBuilderOpts<\r\n      TTargetNodeOrTargetNodeRecord\r\n    > & { _relationshipName: string }\r\n  >(\r\n    queryBuilderOpts: TQueryBuilderOpts\r\n  ) => {\r\n    return {\r\n      def,\r\n      _relationshipName: queryBuilderOpts._relationshipName,\r\n      _relational: RELATIONAL_TYPES.oneToOne,\r\n      queryBuilderOpts,\r\n    };\r\n  }) as IOneToOneQueryBuilder<TTargetNodeOrTargetNodeRecord>;\r\n};\r\n\r\nexport const oneToMany = <\r\n  TTargetNodeOrTargetNodeRecord extends\r\n    | INode\r\n    | Maybe<INode>\r\n    | Record<string, INode>\r\n    | Maybe<Record<string, INode>>\r\n>(\r\n  def: NonNullable<TTargetNodeOrTargetNodeRecord>\r\n) => {\r\n  return (<\r\n    TQueryBuilderOpts extends IOneToManyQueryBuilderOpts<\r\n      TTargetNodeOrTargetNodeRecord\r\n    > & {\r\n      _relationshipName: string;\r\n      filter?: ValidFilterForNode<INode>;\r\n      sort?: ValidSortForNode<INode>;\r\n    }\r\n  >(\r\n    queryBuilderOpts: TQueryBuilderOpts\r\n  ) => {\r\n    return {\r\n      def,\r\n      _relationshipName: queryBuilderOpts._relationshipName,\r\n      _relational: RELATIONAL_TYPES.oneToMany,\r\n      filter: queryBuilderOpts.filter,\r\n      queryBuilderOpts,\r\n    };\r\n  }) as IOneToManyQueryBuilder<TTargetNodeOrTargetNodeRecord>;\r\n};\r\n\r\nexport const OBJECT_PROPERTY_SEPARATOR = '__dot__';\r\n\r\nexport const OBJECT_IDENTIFIER = '__object__';\r\n\r\n// HACK ALERT! Exists only to make TS work the way we need it\r\n// It makes it possible to accept multiple node types within a record of query definitions, without losing type safety\r\n// See this for a simplified example https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABBBwYHMA8ARAhlXAFQE8AHAUwD4AKFMNdALkQHkBbGKTASQGUYw6ADbkAwqgw58RMlQA0iAOQB9ZTADOJCr1zByAVXXlCACzET0AMXDR4YAIT3FlAJTM+A4efqS8BLVSIAN4AUIiIAE7kUCARSEEAdEl0DHIqapqyOnqGxmbiPlY2sAiOisxQESDkiAC+IfUhAlDkEcC4EDXchHAAJnB+uMFhiDC9zOqVniME6gDWE1OCDSEhdJOIUH0D0u49-YOIALzBo+NKAIwATADMigqzC0r9m2aIveTkvYp1q1CyiAAitUIsRLGApP5ZJRjohqL1dohBgEXMcYQAFXARWC4ISQmQUSirZqtdqdRAeQQiAoMfEBGGhcLhdIaALZAxGUzeBjWSAlBxOCpVchyEbhBEEZjI2SipmIACOIOIzGBrTBEOlhJWTTALTaHS6AFkQEJYDSMMNwgBtObkZWISYRTwAXXc-Cp3MkuDAxCJjXWUEQbGIADk+uRBu5jaaYOb0LDGYgQEYIpptupmInxYitgdpLKmYq1cxqEEzg9cPM6qijjDS+XNpW5tWRrUC7ihPs4BnkBZS2L3jntoMC+Ei6CS2WxhWq7Ua3Wp70Z82562XCsgA\r\nexport function queryDefinition<\r\n  TNode extends INode,\r\n  TMapFn extends MapFnForNode<TNode> | undefined,\r\n  TQueryDefinitionTarget extends QueryDefinitionTarget,\r\n  TUseSubscriptionQueryDefinitionOpts extends UseSubscriptionQueryDefinitionOpts\r\n>(\r\n  queryDefinition: UseSubscriptionQueryDefinition<{\r\n    TNode: TNode;\r\n    TMapFn: TMapFn;\r\n    TQueryDefinitionTarget: TQueryDefinitionTarget;\r\n    TUseSubscriptionQueryDefinitionOpts: TUseSubscriptionQueryDefinitionOpts;\r\n  }>\r\n) {\r\n  return queryDefinition;\r\n}\r\n","import { string, number } from './dataTypes';\r\nimport { FilterOperator } from './types';\r\n\r\n// These are the properties that are essential for mm-gql to function and are queried automatically with each query.\r\nexport const PROPERTIES_QUERIED_FOR_ALL_NODES = {\r\n  id: string,\r\n  version: number,\r\n  lastUpdatedBy: string,\r\n  type: string,\r\n};\r\n\r\nexport const RELATIONAL_UNION_QUERY_SEPARATOR = '__rU__';\r\n\r\nexport const DEFAULT_TOKEN_NAME = 'default';\r\n\r\n// These properties are ensuring that every node definition built with mmGQL.def now has these properties auto added to their data.\r\n// They are not queried automatically and must be explicitly defined on the node definition, unless they also appear on PROPERTIES_QUERIED_FOR_ALL_NODES.\r\nconst {\r\n  type,\r\n  ...PROPERTIES_QUERIED_FOR_ALL_NODES_MINUS_TYPE\r\n} = PROPERTIES_QUERIED_FOR_ALL_NODES;\r\n// adding \"type\" to the default node properties causes it to be mocked by the mock data generator which is not desirable\r\nexport const DEFAULT_NODE_PROPERTIES = {\r\n  ...PROPERTIES_QUERIED_FOR_ALL_NODES_MINUS_TYPE,\r\n  dateCreated: number,\r\n  dateLastModified: number,\r\n  lastUpdatedClientTimestamp: number,\r\n};\r\n\r\nconst FILTER_OPERATORS_MAP: Record<FilterOperator, FilterOperator> = {\r\n  _gte: '_gte',\r\n  _lte: '_lte',\r\n  _eq: '_eq',\r\n  _gt: '_gt',\r\n  _lt: '_lt',\r\n  _neq: '_neq',\r\n  _contains: '_contains',\r\n  _ncontains: '_ncontains',\r\n};\r\n\r\nexport const FILTER_OPERATORS: Array<FilterOperator> = Object.values(\r\n  FILTER_OPERATORS_MAP\r\n);\r\n\r\nexport const NODES_PROPERTY_KEY = 'nodes';\r\n","export const JSON_TAG = '__JSON__';\r\nexport const NULL_TAG = '__NULL__';\r\n\r\nexport function parseJSONFromBE(jsonString: string) {\r\n  if (!jsonString.startsWith(JSON_TAG)) {\r\n    throw Error(`parseJSONFromBE - invalid json received:\\n${jsonString}`);\r\n  }\r\n\r\n  // convert string array into js array\r\n  if (jsonString.startsWith(`${JSON_TAG}[`)) {\r\n    return JSON.parse(jsonString.replace('__JSON__', ''));\r\n  }\r\n\r\n  // Allow new line text (\\n to \\\\n)\r\n  // replacing prevents JSON.parse to complaining\r\n  return JSON.parse(jsonString.replace(JSON_TAG, '').replace(/\\n/g, '\\\\n'));\r\n}\r\n\r\nexport function prepareValueForFE(value: any): any {\r\n  if (value === NULL_TAG) {\r\n    return null;\r\n  } else if (value === 'true' || value === 'false') {\r\n    return value === 'true';\r\n  } else if (typeof value === 'string' && value.startsWith(JSON_TAG)) {\r\n    return parseJSONFromBE(value);\r\n  } else if (Array.isArray(value)) {\r\n    return value.map(entry => {\r\n      if (typeof entry === 'object') {\r\n        return prepareValueForFE(entry);\r\n      } else {\r\n        return entry;\r\n      }\r\n    });\r\n  } else if (value != null && typeof value === 'object') {\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    return prepareForFE(value);\r\n  } else {\r\n    return value;\r\n  }\r\n}\r\n\r\nexport function prepareForFE(beData: Record<string, any>) {\r\n  return Object.keys(beData).reduce((prepared, key) => {\r\n    const value = beData[key];\r\n    return {\r\n      ...prepared,\r\n      [key]: prepareValueForFE(value),\r\n    };\r\n  }, {} as Record<string, any>);\r\n}\r\n","import { deepClone } from './dataUtilities';\r\nimport { Maybe, NodeDO } from './types';\r\n\r\n/**\r\n * This class is responsible for handling all logic pertaining optimistic updates.\r\n *\r\n * It works by intercepting all incoming messages about nodes that the user queries or is subscribed to\r\n * Then, it also intercepts requests to updateNode and updateNodes within a transaction\r\n *\r\n * It optimistically updates the state at the DO level, while also keeping track of known persisted states\r\n * (the ones that derived from messages received by the node repository)\r\n *\r\n * You might wonder, why keep track of all persisted states, rather than just the persisted state at the time of the last update request?\r\n *\r\n * I'll answer that with a question:\r\n * If we call updateNode/updateNodes several times with the same node id, and get a message about a version older than the last update, how do we deal with that?\r\n *   We could ignore it, since it will likely be overwritten by the update in flight, but this seems risky because we can't assume that the update will be successful. Ignoring that incoming update could lead to stale states if the request does fail.\r\n *   We could also apply it, since we know it's data that's been persisted in SM. This would likely lead to UX feeling janky. For example, if a user is typing into an input and we're sending debounced updates to SM\r\n *      and with each update optimistically updating our in memory cache (the DO), but also applying incoming persisted states, the value being displayed for that field would change erratically.\r\n *\r\n * I believe a fix for this is to keep applying only optimistic updates to in memory cache if there is any in flight request, while keeping track of all received persisted states\r\n * We short circuit the repository's onDataReceived so it no longer updates the DO, if any updates are in flight. Instead, it only tells the OptimisticUpdatesOrchestrator that there is a new persisted state.\r\n * If a single update request fails, and there are no other updates in flight, revert to the last persisted state. Decrease number of in flight requests.\r\n * If an update request in a group of update requests fails, and there are other updates in flight to SM, decrease number of in flight requests. Don't revert to last persisted state, since this would cause the erratic behavior described above.\r\n * If an update request succeeds (solo or in a group), simply decrease number of in flight requests.\r\n *\r\n * Once the number of in flight requests reaches 0, the repository would no longer get short circuited.\r\n *\r\n * Then, we can decide how to update the state on the DO, by leaving it at the newest optimistic update state\r\n *\r\n * We would stop capturing persisted data in OptimisticUpdatesOrchestrator for this particular node (which we identify by its id),\r\n * and delete any persisted data for that node that is currently cached in the OptimisticUpdatesOrchestrator to avoid memory leaks.\r\n */\r\nexport class OptimisticUpdatesOrchestrator {\r\n  private DOsById: Record<string, NodeDO> = {};\r\n  private lastKnownPersistedDataById: Record<string, Record<string, any>> = {};\r\n  private inFlightRequestsById: Record<\r\n    string,\r\n    Array<{ rollbackState: Record<string, any> }>\r\n  > = {};\r\n\r\n  public onDOConstructed = (DO: NodeDO) => {\r\n    if (!DO.id) throw Error('No id found in DO');\r\n    this.DOsById[DO.id] = DO;\r\n  };\r\n\r\n  public onDODeleted = (DO: NodeDO) => {\r\n    if (!DO.id) throw Error('No id found in DO');\r\n    delete this.DOsById[DO.id];\r\n    delete this.lastKnownPersistedDataById[DO.id];\r\n  };\r\n\r\n  public onPersistedDataReceived = (opts: {\r\n    data: { id: string; version: number; lastUpdatedBy: string } & Record<\r\n      string,\r\n      any\r\n    >;\r\n    applyUpdateToDO: () => void;\r\n  }) => {\r\n    const nodeId = opts.data.id;\r\n\r\n    // this is how we short circuit ths repository\r\n    // read comment above this class to understand why\r\n    if (this.inFlightRequestsById[nodeId]) {\r\n      this.lastKnownPersistedDataById[nodeId] = opts.data;\r\n    } else {\r\n      opts.applyUpdateToDO();\r\n    }\r\n  };\r\n\r\n  public onUpdateRequested = (update: {\r\n    id: string;\r\n    payload: Record<string, any>;\r\n  }) => {\r\n    const DO = this.getDOById(update.id);\r\n    // No DO found in cache means we're likely in a unit test, or possible the node was dropped right as the update was request\r\n    // Better to simply do nothing than to throw an error here.\r\n    if (!DO)\r\n      return {\r\n        onUpdateSuccessful: () => {},\r\n        onUpdateFailed: () => {},\r\n      };\r\n\r\n    const rollbackState = {\r\n      // persisted data gets extended on the node, so cloning it here so it doesn't get mutated by an incoming update\r\n      ...deepClone(DO.persistedData),\r\n      version: DO.version,\r\n      lastUpdatedBy: DO.lastUpdatedBy,\r\n    };\r\n\r\n    if (!this.inFlightRequestsById[update.id]) {\r\n      // before any in flight requests go out, we know that the persisted data on a DO is truly persisted\r\n      this.lastKnownPersistedDataById[update.id] = rollbackState;\r\n      this.inFlightRequestsById[update.id] = [{ rollbackState }];\r\n    } else {\r\n      // if requests are in flight, the \"persisted\" data on a DO may actually originate from an optimistic update\r\n      // this is simply to avoid introducing optimistic update logic in the DO class.\r\n      // in that case, the true persisted state will be intercepted from the repository by \"onPersistedDataReceived\" above\r\n      this.inFlightRequestsById[update.id].push({ rollbackState });\r\n    }\r\n\r\n    const updateIdx = this.inFlightRequestsById[update.id].length - 1;\r\n\r\n    const currentVersion = Number(DO.version);\r\n    const newVersion = currentVersion + 1;\r\n\r\n    DO.onDataReceived({ ...update.payload, version: newVersion });\r\n\r\n    return {\r\n      onUpdateFailed: () => {\r\n        this.handleUpdateFailed({ updateIdx, id: update.id });\r\n      },\r\n      onUpdateSuccessful: () => {\r\n        this.handleUpdateSuccessful({ updateIdx, id: update.id });\r\n      },\r\n    };\r\n  };\r\n\r\n  private handleUpdateFailed(opts: { updateIdx: number; id: string }) {\r\n    const inFlightRequestsForThisNode = this.inFlightRequestsById[opts.id];\r\n    const wasLastTriggeredUpdate =\r\n      inFlightRequestsForThisNode.length === opts.updateIdx + 1;\r\n    if (wasLastTriggeredUpdate) {\r\n      const DO = this.getDOById(opts.id);\r\n      if (!DO) return;\r\n      const hasPreviousInFlightUpdate = inFlightRequestsForThisNode.length > 1;\r\n      if (hasPreviousInFlightUpdate) {\r\n        const previousInFlightRollbackState =\r\n          inFlightRequestsForThisNode[inFlightRequestsForThisNode.length - 1]\r\n            .rollbackState;\r\n        DO.onDataReceived(previousInFlightRollbackState, {\r\n          // __unsafeIgnoreVersion should used by OptimisticUpdatesOrchestrator ONLY\r\n          // it allows setting the data on the DO to a version older than the last optimistic update\r\n          // so that we can revert on a failed request\r\n          __unsafeIgnoreVersion: true,\r\n        });\r\n      } else {\r\n        DO.onDataReceived(this.lastKnownPersistedDataById[opts.id], {\r\n          // __unsafeIgnoreVersion should used by OptimisticUpdatesOrchestrator ONLY\r\n          // it allows setting the data on the DO to a version older than the last optimistic update\r\n          // so that we can revert on a failed request\r\n          __unsafeIgnoreVersion: true,\r\n        });\r\n        inFlightRequestsForThisNode.splice(opts.updateIdx, 1);\r\n      }\r\n    }\r\n\r\n    inFlightRequestsForThisNode.splice(opts.updateIdx, 1);\r\n\r\n    this.cleanupIfNoInFlightRequests(opts.id);\r\n  }\r\n\r\n  private handleUpdateSuccessful(opts: { updateIdx: number; id: string }) {\r\n    const inFlightRequestsForThisNode = this.inFlightRequestsById[opts.id];\r\n    inFlightRequestsForThisNode.splice(opts.updateIdx, 1);\r\n    this.cleanupIfNoInFlightRequests(opts.id);\r\n  }\r\n\r\n  private getDOById(id: string): Maybe<NodeDO> {\r\n    const DO = this.DOsById[id];\r\n    return DO;\r\n  }\r\n\r\n  private cleanupIfNoInFlightRequests(id: string) {\r\n    if (!this.inFlightRequestsById[id].length) {\r\n      delete this.lastKnownPersistedDataById[id];\r\n      delete this.inFlightRequestsById[id];\r\n    }\r\n  }\r\n}\r\n","import { isArray, isObject } from 'lodash';\r\nimport { FILTER_OPERATORS } from './consts';\r\nimport {\r\n  FilterCondition,\r\n  EStringFilterOperator,\r\n  FilterValue,\r\n  INode,\r\n  SortObject,\r\n  ValidFilterForNode,\r\n  ValidSortForNode,\r\n} from './types';\r\n\r\n/**\r\n * Clones an object or array. Recurses into nested objects and arrays for deep clones.\r\n */\r\nexport function deepClone<T extends Record<string, any> | Array<any>>(\r\n  obj: T\r\n): T {\r\n  if (typeof obj !== 'object' || obj === null || obj === undefined) {\r\n    return obj; // return the value if obj is not an object\r\n  }\r\n\r\n  if (Array.isArray(obj)) {\r\n    const outputArray = ([] as unknown) as T;\r\n\r\n    obj.forEach((item: any) => outputArray.push(deepClone(item)));\r\n\r\n    return outputArray;\r\n  } else {\r\n    const outputObject = ({} as unknown) as T;\r\n    for (const key in obj) {\r\n      outputObject[key] = deepClone(obj[key]);\r\n    }\r\n\r\n    return outputObject;\r\n  }\r\n}\r\n\r\n// clear an object (and nested objects)\r\n// by deleting all of its props\r\nexport function clearObject(opts: { object: Record<string, any> }) {\r\n  Object.keys(opts.object).forEach(objectProp => {\r\n    if (typeof opts.object[objectProp] === 'object') {\r\n      clearObject({ object: opts.object[objectProp] });\r\n    } else {\r\n      delete opts.object[objectProp];\r\n    }\r\n  });\r\n}\r\n\r\n// extend an object by mutating its props in place\r\n// based on the values received in \"extension\"\r\nexport function extend(opts: {\r\n  object: Record<string, any>;\r\n  extension: Record<string, any>;\r\n  deleteKeysNotInExtension: boolean;\r\n  extendNestedObjects: boolean;\r\n}) {\r\n  const handledExtensionProps: Array<string> = [];\r\n\r\n  // first loop over every key in the object to extend and\r\n  // 1) if opts.deleteKeysNotInExtension, delete properties not in the extension object, whilst avoiding deleting nested objects within the object we're extending\r\n  //    - clear those objects by deleting all properties instead\r\n  // 2) copy properties that did get included in the extension value to the object being extended, whilst avoiding altering the reference to a nested object\r\n  //    - extend those nested objects by calling this function recursively instead\r\n  Object.keys(opts.object).forEach(objectProp => {\r\n    const extensionValue = opts.extension[objectProp];\r\n\r\n    if (extensionValue === undefined) {\r\n      if (!opts.deleteKeysNotInExtension) return;\r\n\r\n      if (\r\n        opts.object[objectProp] != null &&\r\n        typeof opts.object[objectProp] === 'object'\r\n      ) {\r\n        clearObject({ object: opts.object[objectProp] });\r\n      } else {\r\n        delete opts.object[objectProp];\r\n      }\r\n    } else {\r\n      handledExtensionProps.push(objectProp);\r\n\r\n      if (\r\n        extensionValue != null &&\r\n        typeof extensionValue === 'object' &&\r\n        !Array.isArray(extensionValue)\r\n      ) {\r\n        if (opts.extendNestedObjects) {\r\n          opts.object[objectProp] = opts.object[objectProp] || {};\r\n          extend({\r\n            object: opts.object[objectProp] || {},\r\n            extension: extensionValue,\r\n            deleteKeysNotInExtension: opts.deleteKeysNotInExtension,\r\n            extendNestedObjects: true,\r\n          });\r\n        } else {\r\n          opts.object[objectProp] = extensionValue;\r\n        }\r\n      } else {\r\n        opts.object[objectProp] = extensionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  // then loop over every key in the extension that hasn't yet been handled in the loop above\r\n  Object.keys(opts.extension)\r\n    .filter(key => !handledExtensionProps.includes(key))\r\n    .forEach(extensionProp => {\r\n      const extensionValue = opts.extension[extensionProp];\r\n\r\n      if (\r\n        extensionValue != null &&\r\n        typeof extensionValue === 'object' &&\r\n        !Array.isArray(extensionValue)\r\n      ) {\r\n        if (opts.extendNestedObjects) {\r\n          opts.object[extensionProp] = opts.object[extensionProp] || {};\r\n          extend({\r\n            object: opts.object[extensionProp],\r\n            extension: extensionValue,\r\n            deleteKeysNotInExtension: opts.deleteKeysNotInExtension,\r\n            extendNestedObjects: true,\r\n          });\r\n        } else {\r\n          opts.object[extensionProp] = extensionValue;\r\n        }\r\n      } else {\r\n        opts.object[extensionProp] = extensionValue;\r\n      }\r\n    });\r\n}\r\n\r\n/**\r\n * Returns all the keys of the object in a dot(.) separate format.\r\n *\r\n * Example.\r\n *\r\n * ```\r\n * getFlattenedObjectKeys({\r\n *  user: {\r\n *    firstName: 'John',\r\n *    lastName: 'Doe',\r\n *    meetings: [1,2,3],\r\n *    company: {\r\n *      name: 'Acme'\r\n *    }\r\n *  }\r\n * })\r\n * ```\r\n *\r\n * will return\r\n * ```\r\n * ['user.firstName', 'user.lastName', 'user.meetings', 'user.company.name']\r\n * ```\r\n *\r\n * Note: This won't flatten any array values\r\n *\r\n * @param obj - Object to flatten\r\n */\r\nexport function getFlattenedObjectKeys(obj: Record<string, any>) {\r\n  const valuesByKeyPath = [];\r\n  for (const prop in obj) {\r\n    if (!obj.hasOwnProperty(prop)) continue;\r\n\r\n    // Exclude array values to prevent returning keys with array indexes\r\n    if (isObject(obj[prop]) && !isArray(obj[prop]) && obj[prop] !== null) {\r\n      const flatObject: any = getFlattenedObjectKeys(obj[prop]);\r\n      for (let idx = 0; idx < flatObject.length; idx++) {\r\n        valuesByKeyPath.push(`${prop}.${flatObject[idx]}`);\r\n      }\r\n    } else {\r\n      valuesByKeyPath.push(prop);\r\n    }\r\n  }\r\n  return valuesByKeyPath;\r\n}\r\n\r\n/**\r\n * Returns flattened keys of the filter object\r\n *\r\n * ```\r\n * getFlattenedNodeFilterObject({\r\n *  settings: {\r\n *    time: {_lte: Date.now()},\r\n *    nested: {\r\n *      prop: {_contains: \"text\"}\r\n *    }\r\n *  },\r\n *  firstName: {_eq: 'John'}\r\n * })\r\n * ```\r\n *\r\n * Returns\r\n *\r\n * ```\r\n * {\r\n *  \"settings.time\": {_lte: Date.now()},\r\n *  \"settings.nested.prop\": {_contains: \"text\"},\r\n *  \"firstName\": {_eq: 'John'}\r\n * }\r\n * ```\r\n * @param filterObject : ;\r\n * @returns\r\n */\r\nexport function getFlattenedNodeFilterObject<TNode extends INode>(\r\n  filterObject: ValidFilterForNode<TNode>\r\n) {\r\n  const result: Record<\r\n    string,\r\n    Partial<Record<EStringFilterOperator, any>> & {\r\n      _condition: FilterCondition;\r\n    }\r\n  > = {};\r\n\r\n  const filterObject2 = filterObject as any;\r\n  for (const i in filterObject2) {\r\n    const value = filterObject2[i] as FilterValue<string>;\r\n    const valueIsNotAFilterCondition = FILTER_OPERATORS.every(\r\n      condition => isObject(value) && !value.hasOwnProperty(condition)\r\n    );\r\n    if (\r\n      typeof filterObject2[i] == 'object' &&\r\n      filterObject2[i] !== null &&\r\n      valueIsNotAFilterCondition\r\n    ) {\r\n      const flatObject = getFlattenedNodeFilterObject(\r\n        value as ValidFilterForNode<TNode>\r\n      );\r\n      for (const x in flatObject) {\r\n        if (!flatObject.hasOwnProperty(x)) continue;\r\n\r\n        result[i + '.' + x] = flatObject[x];\r\n      }\r\n    } else {\r\n      if (isObject(value)) {\r\n        result[i] = {\r\n          ...value,\r\n          _condition: value._condition || 'and',\r\n        };\r\n      } else if (value !== undefined) {\r\n        result[i] = {\r\n          [EStringFilterOperator.eq]: value,\r\n          _condition: 'and',\r\n        };\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function getFlattenedNodeSortObject<TNode extends INode>(\r\n  sorting: ValidSortForNode<TNode>\r\n) {\r\n  const result: Record<string, SortObject> = {};\r\n\r\n  for (const i in sorting) {\r\n    const sortObject = sorting as Record<string, any>;\r\n    const value = sortObject[i];\r\n    const valueIsNotASortObject =\r\n      isObject(value) && !Object.keys(value).includes('_direction');\r\n    if (\r\n      typeof sortObject[i] == 'object' &&\r\n      sortObject[i] !== null &&\r\n      valueIsNotASortObject\r\n    ) {\r\n      const flatObject = getFlattenedNodeSortObject(value);\r\n      for (const x in flatObject) {\r\n        if (!flatObject.hasOwnProperty(x)) continue;\r\n\r\n        result[i + '.' + x] = flatObject[x];\r\n      }\r\n    } else {\r\n      if (isObject(value)) {\r\n        result[i] = value as SortObject;\r\n      } else if (value !== undefined) {\r\n        const filter: SortObject = {\r\n          _direction: value,\r\n        };\r\n        result[i] = filter;\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import Chance from 'chance';\r\n\r\nconst chance = new Chance();\r\n\r\nexport function generateRandomString(): string {\r\n  return chance.word();\r\n}\r\n\r\nexport function generateRandomBoolean(): boolean {\r\n  return chance.bool();\r\n}\r\n\r\nexport function generateRandomNumber(min: number, max: number): number {\r\n  return chance.integer({ min, max });\r\n}\r\n\r\nexport { chance };\r\n","import { gql } from '@apollo/client/core';\r\nimport { OBJECT_PROPERTY_SEPARATOR } from './dataTypes';\r\nimport { UnexpectedSubscriptionMessageException } from './exceptions';\r\nimport {\r\n  NodeRelationalFns,\r\n  NodeRelationalQueryBuilderRecord,\r\n  MapFn,\r\n  IData,\r\n  NodeRelationalQuery,\r\n  INode,\r\n  NodeComputedFns,\r\n  RelationalQueryRecordEntry,\r\n  QueryDefinitions,\r\n  QueryRecord,\r\n  QueryRecordEntry,\r\n  ValidFilterForNode,\r\n  DATA_TYPES,\r\n  RELATIONAL_TYPES,\r\n  QueryDefinition,\r\n  DataDefaultFn,\r\n  IOneToOneQueryBuilderOpts,\r\n  EStringFilterOperator,\r\n  FilterCondition,\r\n  ENumberFilterOperator,\r\n} from './types';\r\nimport {\r\n  PROPERTIES_QUERIED_FOR_ALL_NODES,\r\n  RELATIONAL_UNION_QUERY_SEPARATOR,\r\n} from './consts';\r\n\r\n/**\r\n * The functions in this file are responsible for translating queryDefinitionss to gql documents\r\n * only function that should be needed outside this file is convertQueryDefinitionToQueryInfo\r\n * other fns are exported for testing purposes only\r\n */\r\n\r\n/**\r\n * Relational fns are specified when creating a node as fns that return a NodeRelationalQueryBuilder\r\n * so they can be evaluated lazily to avoid dependency loops between nodes related to each other.\r\n *\r\n * This fn executs those fns at query time, and returns a record of relational query builders\r\n */\r\nfunction getRelationalQueryBuildersFromRelationalFns(\r\n  relationaFns?: NodeRelationalFns<any>\r\n) {\r\n  if (!relationaFns) return {};\r\n\r\n  return Object.keys(relationaFns).reduce((acc, relationshipName) => {\r\n    const relationalQueryBuilder = relationaFns[relationshipName]();\r\n    acc[relationshipName] = (opts: Record<string, any>) => ({\r\n      ...relationalQueryBuilder(opts),\r\n      _relationshipName: relationshipName,\r\n    });\r\n\r\n    return acc;\r\n  }, {} as NodeRelationalQueryBuilderRecord);\r\n}\r\n\r\nfunction getMapFnReturn(opts: {\r\n  mapFn: MapFn<any>;\r\n  properties: Record<string, IData>;\r\n  relational?: NodeRelationalFns<any>;\r\n}) {\r\n  const mapFnOpts: Record<string, any> = {\r\n    ...opts.properties,\r\n    ...getRelationalQueryBuildersFromRelationalFns(opts.relational),\r\n  };\r\n\r\n  Object.keys(opts.properties).forEach(key => {\r\n    const data = opts.properties[key] as IData;\r\n\r\n    if (\r\n      data.type === DATA_TYPES.object ||\r\n      data.type === DATA_TYPES.maybeObject\r\n    ) {\r\n      mapFnOpts[key] = (opts: { map: MapFn<any> }) => opts.map;\r\n    }\r\n  });\r\n\r\n  return opts.mapFn(mapFnOpts) as Record<\r\n    string,\r\n    IData | MapFn<any> | NodeRelationalQuery<INode>\r\n  >;\r\n}\r\n\r\nfunction getQueriedProperties(opts: {\r\n  queryId: string;\r\n  mapFn: (data: Record<string, any>) => Record<string, any>;\r\n  data: Record<string, any>;\r\n  computed?: NodeComputedFns<{\r\n    TNodeData: Record<string, any>;\r\n    TNodeComputedData: Record<string, any>;\r\n  }>;\r\n  relational?: NodeRelationalFns<NodeRelationalQueryBuilderRecord>;\r\n  // this optional arg is only true the first time this fn is called\r\n  // and is used to ensure we also query nested data that was stored in the old format (stringified json)\r\n  isRootLevel?: true;\r\n}): Array<string> {\r\n  const mapFnReturn = getMapFnReturn({\r\n    mapFn: opts.mapFn,\r\n    properties: opts.data,\r\n    relational: opts.relational,\r\n  });\r\n\r\n  /**\r\n   * a mapFnReturn will be null when the dev returns an object type in a map fn, but does not specify a map fn for that object\r\n   * for example:\r\n   *\r\n   * map: ({ settings }) => ({\r\n   *   settings: settings\r\n   * })\r\n   *\r\n   * instead of\r\n   *\r\n   * map: ({ settings }) => ({\r\n   *   settings: settings({\r\n   *     map: ({ flagEnabled }) => ({ flagEnabled })\r\n   *   })\r\n   * })\r\n   *\r\n   * in this case, we just assume they want to query the entire object\r\n   */\r\n  return Object.keys(mapFnReturn || opts.data).reduce(\r\n    (acc, key) => {\r\n      const isData = !!opts.data[key];\r\n\r\n      if (!isData) return acc;\r\n\r\n      // we always query these properties, can ignore any explicit requests for it\r\n      if (\r\n        opts.isRootLevel &&\r\n        Object.keys(PROPERTIES_QUERIED_FOR_ALL_NODES).includes(key)\r\n      ) {\r\n        return acc;\r\n      }\r\n\r\n      const data = opts.data[key] as IData;\r\n      if (\r\n        data.type === DATA_TYPES.object ||\r\n        data.type === DATA_TYPES.maybeObject\r\n      ) {\r\n        // query for any data stored in old format (stringified json at the root of the node)\r\n        acc.push(key);\r\n\r\n        // query for data in new format (\"rootLevelProp_nestedProp_moreNestedProp\")\r\n        acc.push(\r\n          ...getQueriedProperties({\r\n            queryId: opts.queryId,\r\n            mapFn: (mapFnReturn && typeof mapFnReturn[key] === 'function'\r\n              ? mapFnReturn[key]\r\n              : () => null) as MapFn<any>,\r\n            data: (data.boxedValue as unknown) as Record<string, IData>,\r\n          }).map(nestedKey => `${key}${OBJECT_PROPERTY_SEPARATOR}${nestedKey}`)\r\n        );\r\n\r\n        return acc;\r\n      }\r\n\r\n      return [...acc, key];\r\n    },\r\n    opts.isRootLevel\r\n      ? [...Object.keys(PROPERTIES_QUERIED_FOR_ALL_NODES)]\r\n      : ([] as Array<string>)\r\n  );\r\n}\r\n\r\nfunction getAllNodeProperties(opts: {\r\n  nodeProperties: Record<string, IData | DataDefaultFn>;\r\n  isRootLevel: boolean;\r\n}) {\r\n  return Object.keys(opts.nodeProperties).reduce(\r\n    (acc, key) => {\r\n      // we are already querying these properties, can ignore any explicit requests for it\r\n      if (\r\n        opts.isRootLevel &&\r\n        Object.keys(PROPERTIES_QUERIED_FOR_ALL_NODES).includes(key)\r\n      ) {\r\n        return acc;\r\n      }\r\n\r\n      const data = opts.nodeProperties[key] as IData;\r\n      if (\r\n        data.type === DATA_TYPES.object ||\r\n        data.type === DATA_TYPES.maybeObject\r\n      ) {\r\n        // query for any data stored in old format (stringified json at the root of the node)\r\n        acc.push(key);\r\n        // query for data in new format (\"rootLevelProp_nestedProp_moreNestedProp\")\r\n        acc.push(\r\n          ...getAllNodeProperties({\r\n            nodeProperties: (opts.nodeProperties[key] as IData)\r\n              .boxedValue as Record<string, IData>,\r\n            isRootLevel: false,\r\n          }).map(nestedKey => `${key}${OBJECT_PROPERTY_SEPARATOR}${nestedKey}`)\r\n        );\r\n        return acc;\r\n      }\r\n\r\n      return [...acc, key];\r\n    },\r\n    opts.isRootLevel\r\n      ? [...Object.keys(PROPERTIES_QUERIED_FOR_ALL_NODES)]\r\n      : ([] as Array<string>)\r\n  );\r\n}\r\n\r\nfunction getRelationalQueries(opts: {\r\n  queryId: string;\r\n  mapFn: (data: Record<string, any>) => Record<string, any>;\r\n  data: Record<string, any>;\r\n  computed?: NodeComputedFns<{\r\n    TNodeData: Record<string, any>;\r\n    TNodeComputedData: Record<string, any>;\r\n  }>;\r\n  relational?: NodeRelationalFns<NodeRelationalQueryBuilderRecord>;\r\n}): Record<string, RelationalQueryRecordEntry> | undefined {\r\n  const mapFnReturn = getMapFnReturn({\r\n    mapFn: opts.mapFn,\r\n    properties: opts.data,\r\n    relational: opts.relational,\r\n  });\r\n\r\n  const relationalQueries = Object.keys(mapFnReturn).reduce((acc, alias) => {\r\n    const isData = !!opts.data[alias];\r\n    const isComputed = opts.computed ? !!opts.computed[alias] : false;\r\n\r\n    if (isData || isComputed) {\r\n      return acc;\r\n    } else {\r\n      const relationalQuery = mapFnReturn[alias] as NodeRelationalQuery<\r\n        INode | Record<string, INode>\r\n      >;\r\n\r\n      /**\r\n       * happens when a map function for a relational query returns all the data for that node\r\n       * example:\r\n       *\r\n       * users: queryDefinition({\r\n       *   def: userNode,\r\n       *   map: ({ todos }) => ({\r\n       *     todos: todos({\r\n       *       map: (allTodoData) => allTodoData\r\n       *     })\r\n       *   })\r\n       * })\r\n       *\r\n       * this function will receive any relational properties in the todo node in the return of the map fn for that todo\r\n       * but they will be functions, instead of the expected objects\r\n       */\r\n      if (typeof relationalQuery === 'function') {\r\n        return acc;\r\n      }\r\n\r\n      if (relationalQuery._relational == null) {\r\n        throw Error(\r\n          `getRelationalQueries - the key \"${alias}\" is not a data property, not a computed property and does not contain a relational query.`\r\n        );\r\n      }\r\n\r\n      if (\r\n        relationalQuery._relational === RELATIONAL_TYPES.oneToOne ||\r\n        relationalQuery._relational === RELATIONAL_TYPES.oneToMany\r\n      ) {\r\n        if (\r\n          'map' in relationalQuery.queryBuilderOpts &&\r\n          typeof relationalQuery.queryBuilderOpts.map === 'function'\r\n        ) {\r\n          // non union\r\n          const queryBuilderOpts = relationalQuery.queryBuilderOpts as IOneToOneQueryBuilderOpts<\r\n            INode\r\n          >;\r\n          addRelationalQueryRecord({\r\n            _relational: relationalQuery._relational,\r\n            _relationshipName: relationalQuery._relationshipName,\r\n            alias,\r\n            def: relationalQuery.def as INode,\r\n            mapFn: queryBuilderOpts.map,\r\n          });\r\n        } else {\r\n          // union\r\n          const queryBuilderOpts = relationalQuery.queryBuilderOpts as IOneToOneQueryBuilderOpts<\r\n            Record<string, INode>\r\n          >;\r\n          Object.keys(queryBuilderOpts).forEach(unionType => {\r\n            addRelationalQueryRecord({\r\n              _relational: relationalQuery._relational,\r\n              _relationshipName: relationalQuery._relationshipName,\r\n              alias: `${alias}${RELATIONAL_UNION_QUERY_SEPARATOR}${unionType}`,\r\n              def: (relationalQuery.def as Record<string, INode>)[unionType],\r\n              mapFn: queryBuilderOpts[unionType].map,\r\n            });\r\n          });\r\n        }\r\n      } else {\r\n        throw Error(\r\n          // @ts-expect-error relationalQuery is currently a never case here, since both existing types are being checked above\r\n          `The relational query type ${relationalQuery._relational} is not valid`\r\n        );\r\n      }\r\n\r\n      function addRelationalQueryRecord(queryRecord: {\r\n        _relational: RELATIONAL_TYPES;\r\n        _relationshipName: string;\r\n        def: INode;\r\n        mapFn: (data: any) => any;\r\n        alias: string;\r\n      }) {\r\n        const relationalQueryRecord: Partial<RelationalQueryRecordEntry> = {\r\n          def: queryRecord.def,\r\n          _relationshipName: queryRecord._relationshipName,\r\n          properties: getQueriedProperties({\r\n            queryId: opts.queryId,\r\n            mapFn: queryRecord.mapFn,\r\n            data: queryRecord.def.data,\r\n            computed: queryRecord.def.computed,\r\n            relational: queryRecord.def.relational,\r\n            isRootLevel: true,\r\n          }),\r\n        };\r\n\r\n        const relationalQueriesWithinThisRelationalQuery = getRelationalQueries(\r\n          {\r\n            queryId: opts.queryId,\r\n            mapFn: queryRecord.mapFn,\r\n            data: queryRecord.def.data,\r\n            computed: queryRecord.def.computed,\r\n            relational: queryRecord.def.relational,\r\n          }\r\n        );\r\n\r\n        if (relationalQueriesWithinThisRelationalQuery) {\r\n          relationalQueryRecord.relational = relationalQueriesWithinThisRelationalQuery;\r\n        }\r\n\r\n        const relationalType = queryRecord._relational;\r\n        if (relationalType === RELATIONAL_TYPES.oneToOne) {\r\n          (relationalQueryRecord as RelationalQueryRecordEntry & {\r\n            oneToOne: true;\r\n          }).oneToOne = true;\r\n        } else if (relationalType === RELATIONAL_TYPES.oneToMany) {\r\n          (relationalQueryRecord as RelationalQueryRecordEntry & {\r\n            oneToMany: true;\r\n          }).oneToMany = true;\r\n          if (\r\n            relationalQuery.queryBuilderOpts &&\r\n            relationalQuery.queryBuilderOpts.filter\r\n          ) {\r\n            (relationalQueryRecord as RelationalQueryRecordEntry).filter =\r\n              relationalQuery.queryBuilderOpts.filter;\r\n          }\r\n          if (\r\n            relationalQuery.queryBuilderOpts &&\r\n            relationalQuery.queryBuilderOpts.pagination\r\n          ) {\r\n            (relationalQueryRecord as RelationalQueryRecordEntry).pagination =\r\n              relationalQuery.queryBuilderOpts.pagination;\r\n          }\r\n          if (\r\n            relationalQuery.queryBuilderOpts &&\r\n            relationalQuery.queryBuilderOpts.sort\r\n          ) {\r\n            (relationalQueryRecord as RelationalQueryRecordEntry).sort =\r\n              relationalQuery.queryBuilderOpts.sort;\r\n          }\r\n        } else {\r\n          throw Error(`relationalType \"${relationalType}\" is not valid.`);\r\n        }\r\n\r\n        acc[\r\n          queryRecord.alias\r\n        ] = relationalQueryRecord as RelationalQueryRecordEntry;\r\n      }\r\n\r\n      return acc;\r\n    }\r\n  }, {} as Record<string, RelationalQueryRecordEntry>);\r\n\r\n  if (Object.keys(relationalQueries).length === 0) return undefined;\r\n  return relationalQueries;\r\n}\r\n\r\nexport function getQueryRecordFromQueryDefinition<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TQueryDefinitions extends QueryDefinitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget\r\n  >\r\n>(opts: { queryId: string; queryDefinitions: TQueryDefinitions }) {\r\n  const queryRecord: QueryRecord = {};\r\n\r\n  Object.keys(opts.queryDefinitions).forEach(queryDefinitionsAlias => {\r\n    const queryDefinition: QueryDefinition<any> | INode | null =\r\n      opts.queryDefinitions[queryDefinitionsAlias];\r\n\r\n    let queriedProps;\r\n    let nodeDef;\r\n    let relational;\r\n    let allowNullResult;\r\n    if (!queryDefinition) {\r\n      return;\r\n    } else if ('_isNodeDef' in queryDefinition) {\r\n      // shorthand syntax where the dev only specified a node defition, nothing else\r\n      nodeDef = queryDefinition as INode;\r\n      queriedProps = getAllNodeProperties({\r\n        nodeProperties: nodeDef.data,\r\n        isRootLevel: true,\r\n      });\r\n    } else {\r\n      nodeDef = queryDefinition.def;\r\n      allowNullResult = queryDefinition.target?.allowNullResult;\r\n      if (queryDefinition.map) {\r\n        queriedProps = getQueriedProperties({\r\n          mapFn: queryDefinition.map,\r\n          queryId: opts.queryId,\r\n          data: queryDefinition.def.data,\r\n          computed: queryDefinition.def.computed,\r\n          relational: queryDefinition.def.relational,\r\n          isRootLevel: true,\r\n        });\r\n        relational = getRelationalQueries({\r\n          mapFn: queryDefinition.map,\r\n          queryId: opts.queryId,\r\n          data: nodeDef.data,\r\n          computed: nodeDef.computed,\r\n          relational: nodeDef.relational,\r\n        });\r\n      } else {\r\n        queriedProps = getAllNodeProperties({\r\n          nodeProperties: nodeDef.data,\r\n          isRootLevel: true,\r\n        });\r\n      }\r\n    }\r\n\r\n    const queryRecordEntry = {\r\n      def: nodeDef,\r\n      properties: queriedProps,\r\n      relational,\r\n      allowNullResult,\r\n    };\r\n\r\n    if ('target' in queryDefinition && queryDefinition.target != null) {\r\n      if (\r\n        'ids' in queryDefinition.target &&\r\n        queryDefinition.target.ids != null\r\n      ) {\r\n        if (\r\n          (queryDefinition.target.ids as Array<string>).some(\r\n            id => typeof id !== 'string'\r\n          )\r\n        ) {\r\n          throw Error('Invalid id in target.ids');\r\n        }\r\n\r\n        (queryRecordEntry as QueryRecordEntry & { ids: Array<string> }).ids =\r\n          queryDefinition.target.ids;\r\n      }\r\n      if ('id' in queryDefinition.target) {\r\n        if (typeof queryDefinition.target.id !== 'string') {\r\n          throw Error('Invalid id in target.id');\r\n        }\r\n\r\n        (queryRecordEntry as QueryRecordEntry & { id: string }).id =\r\n          queryDefinition.target.id;\r\n      }\r\n    }\r\n\r\n    if ('filter' in queryDefinition && queryDefinition.filter != null) {\r\n      (queryRecordEntry as QueryRecordEntry).filter = queryDefinition.filter;\r\n    }\r\n    if ('pagination' in queryDefinition && queryDefinition.pagination != null) {\r\n      (queryRecordEntry as QueryRecordEntry).pagination =\r\n        queryDefinition.pagination;\r\n    }\r\n    if ('sort' in queryDefinition && queryDefinition.sort != null) {\r\n      (queryRecordEntry as QueryRecordEntry).sort = queryDefinition.sort;\r\n    }\r\n\r\n    queryRecord[queryDefinitionsAlias] = queryRecordEntry as QueryRecordEntry;\r\n  });\r\n  return queryRecord;\r\n}\r\n\r\nfunction getIdsString(ids: Array<string>) {\r\n  return `[${ids.map(id => `\"${id}\"`).join(',')}]`;\r\n}\r\n\r\nfunction wrapInQuotesIfString(value: any) {\r\n  if (typeof value === 'string') return `\"${value}\"`;\r\n  return value;\r\n}\r\n\r\nexport function getKeyValueFilterString<TNode extends INode>(\r\n  filter: ValidFilterForNode<TNode>\r\n) {\r\n  type FilterForBE = {\r\n    key: keyof ValidFilterForNode<TNode>;\r\n    operator: EStringFilterOperator | ENumberFilterOperator;\r\n    value: any;\r\n  };\r\n  const readyForBE = Object.keys(filter).reduce(\r\n    (acc, current) => {\r\n      const key = current as keyof ValidFilterForNode<TNode>;\r\n      let filterForBE: FilterForBE;\r\n      if (\r\n        filter[key] === null ||\r\n        typeof filter[key] === 'string' ||\r\n        typeof filter[key] === 'number' ||\r\n        typeof filter[key] === 'boolean'\r\n      ) {\r\n        filterForBE = {\r\n          key,\r\n          operator: EStringFilterOperator.eq,\r\n          value: filter[key],\r\n        };\r\n      } else {\r\n        const { _condition, ...rest } = filter[key];\r\n        const keys = Object.keys(rest);\r\n        if (keys.length !== 1) {\r\n          throw Error('Expected 1 property on this filter object');\r\n        }\r\n        const operator = (keys[0] as unknown) as\r\n          | EStringFilterOperator\r\n          | ENumberFilterOperator;\r\n        const value = rest[operator as keyof typeof rest];\r\n\r\n        filterForBE = {\r\n          key,\r\n          operator,\r\n          value,\r\n        };\r\n      }\r\n\r\n      const condition: FilterCondition = filter[key]?._condition || 'and';\r\n\r\n      const conditionArray = acc[condition] || [];\r\n      conditionArray.push(filterForBE);\r\n\r\n      acc[condition] = conditionArray;\r\n\r\n      return acc;\r\n    },\r\n    {} as {\r\n      and?: Array<FilterForBE>;\r\n      or?: Array<FilterForBE>;\r\n    }\r\n  );\r\n\r\n  if (readyForBE.and?.length === 0) {\r\n    delete readyForBE.and;\r\n  }\r\n\r\n  if (readyForBE.or?.length === 0) {\r\n    delete readyForBE.or;\r\n  }\r\n\r\n  return `${Object.entries(readyForBE).reduce(\r\n    (acc, [condition, filters], index) => {\r\n      if (index > 0) acc += ', ';\r\n\r\n      const stringifiedFilters = filters.reduce((acc, filter, index) => {\r\n        if (index > 0) acc += ', ';\r\n        acc += `{${filter.key}: {${filter.operator}: ${wrapInQuotesIfString(\r\n          filter.value\r\n        )}}}`;\r\n\r\n        return acc;\r\n      }, '');\r\n\r\n      acc += `{${condition}: [${stringifiedFilters}]}`;\r\n\r\n      return acc;\r\n    },\r\n    ''\r\n  )}`;\r\n}\r\n\r\nfunction getGetNodeOptions<TNode extends INode>(opts: {\r\n  def: TNode;\r\n  filter?: ValidFilterForNode<TNode>;\r\n  useServerSidePaginationFilteringSorting: boolean;\r\n}) {\r\n  if (!opts.useServerSidePaginationFilteringSorting) return '';\r\n\r\n  const options: Array<string> = [];\r\n\r\n  if (opts.filter !== null && opts.filter !== undefined) {\r\n    options.push(`where: ${getKeyValueFilterString(opts.filter)}`);\r\n  }\r\n\r\n  return options.join(', ');\r\n}\r\n\r\nfunction getSpaces(numberOfSpaces: number) {\r\n  return new Array(numberOfSpaces).fill(' ').join('');\r\n}\r\n\r\nfunction getQueryPropertiesString(opts: {\r\n  queryRecordEntry: QueryRecordEntry | RelationalQueryRecordEntry;\r\n  nestLevel: number;\r\n}) {\r\n  let propsString = `${getSpaces(opts.nestLevel * 2)}`;\r\n  propsString += opts.queryRecordEntry.properties.join(\r\n    `,\\n${getSpaces(opts.nestLevel * 2)}`\r\n  );\r\n\r\n  if (opts.queryRecordEntry.relational) {\r\n    propsString +=\r\n      (propsString !== '' ? ',' : '') +\r\n      getRelationalQueryString({\r\n        relationalQueryRecord: opts.queryRecordEntry.relational,\r\n        nestLevel: opts.nestLevel,\r\n      });\r\n  }\r\n\r\n  return propsString;\r\n}\r\n\r\nfunction getRelationalQueryString(opts: {\r\n  relationalQueryRecord: Record<string, RelationalQueryRecordEntry>;\r\n  nestLevel: number;\r\n}) {\r\n  return Object.keys(opts.relationalQueryRecord).reduce((acc, alias) => {\r\n    const relationalQueryRecordEntry = opts.relationalQueryRecord[alias];\r\n\r\n    if (!relationalQueryRecordEntry._relationshipName) {\r\n      throw Error(\r\n        `relationalQueryRecordEntry is invalid\\n${JSON.stringify(\r\n          relationalQueryRecordEntry,\r\n          null,\r\n          2\r\n        )}`\r\n      );\r\n    }\r\n\r\n    const operation = `${relationalQueryRecordEntry._relationshipName}`;\r\n\r\n    return (\r\n      acc +\r\n      `\\n${getSpaces(opts.nestLevel * 2)}${alias}: ${operation} {\\n` +\r\n      ('oneToMany' in relationalQueryRecordEntry\r\n        ? wrapInNodes({\r\n            propertiesString: getQueryPropertiesString({\r\n              queryRecordEntry: relationalQueryRecordEntry,\r\n              nestLevel: opts.nestLevel + 2,\r\n            }),\r\n            nestLevel: opts.nestLevel + 1,\r\n          })\r\n        : getQueryPropertiesString({\r\n            queryRecordEntry: relationalQueryRecordEntry,\r\n            nestLevel: opts.nestLevel + 1,\r\n          })) +\r\n      `\\n${getSpaces(opts.nestLevel * 2)}}`\r\n    );\r\n  }, '');\r\n}\r\n\r\nfunction getOperationFromQueryRecordEntry(\r\n  opts: { useServerSidePaginationFilteringSorting: boolean } & QueryRecordEntry\r\n) {\r\n  const nodeType = opts.def.type;\r\n  let operation: string;\r\n  if ('ids' in opts && opts.ids != null) {\r\n    operation = `${nodeType}s(ids: ${getIdsString(opts.ids)})`;\r\n  } else if ('id' in opts && opts.id != null) {\r\n    operation = `${nodeType}(id: \"${opts.id}\")`;\r\n  } else {\r\n    const options = getGetNodeOptions(opts);\r\n    operation = `${nodeType}s${options !== '' ? `(${options})` : ''}`;\r\n  }\r\n\r\n  return operation;\r\n}\r\n\r\nfunction wrapInNodes(opts: { propertiesString: string; nestLevel: number }) {\r\n  return `${getSpaces(opts.nestLevel * 2)}nodes {\\n${\r\n    opts.propertiesString\r\n  }\\n${getSpaces(opts.nestLevel * 2)}}`;\r\n}\r\n\r\nfunction getRootLevelQueryString(\r\n  opts: {\r\n    alias: string;\r\n    useServerSidePaginationFilteringSorting: boolean;\r\n  } & QueryRecordEntry\r\n) {\r\n  const operation = getOperationFromQueryRecordEntry(opts);\r\n\r\n  return (\r\n    `  ${opts.alias}: ${operation} {\\n` +\r\n    `${\r\n      opts.id == null\r\n        ? wrapInNodes({\r\n            propertiesString: getQueryPropertiesString({\r\n              queryRecordEntry: opts,\r\n              nestLevel: 3,\r\n            }),\r\n            nestLevel: 2,\r\n          })\r\n        : getQueryPropertiesString({ queryRecordEntry: opts, nestLevel: 2 })\r\n    }` +\r\n    `\\n  }`\r\n  );\r\n}\r\n\r\nexport type SubscriptionConfig = {\r\n  alias: string;\r\n  gqlString: string;\r\n  extractNodeFromSubscriptionMessage: (\r\n    subscriptionMessage: Record<string, any>\r\n  ) => any;\r\n  extractOperationFromSubscriptionMessage: (\r\n    subscriptionMessage: Record<string, any>\r\n  ) => any;\r\n};\r\n\r\nexport function getQueryGQLStringFromQueryRecord(opts: {\r\n  queryId: string;\r\n  queryRecord: QueryRecord;\r\n  useServerSidePaginationFilteringSorting: boolean;\r\n}) {\r\n  return (\r\n    `query ${getSanitizedQueryId({ queryId: opts.queryId })} {\\n` +\r\n    Object.keys(opts.queryRecord)\r\n      .map(alias =>\r\n        getRootLevelQueryString({\r\n          ...opts.queryRecord[alias],\r\n          alias,\r\n          useServerSidePaginationFilteringSorting:\r\n            opts.useServerSidePaginationFilteringSorting,\r\n        })\r\n      )\r\n      .join('\\n    ') +\r\n    '\\n}'\r\n  ).trim();\r\n}\r\n\r\nfunction getQueryRecordSortAndFilterValues(record: QueryRecord) {\r\n  return Object.keys(record).reduce((acc, alias) => {\r\n    acc.push(record[alias].filter);\r\n    acc.push(record[alias].sort);\r\n    const relational = record[alias].relational;\r\n    if (relational) {\r\n      acc.push(...(getQueryRecordSortAndFilterValues(relational) || []));\r\n    }\r\n\r\n    return acc;\r\n  }, [] as any[]);\r\n}\r\n\r\nexport function getQueryInfo<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TQueryDefinitions extends QueryDefinitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget\r\n  >\r\n>(opts: {\r\n  queryDefinitions: TQueryDefinitions;\r\n  queryId: string;\r\n  useServerSidePaginationFilteringSorting: boolean;\r\n}) {\r\n  const queryRecord: QueryRecord = getQueryRecordFromQueryDefinition(opts);\r\n  const queryGQLString = getQueryGQLStringFromQueryRecord({\r\n    queryId: opts.queryId,\r\n    queryRecord,\r\n    useServerSidePaginationFilteringSorting:\r\n      opts.useServerSidePaginationFilteringSorting,\r\n  });\r\n  const queryParamsString = JSON.stringify(\r\n    getQueryRecordSortAndFilterValues(queryRecord)\r\n  );\r\n\r\n  const subscriptionConfigs: Array<SubscriptionConfig> = Object.keys(\r\n    queryRecord\r\n  ).reduce((subscriptionConfigsAcc, alias) => {\r\n    const subscriptionName = getSanitizedQueryId({\r\n      queryId: opts.queryId + '_' + alias,\r\n    });\r\n    const queryRecordEntry = queryRecord[alias];\r\n\r\n    const operation = getOperationFromQueryRecordEntry({\r\n      ...queryRecordEntry,\r\n      useServerSidePaginationFilteringSorting:\r\n        opts.useServerSidePaginationFilteringSorting,\r\n    });\r\n\r\n    const gqlStrings = [\r\n      `\r\n    subscription ${subscriptionName} {\r\n      ${alias}: ${operation} {\r\n        node {\r\n          ${getQueryPropertiesString({ queryRecordEntry, nestLevel: 5 })}\r\n        }\r\n        operation { action, path }\r\n      }\r\n    }\r\n        `.trim(),\r\n    ];\r\n\r\n    function extractNodeFromSubscriptionMessage(\r\n      subscriptionMessage: Record<string, any>\r\n    ) {\r\n      if (!subscriptionMessage[alias].node) {\r\n        throw new UnexpectedSubscriptionMessageException({\r\n          subscriptionMessage,\r\n          description: 'No \"node\" found in message',\r\n        });\r\n      }\r\n\r\n      return subscriptionMessage[alias].node;\r\n    }\r\n\r\n    function extractOperationFromSubscriptionMessage(\r\n      subscriptionMessage: Record<string, any>\r\n    ) {\r\n      if (!subscriptionMessage[alias].operation) {\r\n        throw new UnexpectedSubscriptionMessageException({\r\n          subscriptionMessage,\r\n          description: 'No \"operation\" found in message',\r\n        });\r\n      }\r\n\r\n      return subscriptionMessage[alias].operation;\r\n    }\r\n\r\n    gqlStrings.forEach(gqlString => {\r\n      subscriptionConfigsAcc.push({\r\n        alias,\r\n        gqlString,\r\n        extractNodeFromSubscriptionMessage,\r\n        extractOperationFromSubscriptionMessage,\r\n      });\r\n    });\r\n\r\n    return subscriptionConfigsAcc;\r\n  }, [] as Array<SubscriptionConfig>);\r\n\r\n  return {\r\n    subscriptionConfigs: subscriptionConfigs,\r\n    queryGQLString,\r\n    queryParamsString,\r\n    queryRecord,\r\n  };\r\n}\r\n\r\n/**\r\n * Converts a queryDefinitions into a gql doc that can be sent to the gqlClient\r\n * Returns a queryRecord for easily deduping requests based on the data that is being requested\r\n * Can later also be used to build a diff to request only the necessary data\r\n * taking into account the previous query record to avoid requesting data already in memory\r\n */\r\nexport function convertQueryDefinitionToQueryInfo<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TQueryDefinitions extends QueryDefinitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget\r\n  >\r\n>(opts: {\r\n  queryDefinitions: TQueryDefinitions;\r\n  queryId: string;\r\n  useServerSidePaginationFilteringSorting: boolean;\r\n}) {\r\n  const {\r\n    queryGQLString,\r\n    subscriptionConfigs,\r\n    queryRecord,\r\n    queryParamsString,\r\n  } = getQueryInfo(opts);\r\n  //call plugin function here that takes in the queryRecord\r\n\r\n  return {\r\n    queryGQL: gql(queryGQLString),\r\n    subscriptionConfigs: subscriptionConfigs.map(subscriptionConfig => ({\r\n      ...subscriptionConfig,\r\n      gql: gql(subscriptionConfig.gqlString),\r\n    })),\r\n    queryRecord,\r\n    queryParamsString,\r\n  };\r\n}\r\n\r\nfunction getSanitizedQueryId(opts: { queryId: string }): string {\r\n  return opts.queryId.replace(/-/g, '_');\r\n}\r\n","import { OBJECT_IDENTIFIER, OBJECT_PROPERTY_SEPARATOR } from '../dataTypes';\r\nimport { Maybe, DataDefaultFn, DATA_TYPES, IData } from '../types';\r\nimport { AdditionalEdgeProperties } from './edges/types';\r\n\r\nconst JSON_TAG = '__JSON__';\r\n\r\n/**\r\n * Takes the json representation of a node's data and prepares it to be sent to SM\r\n *\r\n * @param nodeData an object with arbitrary data\r\n * @param IDataRecord a record of Data types to identify objects vs records\r\n * @param generatingMockData a boolean to determine if escape text should be utilized\r\n * @returns stringified params ready for mutation\r\n */\r\nexport function revisedConvertNodeDataToSMPersistedData(opts: {\r\n  nodeData: Record<string, any>;\r\n  IDataRecord: Record<string, IData<any> | DataDefaultFn>;\r\n  generatingMockData: boolean;\r\n  skipBooleanStringWrapping?: boolean;\r\n}): string {\r\n  const {\r\n    nodeData,\r\n    IDataRecord,\r\n    generatingMockData,\r\n    skipBooleanStringWrapping,\r\n  } = opts;\r\n  const parsedData = revisedPrepareForBE({\r\n    obj: nodeData,\r\n    IDataRecord,\r\n    generatingMockData,\r\n  });\r\n\r\n  const stringified = Object.entries(parsedData).reduce(\r\n    (acc, [key, value], i) => {\r\n      if (i > 0) {\r\n        acc += '\\n';\r\n      }\r\n      if (key === 'childNodes' || key === 'additionalEdges') {\r\n        return acc + `${key}: [\\n{\\n${value.join('\\n}\\n{\\n')}\\n}\\n]`;\r\n      }\r\n\r\n      const shouldBeRawBoolean =\r\n        (value === 'true' || value === 'false') && !!skipBooleanStringWrapping;\r\n\r\n      return (\r\n        acc +\r\n        `${key}: ${value === null || shouldBeRawBoolean ? value : `\"${value}\"`}`\r\n      );\r\n    },\r\n    ``\r\n  );\r\n  return stringified;\r\n}\r\n\r\nfunction escapeText(text: string): string {\r\n  return text\r\n    .replace(/\\\\/g, '\\\\\\\\')\r\n    .replace(/\"/g, '\\\\\"')\r\n    .replace(/\\n/g, '\\\\n');\r\n}\r\n\r\n/**\r\n * Takes an object node value and flattens it to be sent to SM\r\n *\r\n * @param obj an object with arbitrary data\r\n * @param IDataRecordForKey a record of Data type for specific key to identify objects vs records\r\n * @param generatingMockData a boolean to determine if escape text should be utilized\r\n * @param parentKey if the value is a nested object, the key of the parent is passed in order to prepend it to the child key\r\n * @param omitObjectIdentifier skip including __object__ for identifying parent objects,\r\n *  used to construct filters since there we don't care what the parent property is set to\r\n * @returns a flat object where the keys are of \"key__dot__value\" syntax\r\n *\r\n * For example:\r\n * ```typescript\r\n * const obj = {settings: {schedule: {day: 'Monday'} } }\r\n *  const result = prepareValueForBE(obj)\r\n * ```\r\n * The result will be:\r\n *  ```typescript\r\n *  {\r\n * settings: '__object__',\r\n * settings__dot__schedule: '__object__',\r\n * settings__dot__schedule__dot__day: 'Monday',\r\n * }\r\n * ```\r\n */\r\nexport function revisedPrepareObjectForBE(opts: {\r\n  obj: Record<string, any>;\r\n  IDataRecordForKey: IData<any>;\r\n  generatingMockData: boolean;\r\n  parentKey?: string;\r\n  omitObjectIdentifier?: boolean;\r\n}) {\r\n  const { obj, parentKey, omitObjectIdentifier } = opts;\r\n  return Object.entries(obj).reduce((acc, [key, val]) => {\r\n    const preparedKey = parentKey\r\n      ? `${parentKey}${OBJECT_PROPERTY_SEPARATOR}${key}`\r\n      : key;\r\n\r\n    if (typeof val === 'object' && val != null && !Array.isArray(val)) {\r\n      if (!omitObjectIdentifier) {\r\n        acc[preparedKey] = OBJECT_IDENTIFIER;\r\n      }\r\n\r\n      acc = {\r\n        ...acc,\r\n        ...Object.entries(val).reduce((acc, [key, val]) => {\r\n          return {\r\n            ...acc,\r\n            ...revisedConvertPropertyToBE({\r\n              key: `${preparedKey}${OBJECT_PROPERTY_SEPARATOR}${key}`,\r\n              value: val,\r\n              ...opts,\r\n            }),\r\n          };\r\n        }, {}),\r\n      };\r\n    } else {\r\n      acc = {\r\n        ...acc,\r\n        ...revisedConvertPropertyToBE({\r\n          key: preparedKey,\r\n          value: val,\r\n          ...opts,\r\n        }),\r\n      };\r\n    }\r\n\r\n    return acc;\r\n  }, {} as Record<string, any>);\r\n}\r\n\r\nfunction revisedConvertPropertyToBE(opts: {\r\n  key: string;\r\n  value: any;\r\n  IDataRecordForKey: IData<any>;\r\n  generatingMockData: boolean;\r\n  omitObjectIdentifier?: boolean;\r\n}): Record<string, Maybe<string | boolean>> {\r\n  const {\r\n    key,\r\n    value,\r\n    IDataRecordForKey,\r\n    generatingMockData,\r\n    omitObjectIdentifier,\r\n  } = opts;\r\n  if (value === null) {\r\n    return { [key]: null };\r\n  } else if (Array.isArray(value)) {\r\n    return {\r\n      [key]: `${JSON_TAG}${\r\n        generatingMockData\r\n          ? JSON.stringify(value)\r\n          : escapeText(JSON.stringify(value))\r\n      }`,\r\n    };\r\n  } else if (typeof value === 'object') {\r\n    if (\r\n      IDataRecordForKey.type === DATA_TYPES.record ||\r\n      IDataRecordForKey.type === DATA_TYPES.maybeRecord\r\n    ) {\r\n      return {\r\n        [key]: `${JSON_TAG}${\r\n          generatingMockData\r\n            ? JSON.stringify(value)\r\n            : escapeText(JSON.stringify(value))\r\n        }`,\r\n      };\r\n    } else {\r\n      return revisedPrepareObjectForBE({\r\n        obj: { [key]: value },\r\n        IDataRecordForKey,\r\n        generatingMockData,\r\n        omitObjectIdentifier,\r\n      });\r\n    }\r\n  } else if (typeof value === 'string') {\r\n    return { [key]: escapeText(value) };\r\n  } else if (typeof value === 'boolean' || typeof value === 'number') {\r\n    if (typeof value === 'number' && isNaN(value)) {\r\n      return { [key]: null };\r\n    }\r\n    return { [key]: String(value) };\r\n  } else {\r\n    throw Error(\r\n      `I don't yet know how to handle feData of type \"${typeof value}\"`\r\n    );\r\n  }\r\n}\r\n\r\nfunction revisedConvertEdgeDirectionNames(edgeItem: AdditionalEdgeProperties) {\r\n  if (edgeItem.hasOwnProperty('to')) {\r\n    const { to, ...restOfEdgeItem } = edgeItem;\r\n\r\n    return {\r\n      ...restOfEdgeItem,\r\n      targetId: to,\r\n    };\r\n  } else if (edgeItem.hasOwnProperty('from')) {\r\n    const { from, ...restOfEdgeItem } = edgeItem;\r\n\r\n    return {\r\n      ...restOfEdgeItem,\r\n      sourceId: edgeItem.from,\r\n    };\r\n  }\r\n  throw new Error('convertEdgeDirectionNames - received invalid data');\r\n}\r\n\r\nexport function revisedPrepareForBE(opts: {\r\n  obj: Record<string, any>;\r\n  IDataRecord: Record<string, IData<any> | DataDefaultFn>;\r\n  generatingMockData: boolean;\r\n}) {\r\n  const { IDataRecord, obj, generatingMockData } = opts;\r\n\r\n  return Object.entries(obj).reduce((acc, [key, value]) => {\r\n    const IDataRecordForKey =\r\n      typeof IDataRecord[key] === 'function'\r\n        ? (IDataRecord[key] as any)._default\r\n        : IDataRecord[key];\r\n\r\n    if (key === 'childNodes') {\r\n      if (!Array.isArray(value)) {\r\n        throw new Error(`\"childNodes\" is supposed to be an array`);\r\n      }\r\n\r\n      return {\r\n        ...acc,\r\n        childNodes: value.map(item =>\r\n          revisedConvertNodeDataToSMPersistedData({\r\n            nodeData: item,\r\n            IDataRecord,\r\n            generatingMockData,\r\n          })\r\n        ),\r\n      };\r\n    }\r\n\r\n    if (key === 'additionalEdges') {\r\n      if (!Array.isArray(value)) {\r\n        throw new Error(`\"additionalEdges\" is supposed to be an array`);\r\n      }\r\n      return {\r\n        ...acc,\r\n        additionalEdges: value.map(item =>\r\n          revisedConvertNodeDataToSMPersistedData({\r\n            nodeData: revisedConvertEdgeDirectionNames(item),\r\n            IDataRecord,\r\n            generatingMockData,\r\n            skipBooleanStringWrapping: true,\r\n          })\r\n        ),\r\n      };\r\n    }\r\n\r\n    return {\r\n      ...acc,\r\n      ...revisedConvertPropertyToBE({\r\n        key,\r\n        value,\r\n        IDataRecordForKey,\r\n        generatingMockData,\r\n      }),\r\n    };\r\n  }, {} as Record<string, any>);\r\n}\r\n","import { extend } from './dataUtilities';\r\nimport { UnreachableCaseError } from './exceptions';\r\nimport {\r\n  generateRandomBoolean,\r\n  generateRandomNumber,\r\n  generateRandomString,\r\n} from './generateMockDataUtilities';\r\nimport { getQueryRecordFromQueryDefinition } from './queryDefinitionAdapters';\r\nimport { revisedPrepareForBE } from './transaction/revisedConvertNodeDataToSMPersistedData';\r\n\r\nimport {\r\n  IData,\r\n  QueryDefinitions,\r\n  QueryRecord,\r\n  QueryRecordEntry,\r\n  RelationalQueryRecordEntry,\r\n  DataDefaultFn,\r\n  DATA_TYPES,\r\n} from './types';\r\n\r\ntype MockValuesIDataReturnType =\r\n  | Record<string, any>\r\n  | number\r\n  | string\r\n  | boolean\r\n  | Array<any>;\r\n\r\nfunction getMockValueForIData(data: IData): MockValuesIDataReturnType {\r\n  switch (data.type) {\r\n    case DATA_TYPES.string: {\r\n      return generateRandomString();\r\n    }\r\n    case DATA_TYPES.maybeString: {\r\n      // 50/50 chance to get a value or null\r\n      return getRandomItemFromArray([generateRandomString(), null]);\r\n    }\r\n    case DATA_TYPES.stringEnum: {\r\n      return getRandomItemFromArray(data.acceptableValues as Array<any>);\r\n    }\r\n    case DATA_TYPES.maybeStringEnum: {\r\n      return getRandomItemFromArray([\r\n        getRandomItemFromArray(data.acceptableValues as Array<any>),\r\n        null,\r\n      ]);\r\n    }\r\n    case DATA_TYPES.number: {\r\n      return generateRandomNumber(1, 100);\r\n    }\r\n    case DATA_TYPES.maybeNumber: {\r\n      return getRandomItemFromArray([generateRandomNumber(1, 100), null]);\r\n    }\r\n    case DATA_TYPES.boolean: {\r\n      return generateRandomBoolean();\r\n    }\r\n    case DATA_TYPES.maybeBoolean: {\r\n      return getRandomItemFromArray([generateRandomBoolean(), null]);\r\n    }\r\n    case DATA_TYPES.object: {\r\n      return getMockValuesForIDataRecord(data.boxedValue);\r\n    }\r\n    case DATA_TYPES.maybeObject: {\r\n      return getRandomItemFromArray([\r\n        getMockValuesForIDataRecord(data.boxedValue),\r\n        null,\r\n      ]);\r\n    }\r\n    case DATA_TYPES.array: {\r\n      return new Array(generateRandomNumber(1, 10)).fill('').map(_ => {\r\n        return typeof data.boxedValue === 'function'\r\n          ? getMockValueForIData(data.boxedValue._default as IData)\r\n          : getMockValueForIData(data.boxedValue);\r\n      });\r\n    }\r\n    case DATA_TYPES.maybeArray: {\r\n      return getRandomItemFromArray([\r\n        new Array(generateRandomNumber(1, 10)).fill('').map(_ => {\r\n          return typeof data.boxedValue === 'function'\r\n            ? getMockValueForIData(data.boxedValue._default as IData)\r\n            : getMockValueForIData(data.boxedValue);\r\n        }),\r\n        null,\r\n      ]);\r\n    }\r\n    case DATA_TYPES.record: {\r\n      return {\r\n        [generateRandomString()]:\r\n          typeof data.boxedValue === 'function'\r\n            ? getMockValueForIData(data.boxedValue._default as IData)\r\n            : getMockValueForIData(data.boxedValue),\r\n      };\r\n    }\r\n    case DATA_TYPES.maybeRecord: {\r\n      return getRandomItemFromArray([\r\n        {\r\n          [generateRandomString()]:\r\n            typeof data.boxedValue === 'function'\r\n              ? getMockValueForIData(data.boxedValue._default as IData)\r\n              : getMockValueForIData(data.boxedValue),\r\n        },\r\n        null,\r\n      ]);\r\n    }\r\n    default:\r\n      throw new UnreachableCaseError(data.type as never);\r\n  }\r\n}\r\n\r\nexport function getMockValuesForIDataRecord(\r\n  record: Record<string, IData | DataDefaultFn>\r\n) {\r\n  return Object.entries(record).reduce((acc, [key, value]) => {\r\n    if (typeof value === 'function') {\r\n      acc[key] = getMockValueForIData(value._default as IData);\r\n    } else {\r\n      acc[key] = getMockValueForIData(value);\r\n    }\r\n    return acc;\r\n  }, {} as Record<string, any>);\r\n}\r\n\r\nfunction generateMockNodeDataFromQueryRecordForQueriedProperties(opts: {\r\n  queryRecord: QueryRecordEntry | RelationalQueryRecordEntry;\r\n}) {\r\n  const queryRecord = opts.queryRecord;\r\n  const nodePropertiesToMock = Object.keys(queryRecord.def.data)\r\n    .filter(nodeProperty => {\r\n      return queryRecord.properties.includes(nodeProperty);\r\n    })\r\n    .reduce((acc, item) => {\r\n      acc[item] = (queryRecord.def.data as Record<\r\n        string,\r\n        IData | DataDefaultFn\r\n      >)[item];\r\n      return acc;\r\n    }, {} as Record<string, IData | DataDefaultFn>);\r\n\r\n  const mockedValues = {\r\n    type: opts.queryRecord.def.type,\r\n    version: '1',\r\n    ...getMockValuesForIDataRecord(nodePropertiesToMock),\r\n  };\r\n\r\n  if (queryRecord.def.generateMockData) {\r\n    extend({\r\n      object: mockedValues,\r\n      extension: queryRecord.def.generateMockData(),\r\n      extendNestedObjects: true,\r\n      deleteKeysNotInExtension: false,\r\n    });\r\n  }\r\n\r\n  const valuesForNodeDataPreparedForBE = revisedPrepareForBE({\r\n    obj: mockedValues,\r\n    IDataRecord: nodePropertiesToMock,\r\n    generatingMockData: true,\r\n  });\r\n\r\n  return valuesForNodeDataPreparedForBE;\r\n}\r\n\r\nfunction generateMockNodeDataForAllQueryRecords(opts: {\r\n  queryRecords: QueryRecord;\r\n}) {\r\n  const { queryRecords } = opts;\r\n  const mockedNodeData: Record<string, any> = {};\r\n\r\n  Object.keys(queryRecords).forEach(queryRecordAlias => {\r\n    const queryRecord: QueryRecordEntry | RelationalQueryRecordEntry =\r\n      queryRecords[queryRecordAlias];\r\n    const returnValueShouldBeAnArray =\r\n      !!queryRecord.id === false && !('oneToOne' in queryRecord);\r\n\r\n    let mockedNodeDataReturnValues;\r\n    let relationalMockNodeProperties: Record<string, any> = {};\r\n\r\n    if (returnValueShouldBeAnArray) {\r\n      const numOfResultsToGenerate = generateRandomNumber(2, 10);\r\n      const arrayOfMockNodeValues = [];\r\n\r\n      for (let i = 0; i < numOfResultsToGenerate; i++) {\r\n        const mockNodeDataForQueryRecord = generateMockNodeDataFromQueryRecordForQueriedProperties(\r\n          {\r\n            queryRecord,\r\n          }\r\n        );\r\n\r\n        if (queryRecord.relational) {\r\n          relationalMockNodeProperties = generateMockNodeDataForAllQueryRecords(\r\n            {\r\n              queryRecords: queryRecord.relational,\r\n            }\r\n          );\r\n        }\r\n        arrayOfMockNodeValues.push({\r\n          ...mockNodeDataForQueryRecord,\r\n          ...relationalMockNodeProperties,\r\n        });\r\n      }\r\n\r\n      mockedNodeDataReturnValues = { nodes: arrayOfMockNodeValues };\r\n    } else {\r\n      const mockNodeDataForQueryRecord = generateMockNodeDataFromQueryRecordForQueriedProperties(\r\n        {\r\n          queryRecord,\r\n        }\r\n      );\r\n\r\n      if (queryRecord.relational) {\r\n        relationalMockNodeProperties = generateMockNodeDataForAllQueryRecords({\r\n          queryRecords: queryRecord.relational,\r\n        });\r\n      }\r\n\r\n      mockedNodeDataReturnValues = {\r\n        ...mockNodeDataForQueryRecord,\r\n        ...relationalMockNodeProperties,\r\n      };\r\n    }\r\n\r\n    mockedNodeData[queryRecordAlias] = mockedNodeDataReturnValues;\r\n  });\r\n\r\n  return mockedNodeData;\r\n}\r\n\r\nexport function generateMockNodeDataFromQueryDefinitions<\r\n  TSMNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TQueryDefinitions extends QueryDefinitions<\r\n    TSMNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget\r\n  >\r\n>(opts: { queryDefinitions: TQueryDefinitions; queryId: string }) {\r\n  const { queryDefinitions, queryId } = opts;\r\n\r\n  const queryRecords = getQueryRecordFromQueryDefinition({\r\n    queryDefinitions: queryDefinitions,\r\n    queryId: queryId,\r\n  });\r\n\r\n  return generateMockNodeDataForAllQueryRecords({\r\n    queryRecords,\r\n  });\r\n}\r\n\r\nfunction getRandomItemFromArray(array: Array<any>) {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\n","import { update, isArray, orderBy } from 'lodash';\r\nimport { NODES_PROPERTY_KEY } from './consts';\r\nimport { NULL_TAG } from './dataConversions';\r\nimport { OBJECT_PROPERTY_SEPARATOR } from './dataTypes';\r\nimport {\r\n  getFlattenedNodeFilterObject,\r\n  getFlattenedNodeSortObject,\r\n} from './dataUtilities';\r\nimport {\r\n  FilterPropertyNotDefinedInQueryException,\r\n  FilterOperatorNotImplementedException,\r\n  SortPropertyNotDefinedInQueryException,\r\n} from './exceptions';\r\nimport {\r\n  FilterValue,\r\n  FilterOperator,\r\n  QueryRecordEntry,\r\n  INode,\r\n  SortDirection,\r\n  ValidSortForNode,\r\n  QueryRecord,\r\n  FilterObjectForNode,\r\n  FilterCondition,\r\n} from './types';\r\n\r\nfunction checkFilter({\r\n  operator,\r\n  itemValue,\r\n  filterValue,\r\n}: {\r\n  operator: FilterOperator;\r\n  filterValue: any;\r\n  itemValue: any;\r\n}) {\r\n  switch (operator) {\r\n    case '_contains': {\r\n      return (\r\n        String(itemValue)\r\n          .toLowerCase()\r\n          .indexOf(String(filterValue).toLowerCase()) !== -1\r\n      );\r\n    }\r\n    case '_ncontains': {\r\n      return (\r\n        String(itemValue)\r\n          .toLowerCase()\r\n          .indexOf(String(filterValue).toLowerCase()) === -1\r\n      );\r\n    }\r\n    case '_eq': {\r\n      return (\r\n        String(itemValue).toLowerCase() === String(filterValue).toLowerCase()\r\n      );\r\n    }\r\n    case '_neq':\r\n      return (\r\n        String(itemValue).toLowerCase() !== String(filterValue).toLowerCase()\r\n      );\r\n    case '_gt':\r\n      return itemValue > filterValue;\r\n    case '_gte':\r\n      return itemValue >= filterValue;\r\n    case '_lt':\r\n      return itemValue < filterValue;\r\n    case '_lte':\r\n      return itemValue <= filterValue;\r\n    default:\r\n      throw new FilterOperatorNotImplementedException({\r\n        operator: operator,\r\n      });\r\n  }\r\n}\r\n\r\nfunction convertNullStringValuesToNull({\r\n  item,\r\n  underscoreSeparatedPropName,\r\n}: {\r\n  item: any;\r\n  underscoreSeparatedPropName: string;\r\n}) {\r\n  return item[underscoreSeparatedPropName] === NULL_TAG\r\n    ? null\r\n    : item[underscoreSeparatedPropName];\r\n}\r\n\r\nfunction checkRelationalItems({\r\n  relationalItems,\r\n  operator,\r\n  filterValue,\r\n  underscoreSeparatedPropName,\r\n}: {\r\n  relationalItems: Array<any>;\r\n  underscoreSeparatedPropName: string;\r\n  operator: FilterOperator;\r\n  filterValue: any;\r\n}) {\r\n  return relationalItems.some(relationalItem => {\r\n    const relationalItemValue = convertNullStringValuesToNull({\r\n      item: relationalItem,\r\n      underscoreSeparatedPropName,\r\n    });\r\n\r\n    return checkFilter({\r\n      operator: operator,\r\n      filterValue,\r\n      itemValue: relationalItemValue,\r\n    });\r\n  });\r\n}\r\n\r\nexport function applyClientSideFilterToData({\r\n  queryRecordEntry,\r\n  data,\r\n  alias,\r\n  filter: queryRecordEntryFilter,\r\n}: {\r\n  queryRecordEntry: QueryRecordEntry;\r\n  filter: FilterObjectForNode<INode>;\r\n  data: any;\r\n  alias: string;\r\n}) {\r\n  const filterObject = getFlattenedNodeFilterObject(queryRecordEntryFilter);\r\n\r\n  if (filterObject && data[alias]) {\r\n    const filterProperties = Object.keys(filterObject).map<{\r\n      dotSeparatedPropName: string;\r\n      underscoreSeparatedPropName: string;\r\n      propNotInQuery: boolean;\r\n      operators: Array<{ operator: FilterOperator; value: any }>;\r\n      condition: FilterCondition;\r\n      isRelational: boolean;\r\n      relationalKey?: string;\r\n      oneToOne?: boolean;\r\n      oneToMany?: boolean;\r\n    }>(dotSeparatedPropName => {\r\n      const [possibleRelationalKey, ...relationalProperties] = String(\r\n        dotSeparatedPropName\r\n      ).split('.');\r\n      const relational =\r\n        possibleRelationalKey &&\r\n        queryRecordEntry.relational &&\r\n        queryRecordEntry.relational[possibleRelationalKey];\r\n      const propertyFilter: FilterValue<any> =\r\n        filterObject[dotSeparatedPropName];\r\n      const operators = (Object.keys(propertyFilter).filter(\r\n        x => x !== '_condition'\r\n      ) as Array<FilterOperator>).map<{ operator: FilterOperator; value: any }>(\r\n        operator => {\r\n          return { operator, value: propertyFilter[operator] };\r\n        }\r\n      );\r\n      const isRelationalProperty = !!relational;\r\n      const underscoreSeparatedPropName = isRelationalProperty\r\n        ? relationalProperties.join(OBJECT_PROPERTY_SEPARATOR)\r\n        : dotSeparatedPropName.replaceAll('.', OBJECT_PROPERTY_SEPARATOR);\r\n\r\n      const propNotInQuery = isRelationalProperty\r\n        ? relational.properties.includes(underscoreSeparatedPropName) === false\r\n        : queryRecordEntry.properties.includes(underscoreSeparatedPropName) ===\r\n          false;\r\n\r\n      return {\r\n        dotSeparatedPropName,\r\n        underscoreSeparatedPropName,\r\n        propNotInQuery: propNotInQuery,\r\n        operators,\r\n        condition: propertyFilter._condition,\r\n        isRelational: isRelationalProperty,\r\n        relationalKey: possibleRelationalKey,\r\n        oneToOne: (relational && 'oneToOne' in relational) || undefined,\r\n        oneToMany: (relational && 'oneToMany' in relational) || undefined,\r\n      };\r\n    });\r\n\r\n    if (filterProperties.length > 0) {\r\n      update(data, `${alias}.${NODES_PROPERTY_KEY}`, items => {\r\n        if (!isArray(items)) {\r\n          return items;\r\n        }\r\n\r\n        return items.filter(item => {\r\n          const propertyNotInQuery = filterProperties.find(\r\n            x => x.propNotInQuery\r\n          );\r\n          if (!!propertyNotInQuery) {\r\n            throw new FilterPropertyNotDefinedInQueryException({\r\n              filterPropName: propertyNotInQuery.dotSeparatedPropName,\r\n            });\r\n          }\r\n          const orConditions = filterProperties.filter(\r\n            x => x.condition === 'OR'\r\n          );\r\n          const andConditions = filterProperties.filter(\r\n            x => x.condition === 'AND'\r\n          );\r\n\r\n          const hasPassedEveryANDConditions =\r\n            andConditions.every(filter => {\r\n              if (filter.isRelational) {\r\n                return filter.operators.every(({ operator, value }) => {\r\n                  if (filter.oneToOne === true) {\r\n                    const itemValue = filter.relationalKey\r\n                      ? convertNullStringValuesToNull({\r\n                          item: item[filter.relationalKey],\r\n                          underscoreSeparatedPropName:\r\n                            filter.underscoreSeparatedPropName,\r\n                        })\r\n                      : '';\r\n\r\n                    return checkFilter({\r\n                      operator,\r\n                      filterValue: value,\r\n                      itemValue,\r\n                    });\r\n                  } else {\r\n                    const relationalItems: Array<any> = filter.relationalKey\r\n                      ? item[filter.relationalKey][NODES_PROPERTY_KEY] || []\r\n                      : [];\r\n                    return checkRelationalItems({\r\n                      relationalItems,\r\n                      operator,\r\n                      filterValue: value,\r\n                      underscoreSeparatedPropName:\r\n                        filter.underscoreSeparatedPropName,\r\n                    });\r\n                  }\r\n                });\r\n              } else {\r\n                const itemValue =\r\n                  item[filter.underscoreSeparatedPropName] === NULL_TAG\r\n                    ? null\r\n                    : item[filter.underscoreSeparatedPropName];\r\n                return filter.operators.every(({ operator, value }) => {\r\n                  return checkFilter({\r\n                    operator,\r\n                    filterValue: value,\r\n                    itemValue,\r\n                  });\r\n                });\r\n              }\r\n            }) || andConditions.length === 0;\r\n\r\n          if (!hasPassedEveryANDConditions) {\r\n            return false;\r\n          }\r\n\r\n          const hasPassedSomeORConditions =\r\n            orConditions.some(filter => {\r\n              if (filter.isRelational) {\r\n                return filter.operators.some(({ operator, value }) => {\r\n                  if (filter.oneToOne === true) {\r\n                    const itemValue = filter.relationalKey\r\n                      ? convertNullStringValuesToNull({\r\n                          item: item[filter.relationalKey],\r\n                          underscoreSeparatedPropName:\r\n                            filter.underscoreSeparatedPropName,\r\n                        })\r\n                      : '';\r\n\r\n                    return checkFilter({\r\n                      operator,\r\n                      filterValue: value,\r\n                      itemValue,\r\n                    });\r\n                  } else {\r\n                    const relationalItems: Array<any> = filter.relationalKey\r\n                      ? item[filter.relationalKey][NODES_PROPERTY_KEY] || []\r\n                      : [];\r\n                    return checkRelationalItems({\r\n                      relationalItems,\r\n                      operator,\r\n                      filterValue: value,\r\n                      underscoreSeparatedPropName:\r\n                        filter.underscoreSeparatedPropName,\r\n                    });\r\n                  }\r\n                });\r\n              } else {\r\n                const itemValue = filter.relationalKey\r\n                  ? convertNullStringValuesToNull({\r\n                      item,\r\n                      underscoreSeparatedPropName:\r\n                        filter.underscoreSeparatedPropName,\r\n                    })\r\n                  : '';\r\n                return filter.operators.some(({ operator, value }) => {\r\n                  return checkFilter({\r\n                    operator,\r\n                    filterValue: value,\r\n                    itemValue,\r\n                  });\r\n                });\r\n              }\r\n            }) || orConditions.length === 0;\r\n\r\n          return hasPassedEveryANDConditions && hasPassedSomeORConditions;\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nfunction getSortPosition(\r\n  first: string | number,\r\n  second: string | number,\r\n  ascending: boolean\r\n) {\r\n  // equal items sort equally\r\n  if (first === second) {\r\n    return 0;\r\n  }\r\n\r\n  // nulls sort after anything else\r\n  if (first === null) {\r\n    return 1;\r\n  }\r\n  if (second === null) {\r\n    return -1;\r\n  }\r\n\r\n  // otherwise, if we're ascending, lowest sorts first\r\n  if (ascending) {\r\n    return first < second ? -1 : 1;\r\n  }\r\n\r\n  // if descending, highest sorts first\r\n  return first < second ? 1 : -1;\r\n}\r\n\r\nfunction getNodeSortPropertyValue(opts: {\r\n  node: any;\r\n  direction: SortDirection;\r\n  oneToMany?: boolean;\r\n  isRelational: boolean;\r\n  relationalKey?: string;\r\n  underscoreSeparatedPropName: string;\r\n}) {\r\n  return opts.isRelational && opts.relationalKey\r\n    ? opts.oneToMany\r\n      ? ((opts.node[opts.relationalKey][NODES_PROPERTY_KEY] || []) as Array<\r\n          any\r\n        >)\r\n          .sort((a, b) => {\r\n            return getSortPosition(\r\n              getItemSortValue(a, opts.underscoreSeparatedPropName),\r\n              getItemSortValue(b, opts.underscoreSeparatedPropName),\r\n              opts.direction === 'asc'\r\n            );\r\n          })\r\n          .map(x => x[opts.underscoreSeparatedPropName])\r\n          .join('')\r\n      : getItemSortValue(\r\n          opts.node[opts.relationalKey],\r\n          opts.underscoreSeparatedPropName\r\n        )\r\n    : getItemSortValue(opts.node, opts.underscoreSeparatedPropName);\r\n}\r\n\r\nfunction getItemSortValue(item: any, underscoreSeparatedPropertyPath: string) {\r\n  const isValueNull =\r\n    item[underscoreSeparatedPropertyPath] === null ||\r\n    item[underscoreSeparatedPropertyPath] === NULL_TAG;\r\n  if (isValueNull) return null;\r\n  return (\r\n    Number(item[underscoreSeparatedPropertyPath]) ||\r\n    item[underscoreSeparatedPropertyPath]\r\n  );\r\n}\r\n\r\nexport function applyClientSideSortToData({\r\n  queryRecordEntry,\r\n  data,\r\n  alias,\r\n  sort: queryRecordEntrySort,\r\n}: {\r\n  queryRecordEntry: QueryRecordEntry;\r\n  sort: ValidSortForNode<INode>;\r\n  data: any;\r\n  alias: string;\r\n}) {\r\n  const sortObject = getFlattenedNodeSortObject(queryRecordEntrySort);\r\n  if (sortObject && data[alias]) {\r\n    const sorting = orderBy(\r\n      Object.keys(sortObject).map<{\r\n        dotSeparatedPropName: string;\r\n        underscoreSeparatedPropName: string;\r\n        propNotInQuery: boolean;\r\n        isRelational: boolean;\r\n        relationalKey?: string;\r\n        oneToOne?: boolean;\r\n        oneToMany?: boolean;\r\n        priority?: number;\r\n        direction: SortDirection;\r\n      }>((dotSeparatedPropName, index) => {\r\n        const [possibleRelationalKey, ...relationalProperties] = String(\r\n          dotSeparatedPropName\r\n        ).split('.');\r\n        const relational =\r\n          possibleRelationalKey &&\r\n          queryRecordEntry.relational &&\r\n          queryRecordEntry.relational[possibleRelationalKey];\r\n        const isRelational = !!relational;\r\n        const underscoreSeparatedPropName = isRelational\r\n          ? relationalProperties.join(OBJECT_PROPERTY_SEPARATOR)\r\n          : dotSeparatedPropName.replaceAll('.', OBJECT_PROPERTY_SEPARATOR);\r\n\r\n        const propNotInQuery = isRelational\r\n          ? relational.properties.includes(underscoreSeparatedPropName) ===\r\n            false\r\n          : queryRecordEntry.properties.includes(\r\n              underscoreSeparatedPropName\r\n            ) === false;\r\n\r\n        return {\r\n          dotSeparatedPropName,\r\n          underscoreSeparatedPropName,\r\n          propNotInQuery,\r\n          isRelational,\r\n          relationalKey: possibleRelationalKey,\r\n          oneToOne: (relational && 'oneToOne' in relational) || undefined,\r\n          oneToMany: (relational && 'oneToMany' in relational) || undefined,\r\n          priority:\r\n            sortObject[dotSeparatedPropName]._priority || (index + 1) * 10000,\r\n          direction: sortObject[dotSeparatedPropName]._direction || 'asc',\r\n        };\r\n      }),\r\n      x => x.priority,\r\n      'asc'\r\n    );\r\n\r\n    const sortPropertiesNotDefinedInQuery = sorting.filter(\r\n      i => i.propNotInQuery\r\n    );\r\n\r\n    if (sortPropertiesNotDefinedInQuery.length > 0) {\r\n      throw new SortPropertyNotDefinedInQueryException({\r\n        sortPropName: sortPropertiesNotDefinedInQuery[0].dotSeparatedPropName,\r\n      });\r\n    }\r\n\r\n    update(data, `${alias}.${NODES_PROPERTY_KEY}`, items => {\r\n      if (!isArray(items)) {\r\n        return items;\r\n      }\r\n\r\n      return items.sort((first, second) => {\r\n        return sorting\r\n          .map(sort => {\r\n            return getSortPosition(\r\n              getNodeSortPropertyValue({\r\n                node: first,\r\n                direction: sort.direction,\r\n                isRelational: sort.isRelational,\r\n                oneToMany: sort.oneToMany,\r\n                underscoreSeparatedPropName: sort.underscoreSeparatedPropName,\r\n                relationalKey: sort.relationalKey,\r\n              }),\r\n              getNodeSortPropertyValue({\r\n                node: second,\r\n                direction: sort.direction,\r\n                isRelational: sort.isRelational,\r\n                oneToMany: sort.oneToMany,\r\n                underscoreSeparatedPropName: sort.underscoreSeparatedPropName,\r\n                relationalKey: sort.relationalKey,\r\n              }),\r\n              sort.direction === 'asc'\r\n            );\r\n          })\r\n          .reduce((acc, current) => {\r\n            return acc || current;\r\n          }, undefined as never);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport function applyClientSideSortAndFilterToData(\r\n  queryRecord: QueryRecord,\r\n  data: any\r\n) {\r\n  Object.keys(queryRecord).forEach(alias => {\r\n    const queryRecordEntry = queryRecord[alias];\r\n    const containsArrayData = isArray(data[alias][NODES_PROPERTY_KEY]);\r\n\r\n    if (queryRecordEntry.filter) {\r\n      applyClientSideFilterToData({\r\n        queryRecordEntry,\r\n        filter: queryRecordEntry.filter,\r\n        data: data,\r\n        alias,\r\n      });\r\n    }\r\n\r\n    if (queryRecordEntry.sort) {\r\n      applyClientSideSortToData({\r\n        queryRecordEntry,\r\n        sort: queryRecordEntry.sort as ValidSortForNode<INode>,\r\n        data: data,\r\n        alias,\r\n      });\r\n    }\r\n\r\n    const relational = queryRecordEntry.relational;\r\n\r\n    if (relational != null) {\r\n      if (containsArrayData) {\r\n        if (data[alias] && data[alias][NODES_PROPERTY_KEY]) {\r\n          data[alias][NODES_PROPERTY_KEY].forEach((item: any) => {\r\n            applyClientSideSortAndFilterToData(relational, item);\r\n          });\r\n        }\r\n      } else {\r\n        applyClientSideSortAndFilterToData(relational, data[alias]);\r\n      }\r\n    }\r\n  });\r\n}\r\n","import { cloneDeep } from 'lodash';\r\n\r\nimport { DEFAULT_TOKEN_NAME } from './consts';\r\nimport { generateMockNodeDataFromQueryDefinitions } from './generateMockData';\r\nimport {\r\n  convertQueryDefinitionToQueryInfo,\r\n  SubscriptionConfig,\r\n} from './queryDefinitionAdapters';\r\nimport {\r\n  IMMGQL,\r\n  IQueryManager,\r\n  QueryDefinitions,\r\n  QueryOpts,\r\n  QueryReturn,\r\n  QueryDataReturn,\r\n  SubscriptionOpts,\r\n  SubscriptionMeta,\r\n  SubscriptionCanceller,\r\n  IGQLClient,\r\n  EPaginationFilteringSortingInstance,\r\n} from './types';\r\nimport { applyClientSideSortAndFilterToData } from './clientSideOperators';\r\n\r\nlet queryIdx = 0;\r\n\r\nfunction splitQueryDefinitionsByToken<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TQueryDefinitions extends QueryDefinitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget\r\n  >\r\n>(queryDefinitions: TQueryDefinitions): Record<string, TQueryDefinitions> {\r\n  return Object.entries(queryDefinitions).reduce(\r\n    (split, [alias, queryDefinition]) => {\r\n      const tokenName =\r\n        queryDefinition &&\r\n        'tokenName' in queryDefinition &&\r\n        queryDefinition.tokenName != null\r\n          ? queryDefinition.tokenName\r\n          : DEFAULT_TOKEN_NAME;\r\n\r\n      split[tokenName] = split[tokenName] || {};\r\n      split[tokenName][\r\n        alias as keyof TQueryDefinitions\r\n      ] = queryDefinition as TQueryDefinitions[string];\r\n\r\n      return split;\r\n    },\r\n    {} as Record<string, TQueryDefinitions>\r\n  );\r\n}\r\n\r\nexport function removeNullishQueryDefinitions<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TQueryDefinitions extends QueryDefinitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget\r\n  >\r\n>(queryDefinitions: TQueryDefinitions) {\r\n  return Object.entries(queryDefinitions).reduce(\r\n    (acc, [alias, queryDefinition]) => {\r\n      if (!queryDefinition) return acc;\r\n      acc[\r\n        alias as keyof TQueryDefinitions\r\n      ] = queryDefinition as TQueryDefinitions[string];\r\n      return acc;\r\n    },\r\n    {} as TQueryDefinitions\r\n  );\r\n}\r\n\r\nfunction getNullishResults<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TQueryDefinitions extends QueryDefinitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget\r\n  >\r\n>(queryDefinitions: TQueryDefinitions) {\r\n  return Object.entries(queryDefinitions).reduce(\r\n    (acc, [key, queryDefinition]) => {\r\n      if (queryDefinition == null)\r\n        acc[key as keyof TQueryDefinitions] = null as QueryDataReturn<\r\n          TQueryDefinitions\r\n        >[keyof TQueryDefinitions];\r\n\r\n      return acc;\r\n    },\r\n    {} as QueryDataReturn<TQueryDefinitions>\r\n  );\r\n}\r\n\r\n/**\r\n * Declared as a factory function so that \"subscribe\" can generate its own querier which shares the same query manager\r\n * Which ensures that the socket messages are applied to the correct base set of results\r\n */\r\nexport function generateQuerier({\r\n  mmGQLInstance,\r\n  queryManager,\r\n}: {\r\n  mmGQLInstance: IMMGQL;\r\n  queryManager?: IQueryManager;\r\n}) {\r\n  return async function query<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget,\r\n    TQueryDefinitions extends QueryDefinitions<\r\n      TNode,\r\n      TMapFn,\r\n      TQueryDefinitionTarget\r\n    >\r\n  >(\r\n    queryDefinitions: TQueryDefinitions,\r\n    opts?: QueryOpts<TQueryDefinitions>\r\n  ): Promise<QueryReturn<TQueryDefinitions>> {\r\n    const startStack = new Error().stack as string;\r\n    const queryId = opts?.queryId || `query${queryIdx++}`;\r\n\r\n    function getError(error: any, stack?: string) {\r\n      // https://pavelevstigneev.medium.com/capture-javascript-async-stack-traces-870d1b9f6d39\r\n      error.stack =\r\n        `\\n` +\r\n        (stack || error.stack) +\r\n        '\\n' +\r\n        startStack.substring(startStack.indexOf('\\n') + 1);\r\n\r\n      return error;\r\n    }\r\n\r\n    function getToken(tokenName: string) {\r\n      const token = mmGQLInstance.getToken({ tokenName });\r\n\r\n      if (!token) {\r\n        throw new Error(\r\n          `No token registered with the name \"${tokenName}\".\\n` +\r\n            'Please register this token prior to using it with setToken({ tokenName, token })) '\r\n        );\r\n      }\r\n\r\n      return token;\r\n    }\r\n\r\n    const nonNullishQueryDefinitions = removeNullishQueryDefinitions(\r\n      queryDefinitions\r\n    );\r\n    const nullishResults = getNullishResults(queryDefinitions);\r\n    const queryDefinitionsSplitByToken = splitQueryDefinitionsByToken(\r\n      nonNullishQueryDefinitions\r\n    );\r\n\r\n    async function performQueries() {\r\n      const allResults = await Promise.all(\r\n        Object.entries(queryDefinitionsSplitByToken).map(\r\n          async ([tokenName, queryDefinitions]) => {\r\n            let response;\r\n            const { queryGQL, queryRecord } = convertQueryDefinitionToQueryInfo(\r\n              {\r\n                queryDefinitions: queryDefinitions,\r\n                queryId: queryId + '_' + tokenName,\r\n                useServerSidePaginationFilteringSorting:\r\n                  mmGQLInstance.paginationFilteringSortingInstance ===\r\n                  EPaginationFilteringSortingInstance.SERVER,\r\n              }\r\n            );\r\n\r\n            if (mmGQLInstance.generateMockData) {\r\n              response = generateMockNodeDataFromQueryDefinitions({\r\n                queryDefinitions,\r\n                queryId,\r\n              });\r\n            } else if (mmGQLInstance.enableQuerySlimming) {\r\n              response = await mmGQLInstance.QuerySlimmer.query({\r\n                queryId: `${queryId}_${tokenName}`,\r\n                queryDefinitions,\r\n                useServerSidePaginationFilteringSorting:\r\n                  mmGQLInstance.paginationFilteringSortingInstance ===\r\n                  EPaginationFilteringSortingInstance.SERVER,\r\n                tokenName,\r\n                queryOpts: opts,\r\n              });\r\n            } else {\r\n              const queryOpts: Parameters<IGQLClient['query']>[0] = {\r\n                gql: queryGQL,\r\n                token: getToken(tokenName),\r\n              };\r\n              if (opts && 'batchKey' in opts) {\r\n                queryOpts.batchKey = opts.batchKey;\r\n              }\r\n              response = await mmGQLInstance.gqlClient.query(queryOpts);\r\n            }\r\n\r\n            if (\r\n              mmGQLInstance.paginationFilteringSortingInstance ===\r\n              EPaginationFilteringSortingInstance.CLIENT\r\n            ) {\r\n              // clone the object only if we are running the unit test\r\n              // to simulate that we are receiving new response\r\n              // to prevent mutating the object multiple times when filtering or sorting\r\n              // resulting into incorrect results in our specs\r\n              const filteredAndSortedResponse =\r\n                process.env.NODE_ENV === 'test'\r\n                  ? cloneDeep(response)\r\n                  : response;\r\n              applyClientSideSortAndFilterToData(\r\n                queryRecord,\r\n                filteredAndSortedResponse\r\n              );\r\n\r\n              return filteredAndSortedResponse;\r\n            }\r\n\r\n            return response;\r\n          }\r\n        )\r\n      );\r\n\r\n      return allResults.reduce(\r\n        (acc, resultsForToken) => {\r\n          return {\r\n            ...acc,\r\n            ...resultsForToken,\r\n          };\r\n        },\r\n        { ...nullishResults }\r\n      );\r\n    }\r\n\r\n    try {\r\n      if (!Object.keys(nonNullishQueryDefinitions).length) {\r\n        opts?.onData && opts.onData({ results: { ...nullishResults } });\r\n\r\n        return {\r\n          data: { ...nullishResults },\r\n          error: undefined,\r\n        };\r\n      }\r\n      const results = await performQueries();\r\n\r\n      const qM =\r\n        queryManager ||\r\n        new mmGQLInstance.QueryManager(\r\n          convertQueryDefinitionToQueryInfo({\r\n            queryDefinitions: nonNullishQueryDefinitions,\r\n            queryId,\r\n            useServerSidePaginationFilteringSorting:\r\n              mmGQLInstance.paginationFilteringSortingInstance ===\r\n              EPaginationFilteringSortingInstance.SERVER,\r\n          }).queryRecord\r\n        );\r\n      try {\r\n        qM.onQueryResult({\r\n          queryId,\r\n          queryResult: results,\r\n        });\r\n      } catch (e) {\r\n        const error = getError(\r\n          new Error(`Error applying query results`),\r\n          (e as any).stack\r\n        );\r\n\r\n        if (opts?.onError) {\r\n          opts.onError(error);\r\n          return { data: {} as QueryDataReturn<TQueryDefinitions>, error };\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      const qmResults = qM.getResults() as QueryDataReturn<TQueryDefinitions>;\r\n\r\n      opts?.onData &&\r\n        opts.onData({ results: { ...nullishResults, ...qmResults } });\r\n\r\n      return {\r\n        data: { ...nullishResults, ...qmResults } as QueryDataReturn<\r\n          TQueryDefinitions\r\n        >,\r\n        error: undefined,\r\n      };\r\n    } catch (e) {\r\n      const error = getError(\r\n        new Error(`Error querying data`),\r\n        (e as any).stack\r\n      );\r\n      if (opts?.onError) {\r\n        opts.onError(error);\r\n        return { data: {} as QueryDataReturn<TQueryDefinitions>, error };\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nlet subscriptionId = 0;\r\nexport function generateSubscriber(mmGQLInstance: IMMGQL) {\r\n  return async function subscribe<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget,\r\n    TQueryDefinitions extends QueryDefinitions<\r\n      TNode,\r\n      TMapFn,\r\n      TQueryDefinitionTarget\r\n    >,\r\n    TSubscriptionOpts extends SubscriptionOpts<TQueryDefinitions>\r\n  >(\r\n    queryDefinitions: TQueryDefinitions,\r\n    opts: TSubscriptionOpts\r\n  ): Promise<\r\n    TSubscriptionOpts extends { skipInitialQuery: true }\r\n      ? SubscriptionMeta\r\n      : { data: QueryDataReturn<TQueryDefinitions> } & SubscriptionMeta\r\n  > {\r\n    type ReturnType = TSubscriptionOpts extends {\r\n      skipInitialQuery: true;\r\n    }\r\n      ? SubscriptionMeta\r\n      : { data: QueryDataReturn<TQueryDefinitions> } & SubscriptionMeta;\r\n\r\n    // https://pavelevstigneev.medium.com/capture-javascript-async-stack-traces-870d1b9f6d39\r\n    const startStack = new Error().stack as string;\r\n    const queryId = opts?.queryId || `query${subscriptionId++}`;\r\n    const nonNullishQueryDefinitions = removeNullishQueryDefinitions(\r\n      queryDefinitions\r\n    );\r\n    const nullishResults = getNullishResults(queryDefinitions);\r\n\r\n    if (!Object.keys(nonNullishQueryDefinitions).length) {\r\n      opts.onData({ results: { ...nullishResults } });\r\n      return { data: { ...nullishResults }, unsub: () => {} } as ReturnType;\r\n    }\r\n    const {\r\n      queryGQL,\r\n      queryRecord,\r\n      queryParamsString,\r\n    } = convertQueryDefinitionToQueryInfo({\r\n      queryDefinitions: nonNullishQueryDefinitions,\r\n      queryId,\r\n      useServerSidePaginationFilteringSorting:\r\n        mmGQLInstance.paginationFilteringSortingInstance ===\r\n        EPaginationFilteringSortingInstance.SERVER,\r\n    });\r\n\r\n    opts.onQueryInfoConstructed &&\r\n      opts.onQueryInfoConstructed({ queryGQL, queryId, queryParamsString });\r\n\r\n    function getError(error: any, stack?: any) {\r\n      // https://pavelevstigneev.medium.com/capture-javascript-async-stack-traces-870d1b9f6d39\r\n      error.stack =\r\n        '\\n' +\r\n        (stack || error.stack) +\r\n        '\\n' +\r\n        startStack.substring(startStack.indexOf('\\n') + 1);\r\n\r\n      return error;\r\n    }\r\n\r\n    const queryManager = new mmGQLInstance.QueryManager(queryRecord, {\r\n      onPaginate: opts.onPaginate,\r\n    });\r\n\r\n    function updateQueryManagerWithSubscriptionMessage(data: {\r\n      message: Record<string, any>;\r\n      subscriptionConfig: SubscriptionConfig;\r\n    }) {\r\n      let node;\r\n      let operation;\r\n      try {\r\n        node = data.subscriptionConfig.extractNodeFromSubscriptionMessage(\r\n          data.message\r\n        );\r\n        operation = data.subscriptionConfig.extractOperationFromSubscriptionMessage(\r\n          data.message\r\n        );\r\n        // TODO: https://tractiontools.atlassian.net/browse/TTD-377\r\n        queryManager.onSubscriptionMessage({\r\n          node,\r\n          operation,\r\n          queryId: queryId,\r\n          subscriptionAlias: data.subscriptionConfig.alias,\r\n        });\r\n      } catch (e) {\r\n        const error = getError(\r\n          new Error(`Error applying subscription message`),\r\n          (e as any).stack\r\n        );\r\n\r\n        if (opts.onError) {\r\n          opts.onError(error);\r\n        } else {\r\n          console.error(error);\r\n        }\r\n      }\r\n    }\r\n\r\n    function getToken(tokenName: string) {\r\n      const token = mmGQLInstance.getToken({ tokenName });\r\n\r\n      if (!token) {\r\n        throw new Error(\r\n          `No token registered with the name \"${tokenName}\".\\n` +\r\n            'Please register this token prior to using it with setToken({ tokenName, token })) '\r\n        );\r\n      }\r\n\r\n      return token;\r\n    }\r\n\r\n    let subscriptionCancellers: Array<SubscriptionCanceller> = [];\r\n    // Subscriptions are initialized immediately, rather than after the query resolves, to prevent an edge case where an update to a node happens\r\n    // while the data for that node is being transfered from the backend to the client. This would result in a missed update.\r\n    // However, we must be careful to not call opts.onData with any subscription messages before the query resolves,\r\n    // because a subscription message only includes info about the node that changed, not all data being subscribed to,\r\n    // which means the consumer of this API would receive and incomplete data set in this edge case.\r\n    // This flag prevents that, by short-circuiting opts.onData in subscription messages, if the query has not resolved\r\n    let mustAwaitQuery = !opts.skipInitialQuery;\r\n    const messageQueue: Array<{\r\n      message: Record<string, any>;\r\n      subscriptionConfig: SubscriptionConfig;\r\n    }> = [];\r\n    const queryDefinitionsSplitByToken = splitQueryDefinitionsByToken(\r\n      nonNullishQueryDefinitions\r\n    );\r\n    const queryDefinitionsSplitByTokenEntries = Object.entries(\r\n      queryDefinitionsSplitByToken\r\n    );\r\n\r\n    function initSubs() {\r\n      queryDefinitionsSplitByTokenEntries.forEach(\r\n        ([tokenName, queryDefinitions]) => {\r\n          const { subscriptionConfigs } = convertQueryDefinitionToQueryInfo({\r\n            queryDefinitions,\r\n            queryId: queryId + '_' + tokenName,\r\n            useServerSidePaginationFilteringSorting:\r\n              mmGQLInstance.paginationFilteringSortingInstance ===\r\n              EPaginationFilteringSortingInstance.SERVER,\r\n          });\r\n\r\n          subscriptionCancellers.push(\r\n            ...subscriptionConfigs.map(subscriptionConfig => {\r\n              return mmGQLInstance.gqlClient.subscribe({\r\n                gql: subscriptionConfig.gql,\r\n                token: getToken(tokenName),\r\n                onMessage: message => {\r\n                  if (mustAwaitQuery) {\r\n                    messageQueue.push({ message, subscriptionConfig });\r\n                    return;\r\n                  }\r\n\r\n                  updateQueryManagerWithSubscriptionMessage({\r\n                    message,\r\n                    subscriptionConfig,\r\n                  });\r\n\r\n                  // @TODO When called with skipInitialQuery, results should be null\r\n                  // and we should simply expose a \"delta\" from the message\r\n                  // probably don't need a query manager in that case either.\r\n                  opts.onData({\r\n                    results: {\r\n                      ...nullishResults,\r\n                      ...queryManager.getResults(),\r\n                    } as QueryDataReturn<TQueryDefinitions>,\r\n                  });\r\n                },\r\n                onError: e => {\r\n                  // Can never throw here. The dev consuming this would have no way of catching it\r\n                  // To catch an error in a subscription they must provide onError\r\n                  const error = getError(\r\n                    new Error(`Error in a subscription message`),\r\n                    e.stack\r\n                  );\r\n\r\n                  if (opts.onError) {\r\n                    opts.onError(error);\r\n                  } else {\r\n                    console.error(error);\r\n                  }\r\n                },\r\n              });\r\n            })\r\n          );\r\n        }\r\n      );\r\n    }\r\n\r\n    function unsub() {\r\n      subscriptionCancellers.forEach(cancel => cancel());\r\n      queryDefinitionsSplitByTokenEntries.forEach(\r\n        ([tokenName, queryDefinitions]) => {\r\n          const { queryRecord } = convertQueryDefinitionToQueryInfo({\r\n            queryDefinitions,\r\n            queryId: queryId + '_' + tokenName,\r\n            useServerSidePaginationFilteringSorting:\r\n              mmGQLInstance.paginationFilteringSortingInstance ===\r\n              EPaginationFilteringSortingInstance.SERVER,\r\n          });\r\n          mmGQLInstance.QuerySlimmer.onSubscriptionCancelled(queryRecord);\r\n        }\r\n      );\r\n    }\r\n\r\n    try {\r\n      if (!mmGQLInstance.generateMockData) {\r\n        initSubs();\r\n      }\r\n      opts.onSubscriptionInitialized && opts.onSubscriptionInitialized(unsub);\r\n    } catch (e) {\r\n      const error = getError(\r\n        new Error(`Error initializating subscriptions`),\r\n        (e as any).stack\r\n      );\r\n\r\n      if (opts?.onError) {\r\n        opts.onError(error);\r\n        return { data: {}, unsub, error } as ReturnType;\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    if (opts.skipInitialQuery) {\r\n      return { unsub } as ReturnType;\r\n    } else {\r\n      const query = generateQuerier({ mmGQLInstance, queryManager });\r\n      try {\r\n        const queryOpts: Parameters<typeof query>[1] = {\r\n          queryId: opts.queryId,\r\n        };\r\n        if (opts && 'batchKey' in opts) {\r\n          queryOpts.batchKey = opts.batchKey;\r\n        }\r\n        // this query method will post its results to the queryManager declared above\r\n        await query(queryDefinitions, queryOpts);\r\n      } catch (e) {\r\n        const error = getError(\r\n          new Error(`Error querying initial data set`),\r\n          (e as any).stack\r\n        );\r\n\r\n        if (opts?.onError) {\r\n          opts.onError(error);\r\n          return { data: {}, unsub, error } as ReturnType;\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      if (mustAwaitQuery) {\r\n        mustAwaitQuery = false;\r\n        messageQueue.forEach(updateQueryManagerWithSubscriptionMessage);\r\n        messageQueue.length = 0;\r\n      }\r\n\r\n      const qmResults = queryManager.getResults() as QueryDataReturn<\r\n        TQueryDefinitions\r\n      >;\r\n\r\n      opts.onData({ results: { ...nullishResults, ...qmResults } });\r\n\r\n      return {\r\n        data: { ...nullishResults, ...qmResults },\r\n        unsub,\r\n        error: null,\r\n      } as ReturnType;\r\n    }\r\n  };\r\n}\r\n","import { NodesCollectionPageOutOfBoundsException } from './exceptions';\r\n\r\nfunction getPageResults<T>(opts: {\r\n  items: T[];\r\n  page: number;\r\n  itemsPerPage: number;\r\n}) {\r\n  const startIndex = opts.page === 1 ? 0 : (opts.page - 1) * opts.itemsPerPage;\r\n  return Array.from(opts.items || []).slice(\r\n    startIndex,\r\n    startIndex + opts.itemsPerPage\r\n  );\r\n}\r\n\r\nexport type OnPaginateCallback = (opts: {\r\n  page: number;\r\n  itemsPerPage: number;\r\n}) => void;\r\n\r\ninterface NodesCollectionOpts<T> {\r\n  onPaginate?: OnPaginateCallback;\r\n  itemsPerPage: number;\r\n  page: number;\r\n  items: T[];\r\n}\r\nexport class NodesCollection<T> {\r\n  public itemsPerPage: number;\r\n  public page: number;\r\n  private onPaginate?: OnPaginateCallback;\r\n  private items: T[];\r\n\r\n  constructor(opts: NodesCollectionOpts<T>) {\r\n    this.itemsPerPage = opts.itemsPerPage;\r\n    this.page = opts.page;\r\n    this.items = opts.items;\r\n    this.onPaginate = opts.onPaginate;\r\n  }\r\n\r\n  public get nodes() {\r\n    return getPageResults({\r\n      items: this.items,\r\n      page: this.page,\r\n      itemsPerPage: this.itemsPerPage,\r\n    });\r\n  }\r\n\r\n  public get totalPages() {\r\n    return Math.ceil((this.items || []).length / this.itemsPerPage);\r\n  }\r\n\r\n  public goToPage(page: number) {\r\n    if (page < 1 || page > this.totalPages) {\r\n      throw new NodesCollectionPageOutOfBoundsException({ page });\r\n    }\r\n    this.page = page;\r\n    this.onPaginate &&\r\n      this.onPaginate({ page, itemsPerPage: this.itemsPerPage });\r\n  }\r\n\r\n  public get hasNextPage() {\r\n    return this.totalPages > this.page;\r\n  }\r\n\r\n  public get hasPreviousPage() {\r\n    return this.page > 1;\r\n  }\r\n\r\n  public goToNextPage() {\r\n    if (!this.hasNextPage) {\r\n      return;\r\n    }\r\n    this.goToPage(this.page + 1);\r\n  }\r\n\r\n  public goToPreviousPage() {\r\n    if (!this.hasPreviousPage) {\r\n      return;\r\n    }\r\n    this.goToPage(this.page - 1);\r\n  }\r\n}\r\n","export function getMutationNameFromOperations(\r\n  operations: Array<{ name?: string }>,\r\n  fallback: string\r\n) {\r\n  const operationNames = operations\r\n    .filter(operation => 'name' in operation && !!operation.name)\r\n    .map(operation => {\r\n      if ('name' in operation) {\r\n        return operation.name;\r\n      } else {\r\n        throw Error('Expected an operation name here');\r\n      }\r\n    });\r\n\r\n  if (operationNames.length) {\r\n    return operationNames.join('__');\r\n  }\r\n\r\n  return fallback;\r\n}\r\n","import { EdgePermissions } from './types';\r\n\r\nexport function getEdgePermissionsString(permissions: EdgePermissions): string {\r\n  return `\r\n    view: ${permissions.view ? 'true' : 'false'},\r\n    edit: ${permissions.edit ? 'true' : 'false'},\r\n    manage: ${permissions.manage ? 'true' : 'false'},\r\n    terminate: ${permissions.terminate ? 'true' : 'false'},\r\n    addChild: ${permissions.addChild ? 'true' : 'false'}\r\n  `;\r\n}\r\n","import { DocumentNode, gql } from '@apollo/client/core';\r\nimport { getMutationNameFromOperations } from '../getMutationNameFromOperations';\r\nimport {\r\n  CreateEdgeOperation,\r\n  CreateEdgeOpts,\r\n  CreateEdgesOperation,\r\n  EdgeProperties,\r\n} from './types';\r\nimport { getEdgePermissionsString } from './utilities';\r\n\r\nexport function createEdge(edge: CreateEdgeOpts): CreateEdgeOperation {\r\n  return {\r\n    type: 'createEdge',\r\n    ...edge,\r\n    operationName: 'AttachEdge',\r\n  };\r\n}\r\n\r\nexport function createEdges(\r\n  edges: CreateEdgesOperation['edges']\r\n): CreateEdgesOperation {\r\n  return {\r\n    type: 'createEdges',\r\n    operationName: 'AttachEdge',\r\n    edges,\r\n  };\r\n}\r\n\r\nexport function getMutationsFromEdgeCreateOperations(\r\n  operations: Array<CreateEdgeOperation | CreateEdgesOperation>\r\n): Array<DocumentNode> {\r\n  return operations.flatMap(operation => {\r\n    if (operation.type === 'createEdge') {\r\n      return convertEdgeCreationOperationToMutationArguments({\r\n        ...operation.edge,\r\n        name: operation.name,\r\n      });\r\n    } else if (operation.type === 'createEdges') {\r\n      return operation.edges.map(({ edge }) =>\r\n        convertEdgeCreationOperationToMutationArguments(edge)\r\n      );\r\n    }\r\n    throw Error(`Operation not recognized: \"${operation}\"`);\r\n  });\r\n}\r\n\r\nfunction convertEdgeCreationOperationToMutationArguments(\r\n  opts: EdgeProperties & { name?: string }\r\n): DocumentNode {\r\n  const edge = `{\\ntype: \"${opts.type || 'access'}\",${getEdgePermissionsString(\r\n    opts.permissions\r\n  )}}`;\r\n  const name = getMutationNameFromOperations([opts], 'CreateEdge');\r\n\r\n  return gql`\r\n    mutation ${name} {\r\n        AttachEdge(\r\n            newSourceId: \"${opts.from}\"\r\n            targetId: \"${opts.to}\"\r\n            edge: ${edge}\r\n            transactional: true\r\n        )\r\n    }`;\r\n}\r\n","import { DocumentNode, gql } from '@apollo/client/core';\r\nimport { getMutationNameFromOperations } from '../getMutationNameFromOperations';\r\nimport {\r\n  DropEdgeOpts,\r\n  DropEdgeOperation,\r\n  DropEdgeProperties,\r\n  DropEdgesOperation,\r\n} from './types';\r\n\r\nexport function dropEdge(edge: DropEdgeOpts): DropEdgeOperation {\r\n  return {\r\n    type: 'dropEdge',\r\n    operationName: 'DropEdge',\r\n    ...edge,\r\n  };\r\n}\r\n\r\nexport function dropEdges(edges: Array<DropEdgeOpts>): DropEdgesOperation {\r\n  return {\r\n    type: 'dropEdges',\r\n    operationName: 'DropEdge',\r\n    edges,\r\n  };\r\n}\r\n\r\nexport function getMutationsFromEdgeDropOperations(\r\n  operations: Array<DropEdgeOperation | DropEdgesOperation>\r\n): Array<DocumentNode> {\r\n  return operations.flatMap(operation => {\r\n    if (operation.type === 'dropEdge') {\r\n      return convertEdgeDropOperationToMutationArguments({\r\n        ...operation.edge,\r\n        name: operation.name,\r\n      });\r\n    } else if (operation.type === 'dropEdges') {\r\n      return operation.edges.map(operation =>\r\n        convertEdgeDropOperationToMutationArguments({\r\n          ...operation.edge,\r\n          name: operation.name,\r\n        })\r\n      );\r\n    }\r\n\r\n    throw Error(`Operation not recognized: \"${operation}\"`);\r\n  });\r\n}\r\n\r\nfunction convertEdgeDropOperationToMutationArguments(\r\n  opts: DropEdgeProperties & { name?: string }\r\n): DocumentNode {\r\n  const name = getMutationNameFromOperations([opts], 'DropEdge');\r\n\r\n  return gql`\r\n    mutation ${name} {\r\n        DropEdge(\r\n            sourceId: \"${opts.from}\"\r\n            targetId: \"${opts.to}\"\r\n            edgeType: \"${opts.type || 'access'}\"\r\n            transactional: true\r\n        )\r\n    }`;\r\n}\r\n","import { DocumentNode, gql } from '@apollo/client/core';\r\nimport { getMutationNameFromOperations } from '../getMutationNameFromOperations';\r\nimport {\r\n  ReplaceEdgeOperation,\r\n  ReplaceEdgeOpts,\r\n  ReplaceEdgeProperties,\r\n  ReplaceEdgesOperation,\r\n} from './types';\r\nimport { getEdgePermissionsString } from './utilities';\r\n\r\nexport function replaceEdge(edge: ReplaceEdgeOpts): ReplaceEdgeOperation {\r\n  return {\r\n    type: 'replaceEdge',\r\n    operationName: 'ReplaceEdge',\r\n    ...edge,\r\n  };\r\n}\r\n\r\nexport function replaceEdges(\r\n  edges: Array<{\r\n    edge: ReplaceEdgeProperties & { name?: string };\r\n    onSuccess?: () => any;\r\n  }>\r\n): ReplaceEdgesOperation {\r\n  return {\r\n    type: 'replaceEdges',\r\n    operationName: 'ReplaceEdge',\r\n    edges,\r\n  };\r\n}\r\n\r\nexport function getMutationsFromEdgeReplaceOperations(\r\n  operations: Array<ReplaceEdgeOperation | ReplaceEdgesOperation>\r\n): Array<DocumentNode> {\r\n  return operations.flatMap(operation => {\r\n    if (operation.type === 'replaceEdge') {\r\n      return convertEdgeReplaceOperationToMutationArguments({\r\n        ...operation.edge,\r\n        name: operation.name,\r\n      });\r\n    } else if (operation.type === 'replaceEdges') {\r\n      return operation.edges.map(({ edge }) =>\r\n        convertEdgeReplaceOperationToMutationArguments(edge)\r\n      );\r\n    }\r\n    throw Error(`Operation not recognized: \"${operation}\"`);\r\n  });\r\n}\r\n\r\nfunction convertEdgeReplaceOperationToMutationArguments(\r\n  opts: ReplaceEdgeProperties & { name?: string }\r\n): DocumentNode {\r\n  const name = getMutationNameFromOperations([opts], 'ReplaceEdge');\r\n  const edge = `{\\ntype: \"${opts.type || 'access'}\", ${getEdgePermissionsString(\r\n    opts.permissions\r\n  )}}`;\r\n\r\n  return gql`\r\n    mutation ${name} {\r\n        ReplaceEdge(\r\n            currentSourceId: \"${opts.current}\"\r\n            newSourceId: \"${opts.from}\"\r\n            targetId: \"${opts.to}\"\r\n            edge: ${edge}\r\n            transactional: true\r\n        )\r\n    }`;\r\n}\r\n","import { DocumentNode, gql } from '@apollo/client/core';\r\nimport { getMutationNameFromOperations } from '../getMutationNameFromOperations';\r\nimport {\r\n  EdgeProperties,\r\n  UpdateEdgeOperation,\r\n  UpdateEdgeOpts,\r\n  UpdateEdgesOperation,\r\n} from './types';\r\nimport { getEdgePermissionsString } from './utilities';\r\n\r\nexport function updateEdge(edge: UpdateEdgeOpts): UpdateEdgeOperation {\r\n  return {\r\n    type: 'updateEdge',\r\n    operationName: 'UpdateEdge',\r\n    ...edge,\r\n  };\r\n}\r\n\r\nexport function updateEdges(\r\n  edges: Array<{\r\n    edge: EdgeProperties & { name?: string };\r\n    onSuccess?: () => any;\r\n  }>\r\n): UpdateEdgesOperation {\r\n  return {\r\n    type: 'updateEdges',\r\n    operationName: 'UpdateEdge',\r\n    edges,\r\n  };\r\n}\r\n\r\nexport function getMutationsFromEdgeUpdateOperations(\r\n  operations: Array<UpdateEdgeOperation | UpdateEdgesOperation>\r\n): Array<DocumentNode> {\r\n  return operations.flatMap(operation => {\r\n    if (operation.type === 'updateEdge') {\r\n      return convertEdgeUpdateOperationToMutationArguments({\r\n        ...operation.edge,\r\n        name: operation.name,\r\n      });\r\n    } else if (operation.type === 'updateEdges') {\r\n      return operation.edges.map(({ edge }) =>\r\n        convertEdgeUpdateOperationToMutationArguments(edge)\r\n      );\r\n    }\r\n\r\n    throw Error(`Operation not recognized: \"${operation}\"`);\r\n  });\r\n}\r\n\r\nfunction convertEdgeUpdateOperationToMutationArguments(\r\n  opts: EdgeProperties & { name?: string }\r\n): DocumentNode {\r\n  const edge = `{\\ntype: \"${opts.type || 'access'}\", ${getEdgePermissionsString(\r\n    opts.permissions\r\n  )}}`;\r\n  const name = getMutationNameFromOperations([opts], 'UpdateEdge');\r\n\r\n  return gql`\r\n    mutation ${name} {\r\n        UpdateEdge(\r\n            sourceId: \"${opts.from}\"\r\n            targetId: \"${opts.to}\"\r\n            edge: ${edge}\r\n            transactional: true\r\n        )\r\n    }`;\r\n}\r\n","import { OBJECT_IDENTIFIER, OBJECT_PROPERTY_SEPARATOR } from '../dataTypes';\r\nimport { Maybe } from '../types';\r\nimport { AdditionalEdgeProperties } from './edges/types';\r\n\r\nexport const JSON_TAG = '__JSON__';\r\n\r\n/**\r\n * Takes the json representation of a node's data and prepares it to be sent to SM\r\n *\r\n * @param nodeData an object with arbitrary data\r\n * @returns stringified params ready for mutation\r\n */\r\nexport function convertNodeDataToSMPersistedData(\r\n  nodeData: Record<string, any>,\r\n  opts?: { skipBooleanStringWrapping?: boolean }\r\n): string {\r\n  const parsedData = prepareForBE(nodeData);\r\n\r\n  const stringified = Object.entries(parsedData).reduce(\r\n    (acc, [key, value], i) => {\r\n      if (i > 0) {\r\n        acc += '\\n';\r\n      }\r\n      if (key === 'childNodes' || key === 'additionalEdges') {\r\n        return acc + `${key}: [\\n{\\n${value.join('\\n}\\n{\\n')}\\n}\\n]`;\r\n      }\r\n\r\n      const shouldBeRawBoolean =\r\n        (value === 'true' || value === 'false') &&\r\n        !!opts?.skipBooleanStringWrapping;\r\n\r\n      return (\r\n        acc +\r\n        `${key}: ${value === null || shouldBeRawBoolean ? value : `\"${value}\"`}`\r\n      );\r\n    },\r\n    ``\r\n  );\r\n  return stringified;\r\n}\r\n\r\nfunction escapeText(text: string): string {\r\n  return text\r\n    .replace(/\\\\/g, '\\\\\\\\')\r\n    .replace(/\"/g, '\\\\\"')\r\n    .replace(/\\n/g, '\\\\n');\r\n}\r\n\r\n/**\r\n * Takes an object node value and flattens it to be sent to SM\r\n *\r\n * @param obj an object with arbitrary data\r\n * @param parentKey if the value is a nested object, the key of the parent is passed in order to prepend it to the child key\r\n * @param omitObjectIdentifier skip including __object__ for identifying parent objects,\r\n *  used to construct filters since there we don't care what the parent property is set to\r\n * @returns a flat object where the keys are of \"key__dot__value\" syntax\r\n *\r\n * For example:\r\n * ```typescript\r\n * const obj = {settings: {schedule: {day: 'Monday'} } }\r\n *  const result = prepareValueForBE(obj)\r\n * ```\r\n * The result will be:\r\n *  ```typescript\r\n *  {\r\n * settings: '__object__',\r\n * settings__dot__schedule: '__object__',\r\n * settings__dot__schedule__dot__day: 'Monday',\r\n * }\r\n * ```\r\n */\r\nexport function prepareObjectForBE(\r\n  obj: Record<string, any>,\r\n  opts?: {\r\n    parentKey?: string;\r\n    omitObjectIdentifier?: boolean;\r\n  }\r\n) {\r\n  return Object.entries(obj).reduce((acc, [key, val]) => {\r\n    const preparedKey = opts?.parentKey\r\n      ? `${opts.parentKey}${OBJECT_PROPERTY_SEPARATOR}${key}`\r\n      : key;\r\n\r\n    if (typeof val === 'object' && val != null && !Array.isArray(val)) {\r\n      if (!opts || !opts.omitObjectIdentifier) {\r\n        acc[preparedKey] = OBJECT_IDENTIFIER;\r\n      }\r\n\r\n      acc = {\r\n        ...acc,\r\n        ...Object.entries(val).reduce((acc, [key, val]) => {\r\n          return {\r\n            ...acc,\r\n            ...convertPropertyToBE({\r\n              key: `${preparedKey}${OBJECT_PROPERTY_SEPARATOR}${key}`,\r\n              value: val,\r\n              ...opts,\r\n            }),\r\n          };\r\n        }, {}),\r\n      };\r\n    } else {\r\n      acc = {\r\n        ...acc,\r\n        ...convertPropertyToBE({\r\n          key: preparedKey,\r\n          value: val,\r\n          ...opts,\r\n        }),\r\n      };\r\n    }\r\n\r\n    return acc;\r\n  }, {} as Record<string, any>);\r\n}\r\n\r\nfunction convertPropertyToBE(opts: {\r\n  key: string;\r\n  value: any;\r\n  omitObjectIdentifier?: boolean;\r\n}): Record<string, Maybe<string | boolean>> {\r\n  if (opts.value === null) {\r\n    return { [opts.key]: null };\r\n  } else if (Array.isArray(opts.value)) {\r\n    return {\r\n      [opts.key]: `${JSON_TAG}${escapeText(JSON.stringify(opts.value))}`,\r\n    };\r\n  } else if (typeof opts.value === 'object') {\r\n    return prepareObjectForBE(\r\n      { [opts.key]: opts.value },\r\n      { omitObjectIdentifier: opts.omitObjectIdentifier }\r\n    );\r\n  } else if (typeof opts.value === 'string') {\r\n    return { [opts.key]: escapeText(opts.value) };\r\n  } else if (\r\n    typeof opts.value === 'boolean' ||\r\n    typeof opts.value === 'number'\r\n  ) {\r\n    if (typeof opts.value === 'number' && isNaN(opts.value)) {\r\n      return { [opts.key]: null };\r\n    }\r\n    return { [opts.key]: String(opts.value) };\r\n  } else {\r\n    throw Error(\r\n      `I don't yet know how to handle feData of type \"${typeof opts.value}\"`\r\n    );\r\n  }\r\n}\r\n\r\nfunction convertEdgeDirectionNames(edgeItem: AdditionalEdgeProperties) {\r\n  if (edgeItem.hasOwnProperty('to')) {\r\n    const { to, ...restOfEdgeItem } = edgeItem;\r\n\r\n    return {\r\n      ...restOfEdgeItem,\r\n      targetId: to,\r\n    };\r\n  } else if (edgeItem.hasOwnProperty('from')) {\r\n    const { from, ...restOfEdgeItem } = edgeItem;\r\n\r\n    return {\r\n      ...restOfEdgeItem,\r\n      sourceId: edgeItem.from,\r\n    };\r\n  }\r\n  throw new Error('convertEdgeDirectionNames - received invalid data');\r\n}\r\n\r\nfunction prepareForBE(obj: Record<string, any>) {\r\n  return Object.entries(obj).reduce((acc, [key, value]) => {\r\n    if (key === 'childNodes') {\r\n      if (!Array.isArray(value)) {\r\n        throw new Error(`\"childNodes\" is supposed to be an array`);\r\n      }\r\n\r\n      return {\r\n        ...acc,\r\n        childNodes: value.map(item => convertNodeDataToSMPersistedData(item)),\r\n      };\r\n    }\r\n\r\n    if (key === 'additionalEdges') {\r\n      if (!Array.isArray(value)) {\r\n        throw new Error(`\"additionalEdges\" is supposed to be an array`);\r\n      }\r\n      return {\r\n        ...acc,\r\n        additionalEdges: value.map(item =>\r\n          convertNodeDataToSMPersistedData(convertEdgeDirectionNames(item), {\r\n            skipBooleanStringWrapping: true,\r\n          })\r\n        ),\r\n      };\r\n    }\r\n\r\n    return {\r\n      ...acc,\r\n      ...convertPropertyToBE({ key, value }),\r\n    };\r\n  }, {} as Record<string, any>);\r\n}\r\n","import { gql } from '@apollo/client/core';\r\nimport { INode } from '..';\r\n\r\nimport {\r\n  DocumentNode,\r\n  DeepPartial,\r\n  GetResultingDataTypeFromNodeDefinition,\r\n} from '../types';\r\nimport { convertNodeDataToSMPersistedData } from './convertNodeDataToSMPersistedData';\r\nimport { getMutationNameFromOperations } from './getMutationNameFromOperations';\r\nimport { RequiredNodeDataForCreate, OptionalNodeDataForCreate } from './types';\r\n\r\nexport type CreateNodesOperation = {\r\n  type: 'createNodes';\r\n  operationName: 'CreateNodes';\r\n  nodes: Array<{\r\n    data: RequiredNodeDataForCreate &\r\n      Partial<OptionalNodeDataForCreate> &\r\n      Record<string, any>;\r\n    under?: string | Array<string>;\r\n    position?: number;\r\n    onSuccess?: (data: any) => any;\r\n  }>;\r\n  name?: string;\r\n};\r\n\r\nexport function createNodes(\r\n  operation: Omit<CreateNodesOperation, 'type' | 'operationName'>\r\n): CreateNodesOperation {\r\n  return {\r\n    type: 'createNodes',\r\n    operationName: 'CreateNodes',\r\n    ...operation,\r\n  };\r\n}\r\n\r\nexport type CreateNodeOperation<\r\n  TNode extends INode = INode<any, Record<string, any>>\r\n> = {\r\n  type: 'createNode';\r\n  operationName: 'CreateNodes';\r\n  data: RequiredNodeDataForCreate &\r\n    Partial<OptionalNodeDataForCreate> &\r\n    // when creating a node, all we need is a deep partial of all the node's data\r\n    // since, at query time, sm-js will fill any properties which were not provided on create\r\n    DeepPartial<GetResultingDataTypeFromNodeDefinition<TNode>>;\r\n  under?: string | Array<string>;\r\n  name?: string;\r\n  position?: number;\r\n  onSuccess?: (data: any) => any;\r\n};\r\n\r\nexport function createNode<\r\n  TNode extends INode = INode<any, Record<string, any>>\r\n>(\r\n  operation: Omit<CreateNodeOperation<TNode>, 'type' | 'operationName'>\r\n): CreateNodeOperation<TNode> {\r\n  return {\r\n    type: 'createNode',\r\n    operationName: 'CreateNodes',\r\n    ...operation,\r\n  };\r\n}\r\n\r\nexport function getMutationsFromTransactionCreateOperations(\r\n  operations: Array<CreateNodeOperation | CreateNodesOperation>\r\n): Array<DocumentNode> {\r\n  if (!operations.length) return [];\r\n  const allCreateNodeOperations: Array<{\r\n    data: RequiredNodeDataForCreate;\r\n    under?: string | Array<string>;\r\n  }> = operations.flatMap(operation => {\r\n    if (operation.type === 'createNode') {\r\n      return operation;\r\n    } else if (operation.type === 'createNodes') {\r\n      return operation.nodes;\r\n    } else {\r\n      throw Error(`Operation not recognized: \"${operation}\"`);\r\n    }\r\n  });\r\n\r\n  const name = getMutationNameFromOperations(operations, 'CreateNodes');\r\n\r\n  // For now, returns a single mutation\r\n  // later, we may choose to alter this behavior, if we find performance gains in splitting the mutations\r\n  return [\r\n    gql`\r\n      mutation ${name} {\r\n        CreateNodes(\r\n          createOptions: [\r\n            ${allCreateNodeOperations\r\n              .map(convertCreateNodeOperationToCreateNodesMutationArguments)\r\n              .join('\\n')}\r\n          ]\r\n          transactional: true\r\n        ) {\r\n          id\r\n        }\r\n      }\r\n    `,\r\n  ];\r\n}\r\n\r\nfunction convertCreateNodeOperationToCreateNodesMutationArguments(operation: {\r\n  data: RequiredNodeDataForCreate;\r\n  under?: string | Array<string>;\r\n}): string {\r\n  const dataToPersist = convertNodeDataToSMPersistedData(operation.data);\r\n  let mutationArgs: Array<string> = [\r\n    `node: {\r\n        ${dataToPersist}\r\n      }`,\r\n  ];\r\n\r\n  if (operation.under) {\r\n    const value =\r\n      typeof operation.under === 'string'\r\n        ? `[\"${operation.under}\"]`\r\n        : `[\"${operation.under.join('\", \"')}\"]`;\r\n\r\n    mutationArgs.push(`underIds: ${value}`);\r\n  }\r\n\r\n  return `{\r\n    ${mutationArgs.join('\\n')}\r\n  }`;\r\n}\r\n","import { gql } from '@apollo/client/core';\r\nimport { observable, when } from 'mobx';\r\n\r\nimport {\r\n  QueryRecord,\r\n  QueryRecordEntry,\r\n  RelationalQueryRecord,\r\n  RelationalQueryRecordEntry,\r\n  QueryDefinitions,\r\n  QueryOpts,\r\n  IMMGQL,\r\n  IGQLClient,\r\n} from './types';\r\nimport {\r\n  convertQueryDefinitionToQueryInfo,\r\n  getQueryGQLStringFromQueryRecord,\r\n} from './queryDefinitionAdapters';\r\n\r\nexport interface IFetchedQueryData {\r\n  subscriptionsByProperty: Record<string, number>;\r\n  results: any | Array<any> | null;\r\n}\r\n\r\nexport interface IInFlightQueryRecord {\r\n  queryId: string;\r\n  queryRecord: QueryRecord;\r\n}\r\n\r\nexport type TQueryDataByContextMap = Record<string, IFetchedQueryData>;\r\n\r\nexport type TInFlightQueriesByContextMap = Record<\r\n  string,\r\n  IInFlightQueryRecord[]\r\n>;\r\n\r\nexport type TQueryRecordByContextMap = Record<string, QueryRecord>;\r\n\r\nconst IN_FLIGHT_TIMEOUT_MS = 1000;\r\n\r\n// TODO Add onSubscriptionMessageReceived method: https://tractiontools.atlassian.net/browse/TTD-377\r\nexport class QuerySlimmer {\r\n  constructor(mmGQLInstance: IMMGQL) {\r\n    this.mmGQLInstance = mmGQLInstance;\r\n  }\r\n\r\n  private mmGQLInstance: IMMGQL;\r\n\r\n  public queriesByContext: TQueryDataByContextMap = {};\r\n  public inFlightQueryRecords: TInFlightQueriesByContextMap = observable({});\r\n\r\n  public async query<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget,\r\n    TQueryDefinitions extends QueryDefinitions<\r\n      TNode,\r\n      TMapFn,\r\n      TQueryDefinitionTarget\r\n    >\r\n  >(opts: {\r\n    queryId: string;\r\n    queryDefinitions: TQueryDefinitions;\r\n    useServerSidePaginationFilteringSorting: boolean;\r\n    queryOpts?: QueryOpts<TQueryDefinitions>;\r\n    tokenName: string;\r\n  }) {\r\n    const { queryRecord } = convertQueryDefinitionToQueryInfo(opts);\r\n    const newQuerySlimmedByCache = this.getSlimmedQueryAgainstQueriesByContext(\r\n      queryRecord\r\n    );\r\n\r\n    if (newQuerySlimmedByCache === null) {\r\n      const data = this.getDataForQueryFromQueriesByContext(queryRecord);\r\n      this.log(\r\n        `QUERYSLIMMER: NEW QUERY FULLY CACHED`,\r\n        `ORIGINAL QUERY: ${JSON.stringify(queryRecord)}`,\r\n        `CACHE: ${JSON.stringify(this.queriesByContext)}`,\r\n        `DATA RETURNED: ${JSON.stringify(data)}`\r\n      );\r\n      return data;\r\n    }\r\n\r\n    const newQuerySlimmedByInFlightQueries = this.slimNewQueryAgainstInFlightQueries(\r\n      newQuerySlimmedByCache\r\n    );\r\n\r\n    if (newQuerySlimmedByInFlightQueries === null) {\r\n      await this.sendQueryRequest({\r\n        queryId: opts.queryId,\r\n        queryRecord: newQuerySlimmedByCache,\r\n        useServerSidePaginationFilteringSorting:\r\n          opts.useServerSidePaginationFilteringSorting,\r\n        tokenName: opts.tokenName,\r\n        batchKey: opts.queryOpts?.batchKey,\r\n      });\r\n      const data = this.getDataForQueryFromQueriesByContext(queryRecord);\r\n      this.log(\r\n        `QUERYSLIMMER: NEW QUERY SLIMMED BY CACHE`,\r\n        `ORIGINAL QUERY: ${JSON.stringify(queryRecord)}`,\r\n        `SLIMMED QUERY: ${JSON.stringify(newQuerySlimmedByCache)}`,\r\n        `CACHE: ${JSON.stringify(this.queriesByContext)}`,\r\n        `DATA RETURNED: ${JSON.stringify(data)}`\r\n      );\r\n      return data;\r\n    } else {\r\n      this.log(\r\n        `QUERYSLIMMER: AWAITING IN-FLIGHT QUERIES SLIMMED AGAINST`,\r\n        `ORIGINAL QUERY: ${JSON.stringify(queryRecord)}`,\r\n        `IN-FLIGHT QUERIES: ${JSON.stringify(this.inFlightQueryRecords)}`,\r\n        `CACHE: ${JSON.stringify(this.queriesByContext)}`\r\n      );\r\n      await this.sendQueryRequest({\r\n        queryId: opts.queryId,\r\n        queryRecord: newQuerySlimmedByInFlightQueries.slimmedQueryRecord,\r\n        useServerSidePaginationFilteringSorting:\r\n          opts.useServerSidePaginationFilteringSorting,\r\n        tokenName: opts.tokenName,\r\n        batchKey: opts.queryOpts?.batchKey,\r\n      });\r\n\r\n      await when(\r\n        () =>\r\n          !this.areDependentQueriesStillInFlight({\r\n            queryIds: newQuerySlimmedByInFlightQueries.queryIdsSlimmedAgainst,\r\n            querySlimmedByInFlightQueries:\r\n              newQuerySlimmedByInFlightQueries.slimmedQueryRecord,\r\n          }),\r\n        {\r\n          timeout: IN_FLIGHT_TIMEOUT_MS,\r\n          onError: (error: any) => {\r\n            throw new Error(\r\n              `QUERYSLIMMER TIMED OUT WAITING ON IN FLIGHTQUERIES`,\r\n              error\r\n            );\r\n          },\r\n        }\r\n      );\r\n\r\n      const data = this.getDataForQueryFromQueriesByContext(queryRecord);\r\n      this.log(\r\n        `QUERYSLIMMER: NEW QUERY SLIMMED BY CACHE AND IN-FLIGHT QUERIES`,\r\n        `ORIGINAL QUERY: ${JSON.stringify(queryRecord)}`,\r\n        `SLIMMED QUERY: ${JSON.stringify(\r\n          newQuerySlimmedByInFlightQueries.slimmedQueryRecord\r\n        )}`,\r\n        `CACHE: ${JSON.stringify(this.queriesByContext)}`,\r\n        `DATA RETURNED: ${JSON.stringify(data)}`\r\n      );\r\n      return data;\r\n    }\r\n  }\r\n\r\n  public getDataForQueryFromQueriesByContext(\r\n    newQuery: QueryRecord | RelationalQueryRecord,\r\n    parentContextKey?: string\r\n  ) {\r\n    const queryData: Record<string, any> = {};\r\n    const newQueryKeys = Object.keys(newQuery);\r\n\r\n    newQueryKeys.forEach(newQueryKey => {\r\n      const queryRecordEntry = newQuery[newQueryKey];\r\n      const contextKey = this.createContextKeyForQueryRecordEntry(\r\n        queryRecordEntry,\r\n        parentContextKey\r\n      );\r\n      const cachedQueryData = this.queriesByContext[contextKey];\r\n      const newQueryData: Record<string, any | Array<any> | null> = {};\r\n      let newQueryRelationalData: Record<string, any | Array<any> | null> = {};\r\n\r\n      queryRecordEntry.properties.forEach(property => {\r\n        newQueryData[property] = { nodes: cachedQueryData.results[property] };\r\n      });\r\n\r\n      if (queryRecordEntry.relational !== undefined) {\r\n        newQueryRelationalData = this.getDataForQueryFromQueriesByContext(\r\n          queryRecordEntry.relational,\r\n          contextKey\r\n        );\r\n      }\r\n\r\n      queryData[newQueryKey] = {\r\n        ...newQueryData,\r\n        ...newQueryRelationalData,\r\n      };\r\n    });\r\n\r\n    return queryData;\r\n  }\r\n\r\n  public slimNewQueryAgainstInFlightQueries(newQuery: QueryRecord) {\r\n    const newQueryByContextMap = this.getQueryRecordsByContextMap(newQuery);\r\n    const inFlightQueriesToSlimAgainst = this.getInFlightQueriesToSlimAgainst(\r\n      newQueryByContextMap\r\n    );\r\n\r\n    if (inFlightQueriesToSlimAgainst === null) {\r\n      return null;\r\n    }\r\n\r\n    const queryIdsSlimmedAgainst: string[] = [];\r\n    let newQuerySlimmed: QueryRecord = {};\r\n\r\n    Object.keys(inFlightQueriesToSlimAgainst).forEach(\r\n      inFlightQueryContextKey => {\r\n        if (inFlightQueryContextKey in newQueryByContextMap) {\r\n          let newQueryRecordPieceSlimmed: QueryRecord = {\r\n            ...newQueryByContextMap[inFlightQueryContextKey],\r\n          };\r\n\r\n          inFlightQueriesToSlimAgainst[inFlightQueryContextKey].forEach(\r\n            inFlightQueryRecord => {\r\n              const slimmed = this.getSlimmedQueryAgainstInFlightQuery(\r\n                newQueryRecordPieceSlimmed,\r\n                inFlightQueryRecord.queryRecord,\r\n                false\r\n              );\r\n              if (slimmed !== null) {\r\n                queryIdsSlimmedAgainst.push(inFlightQueryRecord.queryId);\r\n                newQueryRecordPieceSlimmed = slimmed;\r\n              }\r\n            }\r\n          );\r\n\r\n          newQuerySlimmed = {\r\n            ...newQuerySlimmed,\r\n            ...newQueryRecordPieceSlimmed,\r\n          };\r\n        }\r\n      }\r\n    );\r\n\r\n    if (Object.keys(newQuerySlimmed).length === 0) {\r\n      return null;\r\n    } else {\r\n      return {\r\n        queryIdsSlimmedAgainst,\r\n        slimmedQueryRecord: newQuerySlimmed,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns in flight QueryRecordEntries by context that can slim down a new query.\r\n   * The new query should wait for an in flight query to slim against if:\r\n   *   - At least one QueryRecordEntry ContextKey in the inFlightQuery matches the QueryRecordEntry ContextKey of the newQuery.\r\n   *   - At least one property that is being requested by the new query is already being requested by the in flight query.\r\n   *   - The matched in flight QueryRecordEntry (from above) is not requesting relational data deeper than the newQuery QueryRecordEntry.\r\n   */\r\n  public getInFlightQueriesToSlimAgainst(newQuery: TQueryRecordByContextMap) {\r\n    const inFlightQueriesToSlimAgainst: TInFlightQueriesByContextMap = {};\r\n    const newQueryCtxtKeys = Object.keys(newQuery);\r\n\r\n    newQueryCtxtKeys.forEach(newQueryCtxKey => {\r\n      const queryRecordBaseKey = Object.keys(newQuery[newQueryCtxKey])[0];\r\n      const newQueryRecordEntry = newQuery[newQueryCtxKey][queryRecordBaseKey];\r\n      const newQueryRecordDepth = this.getRelationalDepthOfQueryRecordEntry(\r\n        newQueryRecordEntry\r\n      );\r\n\r\n      if (newQueryCtxKey in this.inFlightQueryRecords) {\r\n        const inFlightQueriesForCtxKey = this.inFlightQueryRecords[\r\n          newQueryCtxKey\r\n        ];\r\n\r\n        inFlightQueriesForCtxKey.forEach(inFlightQueryRecord => {\r\n          if (queryRecordBaseKey in inFlightQueryRecord.queryRecord) {\r\n            const inFlightQueryRecordEntry =\r\n              inFlightQueryRecord.queryRecord[queryRecordBaseKey];\r\n            const inFlightRecordHasSomePropsInNewQuery = inFlightQueryRecordEntry.properties.some(\r\n              inFlightProp =>\r\n                newQueryRecordEntry.properties.includes(inFlightProp)\r\n            );\r\n\r\n            if (inFlightRecordHasSomePropsInNewQuery) {\r\n              const inFlightRecordEntryDepth = this.getRelationalDepthOfQueryRecordEntry(\r\n                inFlightQueryRecordEntry\r\n              );\r\n\r\n              if (inFlightRecordEntryDepth <= newQueryRecordDepth) {\r\n                if (newQueryCtxKey in inFlightQueriesToSlimAgainst) {\r\n                  inFlightQueriesToSlimAgainst[newQueryCtxKey].push(\r\n                    inFlightQueryRecord\r\n                  );\r\n                } else {\r\n                  inFlightQueriesToSlimAgainst[newQueryCtxKey] = [\r\n                    inFlightQueryRecord,\r\n                  ];\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return Object.keys(inFlightQueriesToSlimAgainst).length === 0\r\n      ? null\r\n      : inFlightQueriesToSlimAgainst;\r\n  }\r\n\r\n  /**\r\n   * Slims the new query against an in flight query.\r\n   * This function assumes queries have already been matched by context.\r\n   */\r\n  public getSlimmedQueryAgainstInFlightQuery(\r\n    newQuery: QueryRecord | RelationalQueryRecord,\r\n    inFlightQuery: QueryRecord | RelationalQueryRecord,\r\n    isRelationalQueryRecord: boolean\r\n  ) {\r\n    const slimmedQueryRecord: QueryRecord = {};\r\n    const slimmedRelationalQueryRecord: RelationalQueryRecord = {};\r\n\r\n    Object.keys(newQuery).forEach(newQueryKey => {\r\n      const newQueryRecordEntry = newQuery[newQueryKey];\r\n      const newRootRecordEntry = newQueryRecordEntry as QueryRecordEntry;\r\n      const newRelationalRecordEntry = newQueryRecordEntry as RelationalQueryRecordEntry;\r\n\r\n      if (inFlightQuery[newQueryKey] === undefined) {\r\n        // If the inFlightQuery does not contain a record for the newQueryContextKey we need to keep that data as it needs to be fetched.\r\n        if (isRelationalQueryRecord) {\r\n          slimmedRelationalQueryRecord[newQueryKey] = newRelationalRecordEntry;\r\n        } else {\r\n          slimmedQueryRecord[newQueryKey] = newRootRecordEntry;\r\n        }\r\n      } else {\r\n        // If a newQueryContextKey is present we want to slim what we can from the in flight query.\r\n        const inFlightQueryRecordEntry = inFlightQuery[newQueryKey];\r\n        const newRequestedProperties = this.getPropertiesNotCurrentlyBeingRequested(\r\n          {\r\n            newQueryProps: newQueryRecordEntry.properties,\r\n            inFlightProps: inFlightQueryRecordEntry.properties,\r\n          }\r\n        );\r\n\r\n        // If there are no further child relational queries to deal with and there are properties being requested that are not cached\r\n        // we can just return the new query with only the newly requested properties.\r\n        if (\r\n          newRequestedProperties !== null &&\r\n          newQueryRecordEntry.relational === undefined\r\n        ) {\r\n          if (isRelationalQueryRecord) {\r\n            slimmedRelationalQueryRecord[newQueryKey] = {\r\n              ...newRelationalRecordEntry,\r\n              properties: newRequestedProperties,\r\n            };\r\n          } else {\r\n            slimmedQueryRecord[newQueryKey] = {\r\n              ...newRootRecordEntry,\r\n              properties: newRequestedProperties,\r\n            };\r\n          }\r\n        }\r\n\r\n        // If both queries contain relational queries we need to try slimming against those as well.\r\n        // If there are child relational queries we still need to handle those even if the parent query is requesting properties that are already in flight.\r\n        if (\r\n          newQueryRecordEntry.relational !== undefined &&\r\n          inFlightQueryRecordEntry.relational !== undefined\r\n        ) {\r\n          const slimmedNewRelationalQueryRecord = this.getSlimmedQueryAgainstInFlightQuery(\r\n            newQueryRecordEntry.relational,\r\n            inFlightQueryRecordEntry.relational,\r\n            true\r\n          );\r\n\r\n          // If there are any properties being requested in the child relational query\r\n          // we will still need to return the query record even if the parent is requesting properties that are already in flight.\r\n          // In this scenario we return an empty array for the properties of the parent query while the child relational query is populated.\r\n          if (slimmedNewRelationalQueryRecord !== null) {\r\n            if (isRelationalQueryRecord) {\r\n              slimmedRelationalQueryRecord[newQueryKey] = {\r\n                ...newRelationalRecordEntry,\r\n                properties: newRequestedProperties ?? [],\r\n                relational: {\r\n                  ...(slimmedNewRelationalQueryRecord as RelationalQueryRecord),\r\n                },\r\n              };\r\n            } else {\r\n              slimmedQueryRecord[newQueryKey] = {\r\n                ...newRootRecordEntry,\r\n                properties: newRequestedProperties ?? [],\r\n                relational: {\r\n                  ...(slimmedNewRelationalQueryRecord as RelationalQueryRecord),\r\n                },\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const queryRecordToReturn = isRelationalQueryRecord\r\n      ? slimmedRelationalQueryRecord\r\n      : slimmedQueryRecord;\r\n\r\n    return Object.keys(queryRecordToReturn).length === 0\r\n      ? null\r\n      : queryRecordToReturn;\r\n  }\r\n\r\n  public getSlimmedQueryAgainstQueriesByContext(\r\n    newQuery: QueryRecord | RelationalQueryRecord,\r\n    parentContextKey?: string\r\n  ) {\r\n    // The query record could be a root query (not relational), or a child relational query.\r\n    // They have different types so we create/update a brand new query record depending the type of query we are dealing with:\r\n    //   - Dealing with a root query (not relational): slimmedQueryRecord and newRootRecordEntry\r\n    //   - Dealing with a relational query: slimmedRelationalQueryRecord and newRelationalRecordEntry\r\n    // We know we are dealing with a relational query when parentContextKey is NOT undefined\r\n    const slimmedQueryRecord: QueryRecord = {};\r\n    const slimmedRelationalQueryRecord: RelationalQueryRecord = {};\r\n    const isNewQueryARootQuery = parentContextKey === undefined;\r\n\r\n    Object.keys(newQuery).forEach(newQueryKey => {\r\n      const newQueryRecordEntry = newQuery[newQueryKey];\r\n      const newRootRecordEntry = newQueryRecordEntry as QueryRecordEntry;\r\n      const newRelationalRecordEntry = newQueryRecordEntry as RelationalQueryRecordEntry;\r\n\r\n      const newQueryContextKey = this.createContextKeyForQueryRecordEntry(\r\n        newQueryRecordEntry,\r\n        parentContextKey\r\n      );\r\n\r\n      if (this.queriesByContext[newQueryContextKey] === undefined) {\r\n        // If the context key of the new query is not found in queriesByContext we know there is no cached version of this query.\r\n        if (isNewQueryARootQuery) {\r\n          slimmedQueryRecord[newQueryKey] = newRootRecordEntry;\r\n        } else {\r\n          slimmedRelationalQueryRecord[newQueryKey] = newRelationalRecordEntry;\r\n        }\r\n      } else {\r\n        // If a context key is found for the new query in queriesByContext we need to check if any of the properties being requested\r\n        // by the new query are already cached.\r\n        const cachedQuery = this.queriesByContext[newQueryContextKey];\r\n        const newRequestedProperties = this.getPropertiesNotAlreadyCached({\r\n          newQueryProps: newQueryRecordEntry.properties,\r\n          cachedQuerySubsByProperty: cachedQuery.subscriptionsByProperty,\r\n        });\r\n\r\n        // If there are no further child relational queries to deal with and there are properties being requested that are not cached\r\n        // we can just return the new query with only the newly requested properties.\r\n        if (\r\n          newRequestedProperties !== null &&\r\n          newQueryRecordEntry.relational === undefined\r\n        ) {\r\n          if (isNewQueryARootQuery) {\r\n            slimmedQueryRecord[newQueryKey] = {\r\n              ...newRootRecordEntry,\r\n              properties: newRequestedProperties,\r\n            };\r\n          } else {\r\n            slimmedRelationalQueryRecord[newQueryKey] = {\r\n              ...newRelationalRecordEntry,\r\n              properties: newRequestedProperties,\r\n            };\r\n          }\r\n        }\r\n\r\n        // If there are child relational queries we still need to handle those even if the parent query is requesting only cached properties.\r\n        if (newQueryRecordEntry.relational !== undefined) {\r\n          const slimmedNewRelationalQueryRecord = this.getSlimmedQueryAgainstQueriesByContext(\r\n            newQueryRecordEntry.relational,\r\n            newQueryContextKey\r\n          );\r\n\r\n          // If there are any non-cached properties being requested in the child relational query\r\n          // we will still need to return the query record even if the parent is not requesting any un-cached properties.\r\n          // In this scenario we return an empty array for the properties of the parent query while the child relational query is populated.\r\n          if (slimmedNewRelationalQueryRecord !== null) {\r\n            if (isNewQueryARootQuery) {\r\n              slimmedQueryRecord[newQueryKey] = {\r\n                ...newRootRecordEntry,\r\n                properties: newRequestedProperties ?? [],\r\n                relational: {\r\n                  ...(slimmedNewRelationalQueryRecord as RelationalQueryRecord),\r\n                },\r\n              };\r\n            } else {\r\n              slimmedRelationalQueryRecord[newQueryKey] = {\r\n                ...newRelationalRecordEntry,\r\n                properties: newRequestedProperties ?? [],\r\n                relational: {\r\n                  ...(slimmedNewRelationalQueryRecord as RelationalQueryRecord),\r\n                },\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const objectToReturn = isNewQueryARootQuery\r\n      ? slimmedQueryRecord\r\n      : slimmedRelationalQueryRecord;\r\n\r\n    return Object.keys(objectToReturn).length === 0 ? null : objectToReturn;\r\n  }\r\n\r\n  public onSubscriptionCancelled(\r\n    queryRecord: QueryRecord,\r\n    parentContextKey?: string\r\n  ) {\r\n    Object.keys(queryRecord).forEach(queryRecordKey => {\r\n      const queryRecordEntry = queryRecord[queryRecordKey];\r\n      const currentQueryContextKey = this.createContextKeyForQueryRecordEntry(\r\n        queryRecordEntry,\r\n        parentContextKey\r\n      );\r\n\r\n      if (queryRecordEntry.relational !== undefined) {\r\n        this.onSubscriptionCancelled(\r\n          queryRecordEntry.relational,\r\n          currentQueryContextKey\r\n        );\r\n      }\r\n\r\n      if (currentQueryContextKey in this.queriesByContext) {\r\n        const cachedQuerySubsByProperty = this.queriesByContext[\r\n          currentQueryContextKey\r\n        ].subscriptionsByProperty;\r\n\r\n        queryRecordEntry.properties.forEach(property => {\r\n          const propertySubCount = cachedQuerySubsByProperty[property];\r\n          if (propertySubCount >= 1) {\r\n            cachedQuerySubsByProperty[property] = propertySubCount - 1;\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public getRelationalDepthOfQueryRecordEntry(\r\n    queryRecordEntry: QueryRecordEntry | RelationalQueryRecordEntry\r\n  ) {\r\n    let relationalDepth = 0;\r\n    if (queryRecordEntry.relational !== undefined) {\r\n      relationalDepth += 1;\r\n      Object.values(queryRecordEntry.relational).forEach(relationalEntry => {\r\n        relationalDepth += this.getRelationalDepthOfQueryRecordEntry(\r\n          relationalEntry\r\n        );\r\n      });\r\n    }\r\n    return relationalDepth;\r\n  }\r\n\r\n  public populateQueriesByContext(\r\n    queryRecord: QueryRecord,\r\n    results: Record<string, any>,\r\n    parentContextKey?: string\r\n  ) {\r\n    Object.keys(queryRecord).forEach(alias => {\r\n      const queryRecordEntry = queryRecord[alias];\r\n      const currentQueryContextKey = this.createContextKeyForQueryRecordEntry(\r\n        queryRecordEntry,\r\n        parentContextKey\r\n      );\r\n\r\n      this.queriesByContext[currentQueryContextKey] = {\r\n        subscriptionsByProperty: queryRecordEntry.properties.reduce(\r\n          (previous: Record<string, number>, current: string) => {\r\n            previous[current] = previous[current] ? previous[current] + 1 : 1;\r\n            return previous;\r\n          },\r\n          this.queriesByContext[currentQueryContextKey]\r\n            ?.subscriptionsByProperty || {}\r\n        ),\r\n        results: results[alias],\r\n      };\r\n\r\n      if (queryRecordEntry.relational) {\r\n        const resultsForRelationalQueries = Object.keys(\r\n          queryRecordEntry.relational\r\n        ).reduce((previous: Record<string, any>, current: string) => {\r\n          // do array vs object check here before map in case there's only a single id\r\n          previous[current] = results[alias].map((user: any) => user[current]);\r\n          return previous;\r\n        }, {});\r\n\r\n        this.populateQueriesByContext(\r\n          queryRecordEntry.relational,\r\n          resultsForRelationalQueries,\r\n          currentQueryContextKey\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private createContextKeyForQueryRecordEntry(\r\n    queryRecordEntry: QueryRecordEntry,\r\n    parentContextKey?: string\r\n  ) {\r\n    const doesQueryHaveIdProperty = !!queryRecordEntry.id;\r\n    const parentContextKeyPrefix = !!parentContextKey\r\n      ? `${parentContextKey}.`\r\n      : '';\r\n    const currentQueryTypeProperty = `${queryRecordEntry.def.type}${\r\n      doesQueryHaveIdProperty ? '' : 's'\r\n    }`;\r\n    const currentQueryStringifiedParams = this.stringifyQueryParams(\r\n      queryRecordEntry\r\n    );\r\n    return `${parentContextKeyPrefix}${currentQueryTypeProperty}(${currentQueryStringifiedParams})`;\r\n  }\r\n\r\n  private getPropertiesNotAlreadyCached(opts: {\r\n    newQueryProps: string[];\r\n    cachedQuerySubsByProperty: IFetchedQueryData['subscriptionsByProperty'];\r\n  }) {\r\n    const newRequestedProperties = opts.newQueryProps.filter(\r\n      newQueryProperty => {\r\n        if (newQueryProperty in opts.cachedQuerySubsByProperty) {\r\n          return opts.cachedQuerySubsByProperty[newQueryProperty] === 0;\r\n        }\r\n        return true;\r\n      }\r\n    );\r\n    return newRequestedProperties.length === 0 ? null : newRequestedProperties;\r\n  }\r\n\r\n  private getPropertiesNotCurrentlyBeingRequested(opts: {\r\n    newQueryProps: string[];\r\n    inFlightProps: string[];\r\n  }) {\r\n    const newRequestedProperties = opts.newQueryProps.filter(\r\n      newQueryProperty => !opts.inFlightProps.includes(newQueryProperty)\r\n    );\r\n    return newRequestedProperties.length === 0 ? null : newRequestedProperties;\r\n  }\r\n\r\n  private stringifyQueryParams(entry: QueryRecordEntry) {\r\n    // https://tractiontools.atlassian.net/browse/TTD-315\r\n    // Handle filter/pagination/sorting query params\r\n    const params = { ids: entry.ids, id: entry.id };\r\n    if (!Object.values(params).some(value => value != null)) {\r\n      return 'NO_PARAMS';\r\n    }\r\n    return JSON.stringify(params);\r\n  }\r\n\r\n  private getQueryRecordsByContextMap(queryRecord: QueryRecord) {\r\n    return Object.keys(queryRecord).reduce(\r\n      (queryRecordsByContext, queryRecordKey) => {\r\n        const queryRecordEntry = queryRecord[queryRecordKey];\r\n        const contextKey = this.createContextKeyForQueryRecordEntry(\r\n          queryRecordEntry\r\n        );\r\n        const queryRecordSlice: QueryRecord = {\r\n          [queryRecordKey]: queryRecordEntry,\r\n        };\r\n        queryRecordsByContext[contextKey] = queryRecordSlice;\r\n        return queryRecordsByContext;\r\n      },\r\n      {} as TQueryRecordByContextMap\r\n    );\r\n  }\r\n\r\n  private async sendQueryRequest(opts: {\r\n    queryId: string;\r\n    queryRecord: QueryRecord;\r\n    tokenName: string;\r\n    useServerSidePaginationFilteringSorting: boolean;\r\n    batchKey?: string | undefined;\r\n  }) {\r\n    const inFlightQuery: IInFlightQueryRecord = {\r\n      queryId: opts.queryId,\r\n      queryRecord: opts.queryRecord,\r\n    };\r\n    const queryGQLString = getQueryGQLStringFromQueryRecord({\r\n      queryId: opts.queryId,\r\n      queryRecord: opts.queryRecord,\r\n      useServerSidePaginationFilteringSorting:\r\n        opts.useServerSidePaginationFilteringSorting,\r\n    });\r\n    const queryOpts: Parameters<IGQLClient['query']>[0] = {\r\n      gql: gql(queryGQLString),\r\n      token: opts.tokenName,\r\n    };\r\n\r\n    if ('batchKey' in opts && opts.batchKey !== undefined) {\r\n      queryOpts.batchKey = opts.batchKey;\r\n    }\r\n\r\n    try {\r\n      this.setInFlightQuery(inFlightQuery);\r\n      const results = await this.mmGQLInstance.gqlClient.query(queryOpts);\r\n      this.removeInFlightQuery(inFlightQuery);\r\n      this.populateQueriesByContext(opts.queryRecord, results);\r\n    } catch (e) {\r\n      this.removeInFlightQuery(inFlightQuery);\r\n      throw new Error(\r\n        `QuerySlimmer: Error sending request for query: ${JSON.stringify(\r\n          opts.queryRecord\r\n        )}`,\r\n        e as any\r\n      );\r\n    }\r\n  }\r\n\r\n  private setInFlightQuery(inFlightQueryRecord: IInFlightQueryRecord) {\r\n    const queryRecordsByContext = this.getQueryRecordsByContextMap(\r\n      inFlightQueryRecord.queryRecord\r\n    );\r\n    Object.keys(queryRecordsByContext).forEach(queryRecordContextKey => {\r\n      if (queryRecordContextKey in this.inFlightQueryRecords) {\r\n        this.inFlightQueryRecords[queryRecordContextKey].push(\r\n          inFlightQueryRecord\r\n        );\r\n      } else {\r\n        this.inFlightQueryRecords[queryRecordContextKey] = [\r\n          inFlightQueryRecord,\r\n        ];\r\n      }\r\n    });\r\n  }\r\n\r\n  private removeInFlightQuery(inFlightQueryToRemove: IInFlightQueryRecord) {\r\n    const queryRecordsByContext = this.getQueryRecordsByContextMap(\r\n      inFlightQueryToRemove.queryRecord\r\n    );\r\n    Object.keys(queryRecordsByContext).forEach(queryToRemoveCtxKey => {\r\n      if (queryToRemoveCtxKey in this.inFlightQueryRecords) {\r\n        this.inFlightQueryRecords[\r\n          queryToRemoveCtxKey\r\n        ] = this.inFlightQueryRecords[queryToRemoveCtxKey].filter(\r\n          inFlightRecord =>\r\n            inFlightRecord.queryId === inFlightQueryToRemove.queryId\r\n        );\r\n        if (this.inFlightQueryRecords[queryToRemoveCtxKey].length === 0) {\r\n          delete this.inFlightQueryRecords[queryToRemoveCtxKey];\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private areDependentQueriesStillInFlight(opts: {\r\n    queryIds: string[];\r\n    querySlimmedByInFlightQueries: QueryRecord;\r\n  }) {\r\n    let isStillWaitingOnInFlightQueries = false;\r\n\r\n    const queryRecordsByContext = this.getQueryRecordsByContextMap(\r\n      opts.querySlimmedByInFlightQueries\r\n    );\r\n\r\n    Object.keys(queryRecordsByContext).forEach(ctxKey => {\r\n      if (!isStillWaitingOnInFlightQueries) {\r\n        if (ctxKey in this.inFlightQueryRecords) {\r\n          const inFlightQueryHasDepedentId = this.inFlightQueryRecords[\r\n            ctxKey\r\n          ].some(inFlightQuery =>\r\n            opts.queryIds.includes(inFlightQuery.queryId)\r\n          );\r\n          if (inFlightQueryHasDepedentId) {\r\n            isStillWaitingOnInFlightQueries = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return isStillWaitingOnInFlightQueries;\r\n  }\r\n\r\n  private log(message?: any, ...optionalParams: any[]) {\r\n    if (this.mmGQLInstance.enableQuerySlimmingLogging) {\r\n      console.log(message, ...optionalParams);\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { SubscriptionCanceller, IMMGQL, DocumentNode } from '../types';\r\nexport interface IContextSubscription {\r\n  results?: any;\r\n  error?: any;\r\n  querying?: boolean;\r\n  unsub?: SubscriptionCanceller;\r\n  suspendPromise?: Promise<any>;\r\n  onResults?: (newResults: any) => void;\r\n  onError?: (newError: any) => void;\r\n  setQuerying?: (querying: boolean) => void;\r\n  queryInfo?: {\r\n    queryGQL: DocumentNode;\r\n    queryId: string;\r\n    queryParamsString: string;\r\n  } | null;\r\n\r\n  lastQueryTimestamp?: number;\r\n}\r\n\r\nexport interface IContext {\r\n  mmGQLInstance: IMMGQL;\r\n  ongoingSubscriptionRecord: Record<string, IContextSubscription>;\r\n  updateSubscriptionInfo: (\r\n    subscriptionId: string,\r\n    subInfo: Partial<IContextSubscription>\r\n  ) => void;\r\n  scheduleCleanup: (subscriptionId: string) => void;\r\n  cancelCleanup: (subscriptionId: string) => void;\r\n  onHookMount: (\r\n    subscriptionId: string,\r\n    opts: { silenceDuplicateSubIdErrors: boolean }\r\n  ) => void;\r\n  onHookUnmount: (subscriptionId: string) => void;\r\n}\r\n\r\nexport const MMGQLContext = React.createContext<IContext>(\r\n  (undefined as unknown) as IContext\r\n);\r\n\r\nexport const LoggingContext = React.createContext<{\r\n  unsafe__silenceDuplicateSubIdErrors: boolean;\r\n}>({ unsafe__silenceDuplicateSubIdErrors: false });\r\n\r\n// Allows use cases such as rendering the previous route as a suspense fallback to the next route\r\n// where the same subscription id may be used momentarily before the fallback route unmounts\r\nexport const UnsafeNoDuplicateSubIdErrorProvider = (props: {\r\n  children: React.ReactNode;\r\n}) => {\r\n  return (\r\n    <LoggingContext.Provider\r\n      value={{ unsafe__silenceDuplicateSubIdErrors: true }}\r\n    >\r\n      {props.children}\r\n    </LoggingContext.Provider>\r\n  );\r\n};\r\n\r\nexport const MMGQLProvider = (props: {\r\n  children: React.ReactNode;\r\n  mmGQL: IMMGQL;\r\n  subscriptionTTLMs?: number;\r\n}) => {\r\n  const existingContext = React.useContext(MMGQLContext);\r\n\r\n  if (existingContext) {\r\n    throw Error(\r\n      'Another instance of an MMGQLProvider was already detected higher up the render tree.\\nHaving multiple instances of MMGQLProviders is not supported and may lead to unexpected results.'\r\n    );\r\n  }\r\n\r\n  const ongoingSubscriptionRecord = React.useRef<\r\n    Record<string, IContextSubscription>\r\n  >({});\r\n  const cleanupTimeoutRecord = React.useRef<Record<string, NodeJS.Timeout>>({});\r\n  const mountedHooksBySubId = React.useRef<Record<string, boolean>>({});\r\n\r\n  const updateSubscriptionInfo: IContext['updateSubscriptionInfo'] = React.useCallback(\r\n    (subscriptionId, subInfo) => {\r\n      ongoingSubscriptionRecord.current[subscriptionId] = {\r\n        ...ongoingSubscriptionRecord.current[subscriptionId],\r\n        ...subInfo,\r\n      };\r\n    },\r\n    []\r\n  );\r\n\r\n  const scheduleCleanup: IContext['scheduleCleanup'] = React.useCallback(\r\n    subscriptionId => {\r\n      function cleanup() {\r\n        const existingContextSubscription =\r\n          ongoingSubscriptionRecord.current[subscriptionId];\r\n        if (existingContextSubscription) {\r\n          existingContextSubscription.unsub &&\r\n            existingContextSubscription.unsub();\r\n          delete ongoingSubscriptionRecord.current[subscriptionId];\r\n        }\r\n      }\r\n\r\n      if (props.subscriptionTTLMs != null) {\r\n        cleanupTimeoutRecord.current[subscriptionId] = setTimeout(\r\n          cleanup,\r\n          props.subscriptionTTLMs\r\n        );\r\n      } else {\r\n        cleanup();\r\n      }\r\n    },\r\n    [props.subscriptionTTLMs]\r\n  );\r\n\r\n  const cancelCleanup: IContext['cancelCleanup'] = React.useCallback(\r\n    subscriptionId => {\r\n      clearTimeout(cleanupTimeoutRecord.current[subscriptionId]);\r\n      delete cleanupTimeoutRecord.current[subscriptionId];\r\n    },\r\n    []\r\n  );\r\n\r\n  // These three functions exists to fix issues related to non unique sub ids, which happens when multiple instances of the same component\r\n  // using a useSubscription hook are mounted at the same time\r\n  // since useSubscription uses the first line of the error stack to construct a unique sub id\r\n  // fixes https://tractiontools.atlassian.net/browse/MM-404\r\n  const onHookMount: IContext['onHookMount'] = React.useCallback(\r\n    (subscriptionId, { silenceDuplicateSubIdErrors }) => {\r\n      if (\r\n        mountedHooksBySubId.current[subscriptionId] &&\r\n        !silenceDuplicateSubIdErrors\r\n      ) {\r\n        throw Error(\r\n          [\r\n            `A useSubscription hook was already mounted using the following subscription id:`,\r\n            subscriptionId,\r\n            `To fix this error, please specify a unique subscriptionId in the second argument of useSubscription`,\r\n            `useSubscription(queryDefinitions, { subscriptionId })`,\r\n          ].join('\\n')\r\n        );\r\n      }\r\n      mountedHooksBySubId.current[subscriptionId] = true;\r\n    },\r\n    []\r\n  );\r\n\r\n  const onHookUnmount: IContext['onHookUnmount'] = React.useCallback(\r\n    subscriptionId => {\r\n      delete mountedHooksBySubId.current[subscriptionId];\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    <MMGQLContext.Provider\r\n      value={{\r\n        mmGQLInstance: props.mmGQL,\r\n        ongoingSubscriptionRecord: ongoingSubscriptionRecord.current,\r\n        updateSubscriptionInfo,\r\n        scheduleCleanup,\r\n        cancelCleanup,\r\n        onHookMount,\r\n        onHookUnmount,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </MMGQLContext.Provider>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { convertQueryDefinitionToQueryInfo } from '../queryDefinitionAdapters';\r\nimport { removeNullishQueryDefinitions } from '../queriers';\r\nimport {\r\n  QueryDataReturn,\r\n  UseSubscriptionReturn,\r\n  Maybe,\r\n  UseSubscriptionQueryDefinitions,\r\n  UseSubscriptionQueryDefinitionOpts,\r\n  SubscriptionMeta,\r\n  EPaginationFilteringSortingInstance,\r\n} from '../types';\r\n\r\nimport {\r\n  IContext,\r\n  IContextSubscription,\r\n  LoggingContext,\r\n  MMGQLContext,\r\n} from './context';\r\n\r\nexport function useSubscription<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TUseSubscriptionQueryDefinitionOpts extends UseSubscriptionQueryDefinitionOpts,\r\n  TQueryDefinitions extends UseSubscriptionQueryDefinitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget,\r\n    TUseSubscriptionQueryDefinitionOpts\r\n  >\r\n>(\r\n  queryDefinitions: TQueryDefinitions,\r\n  opts?: { subscriptionId?: string }\r\n): UseSubscriptionReturn<TQueryDefinitions> {\r\n  const context = React.useContext(MMGQLContext);\r\n\r\n  if (!context) {\r\n    throw Error(\r\n      'You must wrap your app with an MMGQLProvider before using useSubscription.'\r\n    );\r\n  }\r\n\r\n  const obj = { stack: '' };\r\n  Error.captureStackTrace(obj, useSubscription);\r\n  if (obj.stack === '') {\r\n    // Should be supported in all browsers, but better safe than sorry\r\n    throw Error('Error.captureStackTrace not supported');\r\n  }\r\n  const subscriptionId = opts?.subscriptionId || obj.stack.split('\\n')[1];\r\n\r\n  const preExistingState = getPreexistingState({\r\n    subscriptionId,\r\n    context,\r\n    queryDefinitions,\r\n  });\r\n\r\n  const [results, setResults] = React.useState<\r\n    QueryDataReturn<TQueryDefinitions>\r\n  >(preExistingState.results);\r\n  const [error, setError] = React.useState<any>(preExistingState.error);\r\n  const [querying, setQuerying] = React.useState<boolean>(\r\n    preExistingState.querying\r\n  );\r\n  const loggingContext = React.useContext(LoggingContext);\r\n\r\n  let qdStateManager: Maybe<UseSubscriptionReturn<TQueryDefinitions> & {\r\n    onHookMount(): void;\r\n    onHookUnmount(): void;\r\n  }> = null;\r\n  let qdError: Maybe<any> = null;\r\n  try {\r\n    // buildQueryDefinitionStateManager throws a promise if a query is suspending rendering\r\n    // we catch that promise here and re-throw it further down, so that we can manage cleanup\r\n    // if this function throws and it is not caught, then the number of hooks produced by this hook changes, causing a react error\r\n    qdStateManager = buildQueryDefinitionStateManager({\r\n      context,\r\n      subscriptionId,\r\n      queryDefinitions,\r\n      data: {\r\n        results: results,\r\n        error: error,\r\n        querying: querying,\r\n      },\r\n      handlers: {\r\n        onResults: setResults,\r\n        onError: setError,\r\n        setQuerying,\r\n      },\r\n      silenceDuplicateSubIdErrors:\r\n        loggingContext.unsafe__silenceDuplicateSubIdErrors,\r\n      useServerSidePaginationFilteringSorting:\r\n        context.mmGQLInstance.paginationFilteringSortingInstance ===\r\n        EPaginationFilteringSortingInstance.SERVER,\r\n    });\r\n  } catch (e) {\r\n    qdError = e;\r\n    qdStateManager = null;\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    qdStateManager?.onHookMount();\r\n    return () => {\r\n      qdStateManager?.onHookUnmount();\r\n    };\r\n    // can't add qdStateManager to the dependencies here, as this would cause this useEffect to run with every re-render\r\n    // memoizing qdStateManager can be done, but then we'd have to silence the exhaustive-deps check for queryDefinitions, unless we forced devs\r\n    // to memoize all of their query definitions, which seems overkill\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [context, subscriptionId]);\r\n\r\n  if (error || qdError) throw error || qdError;\r\n\r\n  return qdStateManager as UseSubscriptionReturn<TQueryDefinitions> & {\r\n    onHookMount(): void;\r\n    onHookUnmount(): void;\r\n  };\r\n}\r\n\r\nfunction getPreexistingState<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TUseSubscriptionQueryDefinitionOpts extends UseSubscriptionQueryDefinitionOpts,\r\n  TQueryDefinitions extends UseSubscriptionQueryDefinitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget,\r\n    TUseSubscriptionQueryDefinitionOpts\r\n  >\r\n>(opts: {\r\n  context: IContext;\r\n  subscriptionId: string;\r\n  queryDefinitions: TQueryDefinitions;\r\n}) {\r\n  const preExistingContextForThisSubscription =\r\n    opts.context.ongoingSubscriptionRecord[opts.subscriptionId];\r\n\r\n  const results =\r\n    preExistingContextForThisSubscription?.results ||\r\n    Object.keys(opts.queryDefinitions).reduce(\r\n      (acc, key: keyof TQueryDefinitions) => {\r\n        acc[key] = null;\r\n        return acc;\r\n      },\r\n      {} as { [key in keyof TQueryDefinitions]: null }\r\n    );\r\n  const error = preExistingContextForThisSubscription?.error;\r\n  const querying =\r\n    preExistingContextForThisSubscription?.querying != null\r\n      ? preExistingContextForThisSubscription.querying\r\n      : true;\r\n\r\n  return { results, error, querying };\r\n}\r\n\r\n/**\r\n * useSubscription accepts query definitions that optionally disable suspense rendering\r\n * to facilitate that, this method splits all query definitions into 2 groups\r\n * @param queryDefinitions\r\n * @returns {suspendEnabled: UseSubscriptionQueryDefinitions, suspendDisabled: UseSubscriptionQueryDefinitions}\r\n */\r\nfunction splitQueryDefinitions<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TUseSubscriptionQueryDefinitionOpts extends UseSubscriptionQueryDefinitionOpts,\r\n  TQueryDefinitions extends UseSubscriptionQueryDefinitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget,\r\n    TUseSubscriptionQueryDefinitionOpts\r\n  >\r\n>(\r\n  queryDefinitions: TQueryDefinitions\r\n): {\r\n  suspendEnabled: TQueryDefinitions;\r\n  suspendDisabled: TQueryDefinitions;\r\n} {\r\n  return Object.entries(queryDefinitions).reduce(\r\n    (split, [alias, queryDefinition]) => {\r\n      const suspend =\r\n        queryDefinition &&\r\n        'useSubOpts' in queryDefinition &&\r\n        queryDefinition.useSubOpts?.doNotSuspend != null\r\n          ? !queryDefinition.useSubOpts.doNotSuspend\r\n          : true;\r\n\r\n      split[\r\n        suspend\r\n          ? subscriptionIds.suspendEnabled\r\n          : subscriptionIds.suspendDisabled\r\n      ][\r\n        alias as keyof TQueryDefinitions\r\n      ] = queryDefinition as TQueryDefinitions[string];\r\n      return split;\r\n    },\r\n    {\r\n      [subscriptionIds.suspendEnabled]: {},\r\n      [subscriptionIds.suspendDisabled]: {},\r\n    } as {\r\n      suspendEnabled: TQueryDefinitions;\r\n      suspendDisabled: TQueryDefinitions;\r\n    }\r\n  );\r\n}\r\n\r\nconst subscriptionIds = {\r\n  suspendEnabled: 'suspendEnabled' as 'suspendEnabled',\r\n  suspendDisabled: 'suspendDisabled' as 'suspendDisabled',\r\n};\r\n\r\nfunction buildQueryDefinitionStateManager<\r\n  TNode,\r\n  TMapFn,\r\n  TQueryDefinitionTarget,\r\n  TUseSubscriptionQueryDefinitionOpts extends UseSubscriptionQueryDefinitionOpts,\r\n  TQueryDefinitions extends UseSubscriptionQueryDefinitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget,\r\n    TUseSubscriptionQueryDefinitionOpts\r\n  >\r\n>(opts: {\r\n  context: IContext;\r\n  subscriptionId: string;\r\n  queryDefinitions: TQueryDefinitions;\r\n  data: {\r\n    results: QueryDataReturn<TQueryDefinitions> | undefined;\r\n    error: any;\r\n    querying: boolean;\r\n  };\r\n  handlers: {\r\n    onResults(results: any): void;\r\n    onError(error: any): void;\r\n    setQuerying(querying: boolean): void;\r\n  };\r\n  useServerSidePaginationFilteringSorting: boolean;\r\n  silenceDuplicateSubIdErrors: boolean;\r\n}): UseSubscriptionReturn<TQueryDefinitions> & {\r\n  onHookMount(): void;\r\n  onHookUnmount(): void;\r\n} {\r\n  type TReturn = UseSubscriptionReturn<TQueryDefinitions> & {\r\n    onHookMount(): void;\r\n    onHookUnmount(): void;\r\n  };\r\n\r\n  // When a subscription is initialized, the state of the subscription is split\r\n  // suspended subscriptions and non suspended subscriptions are initialized separately,\r\n  // so that rendering can continue as soon as possible.\r\n  // To maintain shared state (like results, which are an aggregate of the results from both suspended and non suspended queries)\r\n  // separately from subscription specific state (like the previously generated gql fragments to compare previous and next state and discover if we need to reinitialize subscriptions)\r\n  // we have a parentSubscriptionId we use for storing shared state, and a subscriptionId for storing subscription specific state\r\n  const parentSubscriptionId = opts.subscriptionId;\r\n  const preExistingContextForThisParentSubscription =\r\n    opts.context.ongoingSubscriptionRecord[parentSubscriptionId];\r\n  if (!preExistingContextForThisParentSubscription) {\r\n    opts.context.ongoingSubscriptionRecord[parentSubscriptionId] = {};\r\n  }\r\n\r\n  function onHookMount() {\r\n    opts.context.onHookMount(parentSubscriptionId, {\r\n      silenceDuplicateSubIdErrors: opts.silenceDuplicateSubIdErrors,\r\n    });\r\n    opts.context.cancelCleanup(parentSubscriptionId);\r\n    allSubscriptionIds.forEach(subId => opts.context.cancelCleanup(subId));\r\n  }\r\n\r\n  function onHookUnmount() {\r\n    opts.context.onHookUnmount(parentSubscriptionId);\r\n    opts.context.scheduleCleanup(parentSubscriptionId);\r\n    allSubscriptionIds.forEach(subId => opts.context.scheduleCleanup(subId));\r\n  }\r\n\r\n  // We can not directly call \"onResults\" from this function's arguments within the subscriptions 'onData'\r\n  // because if this component unmounts due to fallback rendering then mounts again, we would be calling onResults on the\r\n  // state of the component rendered before the fallback occured.\r\n  // To avoid that, we keep a reference to the most up to date results setter in the subscription context\r\n  // and call that in \"onData\" instead.\r\n  opts.context.updateSubscriptionInfo(parentSubscriptionId, {\r\n    onResults: opts.handlers.onResults,\r\n    onError: opts.handlers.onError,\r\n    setQuerying: opts.handlers.setQuerying,\r\n  });\r\n\r\n  const { suspendDisabled, suspendEnabled } = splitQueryDefinitions(\r\n    opts.queryDefinitions\r\n  );\r\n\r\n  const allSubscriptionIds = Object.values(subscriptionIds).map(\r\n    subscriptionId => parentSubscriptionId + subscriptionId\r\n  );\r\n  function getAllSubscriptionStates(): Array<IContextSubscription | undefined> {\r\n    return allSubscriptionIds.map(\r\n      subscriptionId => opts.context.ongoingSubscriptionRecord[subscriptionId]\r\n    );\r\n  }\r\n\r\n  // From the received queried definitions\r\n  // and a static parentSubscriptionId+subscriptionSuffix identifier\r\n  // initializes subscriptions and updates the useSubscription state on the hook\r\n  // Also maintains a copy of that state at the context level, such that the component rendering the hook\r\n  // can unmount and remount without losing its state. This is key for suspense to work, since components unmount when a promise is thrown\r\n  //\r\n  // returns a promise if there's an unresolved request and \"suspend\" is set to true\r\n  function handleNewQueryDefitions<\r\n    TNode,\r\n    TMapFn,\r\n    TQueryDefinitionTarget,\r\n    TUseSubscriptionQueryDefinitionOpts extends UseSubscriptionQueryDefinitionOpts,\r\n    TQueryDefinitions extends UseSubscriptionQueryDefinitions<\r\n      TNode,\r\n      TMapFn,\r\n      TQueryDefinitionTarget,\r\n      TUseSubscriptionQueryDefinitionOpts\r\n    >\r\n  >(subOpts: {\r\n    queryDefinitions: TQueryDefinitions;\r\n    parentSubscriptionId: string;\r\n    subscriptionSuffix: string;\r\n    suspend: boolean;\r\n  }): Promise<\r\n    {\r\n      data: QueryDataReturn<TQueryDefinitions>;\r\n    } & SubscriptionMeta\r\n  > | void {\r\n    const {\r\n      queryDefinitions,\r\n      parentSubscriptionId,\r\n      subscriptionSuffix,\r\n      suspend,\r\n    } = subOpts;\r\n    const subscriptionId = parentSubscriptionId + subscriptionSuffix;\r\n\r\n    const preExistingContextForThisSubscription =\r\n      opts.context.ongoingSubscriptionRecord[subscriptionId];\r\n\r\n    if (!preExistingContextForThisSubscription) {\r\n      opts.context.ongoingSubscriptionRecord[subscriptionId] = {};\r\n    }\r\n\r\n    let newQueryInfo;\r\n    let newQueryDefinitionsAreAllNull;\r\n    const preExistingQueryInfo =\r\n      preExistingContextForThisSubscription?.queryInfo;\r\n    if (preExistingQueryInfo) {\r\n      const nonNullishQueryDefinitions = removeNullishQueryDefinitions(\r\n        subOpts.queryDefinitions\r\n      );\r\n\r\n      if (Object.keys(nonNullishQueryDefinitions).length) {\r\n        newQueryInfo = convertQueryDefinitionToQueryInfo({\r\n          queryDefinitions: nonNullishQueryDefinitions,\r\n          queryId: preExistingQueryInfo.queryId,\r\n          useServerSidePaginationFilteringSorting:\r\n            opts.useServerSidePaginationFilteringSorting,\r\n        });\r\n      } else {\r\n        newQueryDefinitionsAreAllNull = true;\r\n        opts.context.updateSubscriptionInfo(subscriptionId, {\r\n          queryInfo: null,\r\n        });\r\n      }\r\n    }\r\n\r\n    const queryDefinitionHasBeenUpdated =\r\n      newQueryDefinitionsAreAllNull ||\r\n      (newQueryInfo &&\r\n        (!preExistingQueryInfo ||\r\n          preExistingQueryInfo.queryGQL !== newQueryInfo.queryGQL)) ||\r\n      (newQueryInfo &&\r\n        (!preExistingQueryInfo ||\r\n          preExistingQueryInfo.queryParamsString !==\r\n            newQueryInfo.queryParamsString));\r\n\r\n    if (\r\n      preExistingContextForThisSubscription &&\r\n      !queryDefinitionHasBeenUpdated\r\n    ) {\r\n      return preExistingContextForThisSubscription.suspendPromise;\r\n    }\r\n\r\n    if (queryDefinitionHasBeenUpdated) {\r\n      preExistingContextForThisSubscription.unsub &&\r\n        preExistingContextForThisSubscription.unsub();\r\n    }\r\n\r\n    const queryTimestamp = new Date().valueOf();\r\n    opts.context.updateSubscriptionInfo(subscriptionId, {\r\n      querying: true,\r\n      lastQueryTimestamp: queryTimestamp,\r\n    });\r\n    opts.context.updateSubscriptionInfo(parentSubscriptionId, {\r\n      querying: true,\r\n    });\r\n    const setQuerying =\r\n      opts.context.ongoingSubscriptionRecord[parentSubscriptionId]?.setQuerying;\r\n    setQuerying && setQuerying(true);\r\n    opts.handlers.setQuerying(true);\r\n\r\n    const suspendPromise = opts.context.mmGQLInstance\r\n      .subscribe(queryDefinitions, {\r\n        batchKey: subOpts.suspend ? 'suspended' : 'non-suspended',\r\n        // Make sure to re-render the component on paginate\r\n        onPaginate: () => {\r\n          const contextForThisParentSub =\r\n            opts.context.ongoingSubscriptionRecord[parentSubscriptionId];\r\n          contextForThisParentSub.onResults &&\r\n            contextForThisParentSub.onResults({\r\n              ...contextForThisParentSub.results,\r\n            });\r\n        },\r\n        onData: ({ results: newResults }) => {\r\n          const contextforThisSub =\r\n            opts.context.ongoingSubscriptionRecord[subscriptionId];\r\n          const thisQueryIsMostRecent =\r\n            contextforThisSub?.lastQueryTimestamp === queryTimestamp;\r\n          if (thisQueryIsMostRecent) {\r\n            const contextForThisParentSub =\r\n              opts.context.ongoingSubscriptionRecord[parentSubscriptionId];\r\n            contextForThisParentSub.onResults &&\r\n              contextForThisParentSub.onResults({\r\n                ...contextForThisParentSub.results,\r\n                ...newResults,\r\n              });\r\n            opts.context.updateSubscriptionInfo(subOpts.parentSubscriptionId, {\r\n              results: { ...contextForThisParentSub.results, ...newResults },\r\n            });\r\n          }\r\n        },\r\n        onError: error => {\r\n          const contextForThisParentSub =\r\n            opts.context.ongoingSubscriptionRecord[parentSubscriptionId];\r\n          contextForThisParentSub.onError &&\r\n            contextForThisParentSub.onError(error);\r\n          opts.context.updateSubscriptionInfo(subOpts.parentSubscriptionId, {\r\n            error,\r\n          });\r\n        },\r\n        onSubscriptionInitialized: subscriptionCanceller => {\r\n          opts.context.updateSubscriptionInfo(subscriptionId, {\r\n            unsub: () => subscriptionCanceller(),\r\n          });\r\n          opts.context.updateSubscriptionInfo(parentSubscriptionId, {\r\n            unsub: () => {\r\n              getAllSubscriptionStates().forEach(\r\n                subscriptionState =>\r\n                  subscriptionState?.unsub && subscriptionState.unsub()\r\n              );\r\n            },\r\n          });\r\n        },\r\n        onQueryInfoConstructed: queryInfo => {\r\n          opts.context.updateSubscriptionInfo(subscriptionId, {\r\n            queryInfo,\r\n          });\r\n        },\r\n      })\r\n      .finally(() => {\r\n        const contextForThisSub =\r\n          opts.context.ongoingSubscriptionRecord[subscriptionId];\r\n        const thisQueryIsMostRecent =\r\n          contextForThisSub?.lastQueryTimestamp === queryTimestamp;\r\n        if (thisQueryIsMostRecent) {\r\n          opts.context.updateSubscriptionInfo(subscriptionId, {\r\n            suspendPromise: undefined,\r\n            querying: false,\r\n          });\r\n\r\n          // if all the queries have resolved, we can set \"querying\" to false for the parent subscription state\r\n          const allQueriesHaveResolved = !getAllSubscriptionStates().some(\r\n            state => state && state.querying\r\n          );\r\n          if (allQueriesHaveResolved) {\r\n            opts.context.updateSubscriptionInfo(parentSubscriptionId, {\r\n              querying: false,\r\n            });\r\n            const setQuerying =\r\n              opts.context.ongoingSubscriptionRecord[parentSubscriptionId]\r\n                ?.setQuerying;\r\n            setQuerying && setQuerying(false);\r\n            opts.handlers.setQuerying(false);\r\n          }\r\n        }\r\n      });\r\n\r\n    if (!preExistingContextForThisSubscription && suspend) {\r\n      opts.context.updateSubscriptionInfo(subscriptionId, {\r\n        suspendPromise,\r\n      });\r\n\r\n      return suspendPromise;\r\n    }\r\n  }\r\n\r\n  if (opts.data.error) throw opts.data.error;\r\n\r\n  let suspendPromise: Promise<any> | void;\r\n\r\n  if (Object.keys(suspendDisabled).length) {\r\n    try {\r\n      handleNewQueryDefitions({\r\n        queryDefinitions: suspendDisabled,\r\n        parentSubscriptionId,\r\n        subscriptionSuffix: subscriptionIds.suspendDisabled,\r\n        suspend: false,\r\n      });\r\n    } catch (e) {\r\n      opts.handlers.onError(e);\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  if (Object.keys(suspendEnabled).length) {\r\n    try {\r\n      suspendPromise = handleNewQueryDefitions({\r\n        queryDefinitions: suspendEnabled,\r\n        parentSubscriptionId,\r\n        subscriptionSuffix: subscriptionIds.suspendEnabled,\r\n        suspend: true,\r\n      });\r\n    } catch (e) {\r\n      opts.handlers.onError(e);\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  if (suspendPromise) throw suspendPromise;\r\n\r\n  return {\r\n    data: opts.data.results,\r\n    error: opts.data.error,\r\n    querying: opts.data.querying,\r\n    onHookUnmount,\r\n    onHookMount,\r\n  } as TReturn;\r\n}\r\n","import {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloLink,\r\n  Observable,\r\n  split,\r\n  gql,\r\n} from '@apollo/client/core';\r\nimport { WebSocketLink } from '@apollo/client/link/ws';\r\nimport { HttpLink } from '@apollo/client/link/http';\r\nimport { BatchHttpLink } from '@apollo/client/link/batch-http';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\nimport { DocumentNode, IGQLClient } from './types';\r\n\r\nrequire('isomorphic-fetch');\r\n\r\ninterface IGetGQLClientOpts {\r\n  httpUrl: string;\r\n  wsUrl: string;\r\n}\r\n\r\nconst ENABLE_LOGGING = false;\r\n\r\nexport function getGQLCLient(gqlClientOpts: IGetGQLClientOpts) {\r\n  const wsLink = new WebSocketLink({\r\n    uri: gqlClientOpts.wsUrl,\r\n    options: {\r\n      reconnect: true,\r\n    },\r\n  });\r\n\r\n  const nonBatchedLink = new HttpLink({\r\n    uri: gqlClientOpts.httpUrl,\r\n  });\r\n\r\n  const queryBatchLink = split(\r\n    operation => operation.getContext().batchKey,\r\n    new BatchHttpLink({\r\n      uri: gqlClientOpts.httpUrl,\r\n      batchMax: 50,\r\n      batchInterval: 50,\r\n      batchKey: operation => {\r\n        const context = operation.getContext();\r\n        // This ensures that requests with different batch keys, headers and credentials\r\n        // are batched separately\r\n        return JSON.stringify({\r\n          batchKey: context.batchKey,\r\n          headers: context.headers,\r\n          credentials: context.credentials,\r\n        });\r\n      },\r\n    }),\r\n    nonBatchedLink\r\n  );\r\n\r\n  const mutationBatchLink = split(\r\n    operation => operation.getContext().batchedMutation,\r\n    new BatchHttpLink({\r\n      uri: gqlClientOpts.httpUrl,\r\n      // no batch max for explicitly batched mutations\r\n      // to ensure transactional integrity\r\n      batchMax: Number.MAX_SAFE_INTEGER,\r\n      batchInterval: 0,\r\n    }),\r\n    queryBatchLink\r\n  );\r\n\r\n  const requestLink = split(\r\n    // split based on operation type\r\n    ({ query }) => {\r\n      const definition = getMainDefinition(query);\r\n      return (\r\n        definition.kind === 'OperationDefinition' &&\r\n        definition.operation === 'subscription'\r\n      );\r\n    },\r\n    wsLink,\r\n    mutationBatchLink\r\n  );\r\n\r\n  function getContextWithToken(opts: { token: string }) {\r\n    return {\r\n      headers: {\r\n        Authorization: `Bearer ${opts.token}`,\r\n      },\r\n    };\r\n  }\r\n\r\n  function authenticateSubscriptionDocument(opts: {\r\n    gql: DocumentNode;\r\n    token: string;\r\n  }) {\r\n    const documentBody = opts.gql.loc?.source.body;\r\n\r\n    if (!documentBody) {\r\n      throw new Error('No documentBody found');\r\n    }\r\n\r\n    const operationsThatRequireToken = [\r\n      'GetChildren',\r\n      'GetReferences',\r\n      'GetNodes',\r\n      'GetNodesNew',\r\n      'GetNodesById',\r\n    ];\r\n\r\n    if (\r\n      operationsThatRequireToken.some(operation =>\r\n        documentBody?.includes(`${operation}(`)\r\n      )\r\n    ) {\r\n      let documentBodyWithAuthTokensInjected = documentBody;\r\n\r\n      operationsThatRequireToken.forEach(operation => {\r\n        documentBodyWithAuthTokensInjected = documentBodyWithAuthTokensInjected.replace(\r\n          new RegExp(operation + `\\\\((.*)\\\\)`, 'g'),\r\n          `${operation}($1, authToken: \"${opts.token}\")`\r\n        );\r\n      });\r\n\r\n      return gql(documentBodyWithAuthTokensInjected);\r\n    }\r\n\r\n    return opts.gql;\r\n  }\r\n\r\n  const authLink = new ApolloLink(\r\n    (operation, forward) =>\r\n      new Observable(observer => {\r\n        let handle: ZenObservable.Subscription;\r\n        Promise.resolve(operation)\r\n          .then(() => {\r\n            handle = forward(operation).subscribe({\r\n              next: observer.next.bind(observer),\r\n              error: observer.error.bind(observer),\r\n              complete: observer.complete.bind(observer),\r\n            });\r\n          })\r\n          .catch(observer.error.bind(observer));\r\n\r\n        return () => {\r\n          if (handle) handle.unsubscribe();\r\n        };\r\n      })\r\n  );\r\n\r\n  const baseClient = new ApolloClient({\r\n    link: ApolloLink.from([authLink, requestLink]),\r\n    cache: new InMemoryCache(),\r\n    defaultOptions: {\r\n      watchQuery: {\r\n        fetchPolicy: 'no-cache',\r\n        errorPolicy: 'ignore',\r\n      },\r\n      query: {\r\n        fetchPolicy: 'no-cache',\r\n        errorPolicy: 'all',\r\n      },\r\n    },\r\n  });\r\n\r\n  const gqlClient: IGQLClient = {\r\n    query: async opts => {\r\n      const { data } = await baseClient.query({\r\n        query: opts.gql,\r\n        context: {\r\n          // allow turning off batching by specifying a null or undefined batchKey\r\n          // but by default, batch all requests into the same request batch\r\n          batchKey: 'batchKey' in opts ? opts.batchKey : 'default',\r\n          ...getContextWithToken({ token: opts.token }),\r\n        },\r\n      });\r\n\r\n      ENABLE_LOGGING &&\r\n        console.log('query data', JSON.stringify(data, null, 2));\r\n\r\n      return data;\r\n    },\r\n    subscribe: opts => {\r\n      const subscription = baseClient\r\n        .subscribe({\r\n          query: authenticateSubscriptionDocument(opts),\r\n        })\r\n        .subscribe({\r\n          next: message => {\r\n            ENABLE_LOGGING &&\r\n              console.log(\r\n                'subscription message',\r\n                JSON.stringify(message, null, 2)\r\n              );\r\n            if (!message.data)\r\n              opts.onError(\r\n                new Error(`Unexpected message structure.\\n${message}`)\r\n              );\r\n            else opts.onMessage(message.data);\r\n          },\r\n          error: opts.onError,\r\n        });\r\n\r\n      return () => subscription.unsubscribe();\r\n    },\r\n    mutate: async opts => {\r\n      ENABLE_LOGGING &&\r\n        console.log(\r\n          'mutations',\r\n          opts.mutations.map(mutation => mutation.loc?.source.body)\r\n        );\r\n      return await Promise.all(\r\n        opts.mutations.map(mutation =>\r\n          baseClient.mutate({\r\n            mutation,\r\n            context: {\r\n              batchedMutation: true,\r\n              ...getContextWithToken({ token: opts.token }),\r\n            },\r\n          })\r\n        )\r\n      );\r\n    },\r\n  };\r\n\r\n  return gqlClient;\r\n}\r\n","import { DocumentNode, gql } from '@apollo/client/core';\r\nimport { OBJECT_PROPERTY_SEPARATOR } from '..';\r\n\r\nimport {\r\n  DeepPartial,\r\n  GetResultingDataTypeFromNodeDefinition,\r\n  INode,\r\n} from '../types';\r\nimport { convertNodeDataToSMPersistedData } from './convertNodeDataToSMPersistedData';\r\nimport { getMutationNameFromOperations } from './getMutationNameFromOperations';\r\n\r\nexport type UpdateNodesOperation = {\r\n  type: 'updateNodes';\r\n  operationName: 'UpdateNodes';\r\n  nodes: Array<{\r\n    data: { id: string } & Record<string, any>;\r\n    position?: number;\r\n    onSuccess?: (data: any) => void;\r\n    onFail?: () => void;\r\n  }>;\r\n  name?: string;\r\n};\r\n\r\nexport function updateNodes(\r\n  operation: Omit<UpdateNodesOperation, 'type' | 'operationName'>\r\n): UpdateNodesOperation {\r\n  return {\r\n    type: 'updateNodes',\r\n    operationName: 'UpdateNodes',\r\n    ...operation,\r\n  };\r\n}\r\n\r\nexport type UpdateNodeOperation<\r\n  TNode extends INode = INode<any, Record<string, any>>\r\n> = {\r\n  type: 'updateNode';\r\n  operationName: 'UpdateNodes';\r\n  data: { id: string } & DeepPartial<\r\n    GetResultingDataTypeFromNodeDefinition<TNode>\r\n  >;\r\n  name?: string;\r\n  onSuccess?: (data: any) => void;\r\n  onFail?: () => void;\r\n};\r\n\r\nexport function updateNode<\r\n  TNode extends INode = INode<any, Record<string, any>>\r\n>(\r\n  operation: Omit<UpdateNodeOperation<TNode>, 'type' | 'operationName'>\r\n): UpdateNodeOperation<TNode> {\r\n  return {\r\n    type: 'updateNode',\r\n    operationName: 'UpdateNodes',\r\n    ...operation,\r\n  };\r\n}\r\n\r\nfunction getPropertiesToNull(object: Record<string, any>) {\r\n  return Object.entries(object).reduce((acc, [key, value]) => {\r\n    if (value == null) acc.push(key);\r\n    else if (!Array.isArray(value) && typeof value === 'object') {\r\n      acc.push(\r\n        ...getPropertiesToNull(value).map(\r\n          property => `${key}${OBJECT_PROPERTY_SEPARATOR}${property}`\r\n        )\r\n      );\r\n    }\r\n\r\n    return acc;\r\n  }, [] as Array<string>);\r\n}\r\n\r\nexport function getMutationsFromTransactionUpdateOperations(\r\n  operations: Array<UpdateNodeOperation | UpdateNodesOperation>\r\n): Array<DocumentNode> {\r\n  if (!operations.length) return [];\r\n\r\n  const allUpdateNodeOperations: Array<{\r\n    id: string;\r\n  }> = operations.flatMap(operation => {\r\n    if (operation.type === 'updateNode') {\r\n      return operation.data;\r\n    } else if (operation.type === 'updateNodes') {\r\n      return operation.nodes.map(({ data }) => data);\r\n    } else {\r\n      throw Error(`Operation not recognized: \"${operation}\"`);\r\n    }\r\n  });\r\n\r\n  const name = getMutationNameFromOperations(operations, 'UpdateNodes');\r\n\r\n  const dropPropertiesMutations = allUpdateNodeOperations.reduce(\r\n    (acc, updateNodeOperation) => {\r\n      const propertiesToNull = getPropertiesToNull(updateNodeOperation);\r\n      if (propertiesToNull.length) {\r\n        acc.push(gql`\r\n        mutation {\r\n          DropProperties(\r\n            nodeIds: [\"${updateNodeOperation.id}\"]\r\n            propertyNames: [${propertiesToNull\r\n              .map(prop => `\"${prop}${OBJECT_PROPERTY_SEPARATOR}*\"`)\r\n              .join(',')}]\r\n            transactional: true\r\n          )\r\n          { \r\n            id\r\n          }\r\n      }\r\n      `);\r\n      }\r\n      return acc;\r\n    },\r\n    [] as Array<DocumentNode>\r\n  );\r\n\r\n  // For now, returns a single mutation\r\n  // later, we may choose to alter this behavior, if we find performance gains in splitting the mutations\r\n  return [\r\n    gql`\r\n        mutation ${name} {\r\n          UpdateNodes(\r\n            nodes: [\r\n              ${allUpdateNodeOperations\r\n                .map(convertUpdateNodeOperationToUpdateNodesMutationArguments)\r\n                .join('\\n')}\r\n            ]\r\n            transactional: true\r\n          ) {\r\n            id\r\n          }\r\n        }\r\n      `,\r\n  ].concat(dropPropertiesMutations);\r\n}\r\n\r\nfunction convertUpdateNodeOperationToUpdateNodesMutationArguments(operation: {\r\n  id: string;\r\n}): string {\r\n  const dataToPersist = convertNodeDataToSMPersistedData(operation);\r\n\r\n  return `{\r\n      ${dataToPersist}\r\n    }`;\r\n}\r\n","import { DEFAULT_NODE_PROPERTIES } from './consts';\r\nimport { createDOFactory } from './DO';\r\nimport { createDOProxyGenerator } from './DOProxyGenerator';\r\nimport { ImpliedNodePropertyException } from './exceptions';\r\nimport { OptimisticUpdatesOrchestrator } from './OptimisticUpdates';\r\nimport { RepositoryFactory } from './Repository';\r\nimport { generateQuerier, generateSubscriber } from './queriers';\r\nimport { createQueryManager } from './QueryManager';\r\nimport { createTransaction } from './transaction/transaction';\r\nimport { QuerySlimmer } from './QuerySlimmer';\r\nimport {\r\n  IMMGQL,\r\n  Config,\r\n  IData,\r\n  DataDefaultFn,\r\n  NodeRelationalQueryBuilderRecord,\r\n  NodeDefArgs,\r\n  INode,\r\n  NodeDefaultProps,\r\n  EPaginationFilteringSortingInstance,\r\n} from './types';\r\n\r\nexport * from './types';\r\nexport * from './dataTypes';\r\nexport * from './react';\r\nexport * from './config';\r\nexport * from './gqlClient';\r\nexport * from './consts';\r\nexport * from './generateMockDataUtilities';\r\nexport { gql } from '@apollo/client';\r\n\r\nexport class MMGQL implements IMMGQL {\r\n  public gqlClient: IMMGQL['gqlClient'];\r\n  public generateMockData: IMMGQL['generateMockData'];\r\n  public enableQuerySlimming: IMMGQL['enableQuerySlimming'];\r\n  public enableQuerySlimmingLogging: IMMGQL['enableQuerySlimmingLogging'];\r\n  public paginationFilteringSortingInstance: IMMGQL['paginationFilteringSortingInstance'];\r\n  public plugins: IMMGQL['plugins'];\r\n  public query: IMMGQL['query'];\r\n  public subscribe: IMMGQL['subscribe'];\r\n  public QueryManager: IMMGQL['QueryManager'];\r\n  public QuerySlimmer: IMMGQL['QuerySlimmer'];\r\n  public transaction: IMMGQL['transaction'];\r\n  public tokens: Record<string, string> = {};\r\n  public DOFactory: IMMGQL['DOFactory'];\r\n  public DOProxyGenerator: IMMGQL['DOProxyGenerator'];\r\n  private optimisticUpdatesOrchestrator: InstanceType<\r\n    typeof OptimisticUpdatesOrchestrator\r\n  >;\r\n\r\n  constructor(config: Config) {\r\n    this.gqlClient = config.gqlClient;\r\n    this.generateMockData = config.generateMockData;\r\n    this.enableQuerySlimming = config.enableQuerySlimming;\r\n    this.enableQuerySlimmingLogging = config.enableQuerySlimmingLogging;\r\n    this.paginationFilteringSortingInstance =\r\n      config.paginationFilteringSortingInstance;\r\n    this.plugins = config.plugins;\r\n    this.query = generateQuerier({ mmGQLInstance: this });\r\n    this.subscribe = generateSubscriber(this);\r\n    this.DOProxyGenerator = createDOProxyGenerator(this);\r\n    this.DOFactory = createDOFactory(this);\r\n    this.QueryManager = createQueryManager(this);\r\n    this.QuerySlimmer = new QuerySlimmer(this);\r\n    this.optimisticUpdatesOrchestrator = new OptimisticUpdatesOrchestrator();\r\n    this.transaction = createTransaction(this, {\r\n      onUpdateRequested: this.optimisticUpdatesOrchestrator.onUpdateRequested,\r\n    });\r\n\r\n    if (\r\n      config.generateMockData &&\r\n      config.paginationFilteringSortingInstance ===\r\n        EPaginationFilteringSortingInstance.SERVER\r\n    ) {\r\n      throw Error(\r\n        `mmGQL was told to generate mock data and use \"SERVER\" pagination/filtering/sorting. Switch paginationFilteringSortingInstance to \"CLIENT\"`\r\n      );\r\n    }\r\n  }\r\n\r\n  public def<\r\n    TNodeType extends string,\r\n    TNodeData extends Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData extends Record<string, any> = {},\r\n    TNodeRelationalData extends NodeRelationalQueryBuilderRecord = {}\r\n  >(\r\n    def: NodeDefArgs<{\r\n      TNodeType: TNodeType;\r\n      TNodeData: TNodeData;\r\n      TNodeComputedData: TNodeComputedData;\r\n      TNodeRelationalData: TNodeRelationalData;\r\n    }>\r\n  ): INode<{\r\n    TNodeType: TNodeType;\r\n    TNodeData: TNodeData;\r\n    TNodeComputedData: TNodeComputedData;\r\n    TNodeRelationalData: TNodeRelationalData;\r\n  }> {\r\n    if (def.type.includes('-') || def.type.includes('.')) {\r\n      throw new Error('Node types cannot include hyphens or dots');\r\n    }\r\n\r\n    const propertyNames = Object.keys(def.properties);\r\n    const defaultProp = propertyNames.find(x =>\r\n      Object.keys(DEFAULT_NODE_PROPERTIES).includes(x)\r\n    );\r\n    if (defaultProp) {\r\n      throw new ImpliedNodePropertyException({\r\n        propName: defaultProp,\r\n      });\r\n    }\r\n    const properties = this.addDefaultNodeProperties(def.properties);\r\n    const defWithDefaultProperties = { ...def, properties };\r\n    const DOClass = this.DOFactory(defWithDefaultProperties);\r\n\r\n    return {\r\n      _isNodeDef: true,\r\n      do: DOClass,\r\n      repository: RepositoryFactory({\r\n        def: defWithDefaultProperties,\r\n        DOClass,\r\n        onDOConstructed: this.optimisticUpdatesOrchestrator.onDOConstructed,\r\n        onDODeleted: this.optimisticUpdatesOrchestrator.onDODeleted,\r\n        onDataReceived: this.optimisticUpdatesOrchestrator\r\n          .onPersistedDataReceived,\r\n      }),\r\n      type: def.type,\r\n      data: properties,\r\n      computed: def.computed,\r\n      relational: def.relational,\r\n      generateMockData: def.generateMockData,\r\n    };\r\n  }\r\n\r\n  // This is simply an easier to consume version of the \"def\" function above\r\n  // if explicit types are needed\r\n  //\r\n  public defTyped<TNode extends INode>(\r\n    def: TNode extends INode<infer TNodeArgs> ? NodeDefArgs<TNodeArgs> : never\r\n  ): TNode {\r\n    return this.def(def) as TNode;\r\n  }\r\n\r\n  public getToken(opts: { tokenName: string }): string {\r\n    return this.tokens[opts.tokenName];\r\n  }\r\n\r\n  public setToken(opts: { tokenName: string; token: string }): void {\r\n    this.tokens[opts.tokenName] = opts.token;\r\n  }\r\n\r\n  public clearTokens() {\r\n    this.tokens = {};\r\n  }\r\n\r\n  private addDefaultNodeProperties<\r\n    T extends Record<string, IData | DataDefaultFn>\r\n  >(nodeProperties: T): T & NodeDefaultProps {\r\n    return {\r\n      ...nodeProperties,\r\n      ...DEFAULT_NODE_PROPERTIES,\r\n    };\r\n  }\r\n}\r\n","import { PROPERTIES_QUERIED_FOR_ALL_NODES } from './consts';\r\nimport {\r\n  NotUpToDateException,\r\n  NotUpToDateInComputedException,\r\n} from './exceptions';\r\nimport { OBJECT_PROPERTY_SEPARATOR } from './dataTypes';\r\nimport {\r\n  IMMGQL,\r\n  IData,\r\n  DataDefaultFn,\r\n  IDOProxy,\r\n  INode,\r\n  NodeDO,\r\n  Maybe,\r\n  RelationalQueryRecordEntry,\r\n  DATA_TYPES,\r\n} from './types';\r\n\r\nexport function createDOProxyGenerator(mmGQLInstance: IMMGQL) {\r\n  /**\r\n   * When some data fetcher like \"useQuery\" requests some data we do not directly return the DO instances\r\n   * Instead, we decorate each DO instance with a bit of functionality\r\n   * Firstly, we add getters for relational results\r\n   *      For example, if I request a list of todos and an assignee for each of those todos\r\n   *        this proxy generator would be adding an \"assignee\" getter to each todo and\r\n   *        that assignee getter would return a PROXIED DO for that user\r\n   *\r\n   * Why not just store that data on the do instance directly?\r\n   *      For this case I just described it wouldn't be a problem, since a todo has a single assignee\r\n   *      But imagine a scenario in which a developer is querying for a specific meeting and all active todos in that meeting\r\n   *        and then lazily querying all the archived todos for that meeting.\r\n   *        If the developer isn't extremely careful with naming collision (activeTodos vs archivedTodos distinction, vs just calling them \"todos\")\r\n   *        it's easy to see how this would create a problem if both query sources are getting the same DO instance\r\n   *\r\n   *      To get around this problem, EACH REQUEST RESULT WILL RETURN ITS OWN INSTANCE OF A PROXIED DO\r\n   *         so naming collision is never a problem.\r\n   *\r\n   *      This also gives us the benefit of support different paging results being displayed simultaneously, since again, the relation results from different\r\n   *         queries will never overwrite each other.\r\n   *\r\n   *\r\n   * Another use for this proxy is to ensure the developer receives helpful errors when they try to read some data that is not being subscribed to\r\n   *      This means that if I query a list of users, request their \"firstName\" and \"id\", but then attempt to read user.lastName from the result of that query\r\n   *      we don't just return the cached value, or undefined, because this is likely unintentional. Most apps will want to have real time data.\r\n   *\r\n   *      Instead, we'll throw an error and tell them - hey, you tried to read this property from this node type in this query, but you didn't request it/aren't subscribed to it!\r\n   */\r\n  return function DOProxyGenerator<\r\n    TNodeType extends string,\r\n    TNodeData extends Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData extends Record<string, any>,\r\n    TRelationalResults extends Record<string, Array<IDOProxy> | IDOProxy>\r\n  >(opts: {\r\n    node: INode<{\r\n      TNodeType: TNodeType;\r\n      TNodeData: TNodeData;\r\n      TNodeComputedData: TNodeComputedData;\r\n      TNodeRelationalData: any;\r\n    }>;\r\n    queryId: string;\r\n    do: NodeDO;\r\n    // The DOProxy protects the dev from reading a property that we haven't actually queried from the backend\r\n    allPropertiesQueried: Array<string>;\r\n    relationalResults: Maybe<TRelationalResults>;\r\n    relationalQueries: Maybe<Record<string, RelationalQueryRecordEntry>>;\r\n  }): NodeDO & TRelationalResults & IDOProxy {\r\n    let relationalResults = opts.relationalResults;\r\n\r\n    // Casting to unknown here because we don't want type safety around structure of a node's data when building plugins\r\n    // but completely losing type safety in opts.node.computed would break the return type inference in QueryDataReturn\r\n    const nodeComputed = (opts.node.computed as unknown) as Record<\r\n      string,\r\n      (proxy: IDOProxy) => any\r\n    >;\r\n    const computedAccessors = nodeComputed\r\n      ? Object.keys(nodeComputed).reduce((acc, computedKey) => {\r\n          let computedFn = () => nodeComputed[computedKey](proxy as IDOProxy);\r\n          mmGQLInstance.plugins?.forEach(plugin => {\r\n            if (plugin.DOProxy?.computedDecorator) {\r\n              computedFn = plugin.DOProxy.computedDecorator({\r\n                ProxyInstance: proxy,\r\n                computedFn,\r\n              });\r\n            }\r\n          });\r\n\r\n          acc[computedKey] = computedFn;\r\n\r\n          return acc;\r\n        }, {} as Record<string, () => any>)\r\n      : {};\r\n\r\n    const proxy = new Proxy(opts.do as Record<string, any>, {\r\n      getOwnPropertyDescriptor: function(target, key: string) {\r\n        // This gives better json stringify results\r\n        // by preventing attempts to get properties which are not\r\n        // guaranteed to be up to date\r\n        if (\r\n          opts.allPropertiesQueried.includes(key) ||\r\n          (opts.relationalQueries &&\r\n            Object.keys(opts.relationalQueries).includes(key)) ||\r\n          Object.keys(PROPERTIES_QUERIED_FOR_ALL_NODES).includes(key)\r\n        ) {\r\n          return {\r\n            ...Object.getOwnPropertyDescriptor(target, key),\r\n            enumerable: true,\r\n          };\r\n        }\r\n\r\n        // enumerate computed properties which have all the data they need queried\r\n        // otherwise they throw NotUpToDateException and we don't enumerate\r\n        if (nodeComputed && Object.keys(nodeComputed).includes(key)) {\r\n          try {\r\n            computedAccessors[key]();\r\n            return {\r\n              ...Object.getOwnPropertyDescriptor(target, key),\r\n              enumerable: true,\r\n            };\r\n          } catch (e) {\r\n            if (!(e instanceof NotUpToDateException)) throw e;\r\n\r\n            return {\r\n              ...Object.getOwnPropertyDescriptor(target, key),\r\n              enumerable: false,\r\n            };\r\n          }\r\n        }\r\n\r\n        return {\r\n          ...Object.getOwnPropertyDescriptor(target, key),\r\n          enumerable: false,\r\n        };\r\n      },\r\n      get: (target, key: string) => {\r\n        if (key === 'updateRelationalResults') {\r\n          return (newRelationalResults: Maybe<TRelationalResults>) => {\r\n            relationalResults = {\r\n              ...relationalResults,\r\n              ...newRelationalResults,\r\n            } as Maybe<TRelationalResults>;\r\n          };\r\n        }\r\n\r\n        if (\r\n          relationalResults &&\r\n          opts.relationalQueries &&\r\n          Object.keys(relationalResults).includes(key)\r\n        ) {\r\n          if ('oneToOne' in opts.relationalQueries[key]) {\r\n            return relationalResults[key];\r\n          }\r\n          return relationalResults[key];\r\n        }\r\n\r\n        if (Object.keys(opts.node.data).includes(key)) {\r\n          if (!opts.allPropertiesQueried.includes(key)) {\r\n            throw new NotUpToDateException({\r\n              propName: key,\r\n              queryId: opts.queryId,\r\n              nodeType: opts.node.type,\r\n            });\r\n          }\r\n\r\n          const dataForThisProp = opts.node.data[key] as IData;\r\n          if (\r\n            dataForThisProp.type === DATA_TYPES.object ||\r\n            dataForThisProp.type === DATA_TYPES.maybeObject\r\n          ) {\r\n            // do not return an object if this prop came back as null from backend\r\n            if (opts.do[key] == null) return opts.do[key];\r\n\r\n            return getNestedObjectWithNotUpToDateProtection({\r\n              nodeType: opts.node.type,\r\n              queryId: opts.queryId,\r\n              allCachedData: opts.do[key],\r\n              dataForThisObject: dataForThisProp.boxedValue,\r\n              allPropertiesQueried: opts.allPropertiesQueried,\r\n              parentObjectKey: key,\r\n            });\r\n          }\r\n\r\n          return opts.do[key];\r\n        } else if (computedAccessors[key]) {\r\n          try {\r\n            return computedAccessors[key]();\r\n          } catch (e) {\r\n            if (e instanceof NotUpToDateException) {\r\n              throw new NotUpToDateInComputedException({\r\n                computedPropName: key,\r\n                propName: e.propName,\r\n                nodeType: opts.node.type,\r\n                queryId: opts.queryId,\r\n              });\r\n            }\r\n\r\n            throw e;\r\n          }\r\n        }\r\n\r\n        return target[key];\r\n      },\r\n    }) as NodeDO & TRelationalResults & IDOProxy;\r\n\r\n    return proxy;\r\n  };\r\n\r\n  function getNestedObjectWithNotUpToDateProtection(opts: {\r\n    nodeType: string;\r\n    queryId: string;\r\n    allCachedData: Record<string, any>;\r\n    dataForThisObject: Record<string, IData>;\r\n    allPropertiesQueried: Array<string>;\r\n    parentObjectKey: Maybe<string>;\r\n  }) {\r\n    const objectToReturn = {};\r\n\r\n    Object.keys(opts.dataForThisObject).forEach(objectProp => {\r\n      const name = opts.parentObjectKey\r\n        ? `${opts.parentObjectKey}${OBJECT_PROPERTY_SEPARATOR}${objectProp}`\r\n        : objectProp;\r\n      const dataForThisProp = opts.dataForThisObject[objectProp];\r\n      const isUpToDate =\r\n        opts.allPropertiesQueried.includes(name) ||\r\n        // this second case handles ensuring that nested objects are enumerable\r\n        // for example, if user matches the interface { address: { apt: { floor: number, unit: number } } }\r\n        // and we request address_apt_floor and address_apt_unit\r\n        // we need to make address.apt enumerable below\r\n        opts.allPropertiesQueried.some(prop => prop.startsWith(name));\r\n\r\n      Object.defineProperty(objectToReturn, objectProp, {\r\n        // @TODO write tests for this enumeration\r\n        enumerable: isUpToDate,\r\n        get: () => {\r\n          if (\r\n            dataForThisProp.type === DATA_TYPES.object ||\r\n            dataForThisProp.type === DATA_TYPES.maybeObject\r\n          ) {\r\n            if (opts.allCachedData[objectProp] == null)\r\n              return opts.allCachedData[objectProp];\r\n\r\n            return getNestedObjectWithNotUpToDateProtection({\r\n              nodeType: opts.nodeType,\r\n              queryId: opts.queryId,\r\n              allCachedData: opts.allCachedData[objectProp],\r\n              dataForThisObject: dataForThisProp.boxedValue,\r\n              allPropertiesQueried: opts.allPropertiesQueried,\r\n              parentObjectKey: name,\r\n            });\r\n          }\r\n\r\n          if (!isUpToDate) {\r\n            throw new NotUpToDateException({\r\n              propName: name,\r\n              nodeType: opts.nodeType,\r\n              queryId: opts.queryId,\r\n            });\r\n          }\r\n\r\n          return opts.allCachedData\r\n            ? opts.allCachedData[objectProp]\r\n            : undefined;\r\n        },\r\n      });\r\n    });\r\n\r\n    return objectToReturn;\r\n  }\r\n}\r\n","import { PROPERTIES_QUERIED_FOR_ALL_NODES } from './consts';\r\nimport { NULL_TAG } from './dataConversions';\r\nimport { Data } from './dataTypes';\r\nimport {\r\n  IMMGQL,\r\n  IData,\r\n  DataDefaultFn,\r\n  NodeRelationalQueryBuilderRecord,\r\n  NodeDO,\r\n  NodeComputedFns,\r\n  NodeRelationalFns,\r\n  DeepPartial,\r\n  NodeRelationalQueryBuilder,\r\n  INode,\r\n  DATA_TYPES,\r\n} from './types';\r\n\r\nexport function createDOFactory(mmGQLInstance: IMMGQL) {\r\n  /**\r\n   * Returns a DO class, since there is one instance of the DO class\r\n   * for each instance of that node type that is fetched from the backend\r\n   */\r\n  return function DOFactory<\r\n    TNodeData extends Record<string, IData | DataDefaultFn>,\r\n    TNodeComputedData extends Record<string, any>,\r\n    TNodeRelationalData extends NodeRelationalQueryBuilderRecord,\r\n    TDOClass = new (initialData?: Record<string, any>) => NodeDO\r\n  >(node: {\r\n    type: string;\r\n    properties: TNodeData;\r\n    computed?: NodeComputedFns<{\r\n      TNodeData: TNodeData;\r\n      TNodeComputedData: TNodeComputedData;\r\n    }>;\r\n    relational?: NodeRelationalFns<TNodeRelationalData>;\r\n  }): TDOClass {\r\n    // silences the error \"A class can only implement an object type or intersection of object types with statically known members.\"\r\n    // wich happens because NodeDO has non statically known members (each property on a node in the backend is mapped to a non-statically known property on the DO)\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    return class DO implements TDOClass {\r\n      public parsedData: DeepPartial<TNodeData>;\r\n      public version: number = -1;\r\n      public id: string;\r\n      public lastUpdatedBy: string;\r\n      public persistedData: Record<string, any> = {};\r\n      private _defaults: Record<keyof TNodeData, any>;\r\n      public type = node.type;\r\n\r\n      constructor(\r\n        initialData: DeepPartial<TNodeData> & {\r\n          version: number;\r\n          id: string;\r\n          lastUpdatedBy: string;\r\n        }\r\n      ) {\r\n        this._defaults = this.getDefaultData(node.properties);\r\n        this.id = initialData.id;\r\n        this.lastUpdatedBy = initialData.lastUpdatedBy;\r\n        if (initialData.version != null) {\r\n          this.version = Number(initialData.version);\r\n        }\r\n\r\n        if (initialData) {\r\n          this.persistedData = this.parseReceivedData({\r\n            initialData,\r\n            nodeProperties: node.properties,\r\n          });\r\n        }\r\n\r\n        this.parsedData = this.getParsedData({\r\n          data: node.properties,\r\n          persistedData: this.persistedData,\r\n          defaultData: this._defaults,\r\n        });\r\n        mmGQLInstance.plugins?.forEach(plugin => {\r\n          if (plugin.DO?.onConstruct) {\r\n            plugin.DO.onConstruct({\r\n              DOInstance: this,\r\n              parsedDataKey: 'parsedData',\r\n            });\r\n          }\r\n        });\r\n\r\n        this.initializeNodePropGetters();\r\n        this.initializeNodeComputedGetters();\r\n        this.initializeNodeRelationalGetters();\r\n      }\r\n\r\n      private parseReceivedData(opts: {\r\n        initialData: Record<string, any>;\r\n        nodeProperties: typeof node.properties;\r\n      }) {\r\n        const { initialData, nodeProperties } = opts;\r\n\r\n        return Object.entries(nodeProperties).reduce(\r\n          (acc, [propName, propValue]) => {\r\n            const property = this.getData(propValue);\r\n\r\n            const propExistsInInitialData =\r\n              propName in initialData &&\r\n              initialData[propName] != null &&\r\n              initialData[propName] !== NULL_TAG;\r\n\r\n            if (this.isObjectType(property.type) && propExistsInInitialData) {\r\n              acc[propName] = this.parseReceivedData({\r\n                initialData: initialData[propName],\r\n                nodeProperties: property.boxedValue,\r\n              });\r\n            } else if (\r\n              this.isArrayType(property.type) &&\r\n              propExistsInInitialData\r\n            ) {\r\n              acc[propName] = initialData[propName].map(\r\n                property.boxedValue.parser\r\n              );\r\n            } else if (\r\n              propName in initialData &&\r\n              initialData[propName] === null\r\n            ) {\r\n              acc[propName] = null;\r\n            } else if (propExistsInInitialData) {\r\n              acc[propName] = property.parser(initialData[propName]);\r\n            }\r\n\r\n            return acc;\r\n          },\r\n          {} as Record<string, any>\r\n        );\r\n      }\r\n\r\n      private getDefaultData = (\r\n        nodePropertiesOrData:\r\n          | typeof node.properties\r\n          | Data<any>\r\n          | ((_default: any) => Data<any>)\r\n      ): Record<keyof TNodeData, any> => {\r\n        if (nodePropertiesOrData instanceof Data) {\r\n          if (this.isObjectType(nodePropertiesOrData.type)) {\r\n            return this.getDefaultData(nodePropertiesOrData.boxedValue);\r\n          }\r\n          return nodePropertiesOrData.defaultValue;\r\n        }\r\n\r\n        const getDefaultFnValue = (\r\n          propName?: keyof TNodeData,\r\n          defaultData?: IData\r\n        ) => {\r\n          const defaultFn =\r\n            defaultData ||\r\n            ((nodePropertiesOrData as TNodeData)[\r\n              propName as keyof TNodeData\r\n            ] as any)._default;\r\n\r\n          // if a boolean dataType is not passed a default value, it returns an error. We throw it here\r\n          if (defaultFn instanceof Error) {\r\n            throw defaultFn;\r\n          }\r\n\r\n          // if array type, we need to set the default value as an array containing the parent type's boxedValue\r\n          if (this.isArrayType(defaultFn.type)) {\r\n            if (this.isObjectType(defaultFn.boxedValue.type)) {\r\n              return [this.getDefaultData(defaultFn.boxedValue.boxedValue)];\r\n            }\r\n            return [defaultFn.boxedValue.defaultValue];\r\n          }\r\n\r\n          return defaultFn.defaultValue;\r\n        };\r\n\r\n        if (typeof nodePropertiesOrData === 'function') {\r\n          return getDefaultFnValue(\r\n            undefined,\r\n            (nodePropertiesOrData as any)._default as IData\r\n          );\r\n        }\r\n\r\n        return Object.keys(nodePropertiesOrData).reduce(\r\n          (acc, prop: keyof TNodeData) => {\r\n            const propValue = nodePropertiesOrData[prop] as IData;\r\n            if (\r\n              this.isObjectType(propValue.type) ||\r\n              this.isRecordType(propValue.type)\r\n            ) {\r\n              acc[prop] = this.getDefaultData(propValue.boxedValue);\r\n            } else if (typeof propValue === 'function') {\r\n              const defaultValue = getDefaultFnValue(prop);\r\n\r\n              acc[prop] = defaultValue;\r\n            } else {\r\n              acc[prop] = (nodePropertiesOrData[prop] as IData).defaultValue;\r\n            }\r\n            return acc;\r\n          },\r\n          {} as Record<keyof TNodeData, any>\r\n        );\r\n      };\r\n\r\n      private getParsedData(opts: {\r\n        data: IData | Record<string, IData | DataDefaultFn>; // because it can be a single value (dataTypes.number, dataTypes.string, dataTypes.boolean, dataTypes.array, dataTypes.record) or an object (root node data, nested objects)\r\n        persistedData: any;\r\n        defaultData: any;\r\n      }) {\r\n        if (\r\n          opts.data instanceof Data &&\r\n          opts.data.isOptional &&\r\n          opts.persistedData == null\r\n        ) {\r\n          return null;\r\n        }\r\n\r\n        const property = this.getData(opts.data as IData);\r\n\r\n        if (property instanceof Data && property.boxedValue) {\r\n          // sm.array, sm.object or sm.record\r\n          if (this.isArrayType(property.type)) {\r\n            if (opts.persistedData) {\r\n              return (opts.persistedData || []).map((data: any) => {\r\n                return this.getParsedData({\r\n                  data: property.boxedValue,\r\n                  persistedData: data,\r\n                  defaultData:\r\n                    property.type === DATA_TYPES.array\r\n                      ? opts.defaultData?.[0] || null // If property is a non-optional array and the boxed value is of type sm.object, the default data for an array should be an array with a single item, where that item is the default data for that object\r\n                      : null,\r\n                });\r\n              });\r\n            } else {\r\n              return opts.defaultData;\r\n            }\r\n          } else {\r\n            // sm.object, sm.record\r\n            // safe to assume that if we made it this far, the expected data type is object and it's non optional, so lets default it to {}\r\n            if (!opts.persistedData) {\r\n              opts.persistedData = {};\r\n            }\r\n\r\n            const boxedValueData = this.getData(property.boxedValue);\r\n\r\n            if (boxedValueData instanceof Data) {\r\n              // sm.record\r\n              return Object.keys(opts.persistedData).reduce((acc, key) => {\r\n                acc[key] = this.getParsedData({\r\n                  data: property.boxedValue,\r\n                  persistedData: opts.persistedData[key],\r\n                  defaultData: opts.defaultData, //opts.defaultData,\r\n                }); // no default value for values in a record\r\n                return acc;\r\n              }, {} as Record<string, any>);\r\n            } else {\r\n              // if we're dealing with an object, lets loop over the keys in its boxed value\r\n              return Object.keys(property.boxedValue).reduce((acc, key) => {\r\n                acc[key] = this.getParsedData({\r\n                  data: property.boxedValue[key],\r\n                  persistedData: opts.persistedData[key],\r\n                  defaultData: opts.defaultData?.[key],\r\n                });\r\n                return acc;\r\n              }, {} as Record<string, any>);\r\n            }\r\n          }\r\n        } else if (property instanceof Data) {\r\n          // sm.string, sm.boolean, sm.number\r\n\r\n          // if a property was nulled using our old format, parse as native null\r\n          if (opts.persistedData === NULL_TAG && opts.data.isOptional) {\r\n            return null;\r\n          }\r\n\r\n          if (opts.persistedData != null) {\r\n            return property.parser(opts.persistedData);\r\n          }\r\n\r\n          return opts.defaultData;\r\n        } else {\r\n          // root of node, simply loop over keys of data definition and call this function recursively\r\n          return Object.keys(property).reduce((acc, prop) => {\r\n            acc[prop] = this.getParsedData({\r\n              // @ts-ignore\r\n              data: property[prop],\r\n              persistedData: opts.persistedData[prop],\r\n              defaultData: opts.defaultData[prop],\r\n            });\r\n            return acc;\r\n          }, {} as Record<string, any>);\r\n        }\r\n      }\r\n\r\n      public onDataReceived = (\r\n        receivedData: {\r\n          version: number;\r\n          lastUpdatedBy: string;\r\n        } & DeepPartial<TNodeData>,\r\n        opts?: { __unsafeIgnoreVersion: boolean }\r\n      ) => {\r\n        if (receivedData.version == null) {\r\n          throw Error('Message received for a node was missing a version');\r\n        }\r\n\r\n        const newVersion = Number(receivedData.version);\r\n\r\n        // __unsafeIgnoreVersion should used by OptimisticUpdatesOrchestrator ONLY\r\n        // it allows setting the data on the DO to a version older than the last optimistic update\r\n        // so that we can revert on a failed request\r\n        if (opts?.__unsafeIgnoreVersion || newVersion >= this.version) {\r\n          this.version = newVersion;\r\n          this.lastUpdatedBy = receivedData.lastUpdatedBy;\r\n\r\n          const newData = this.parseReceivedData({\r\n            initialData: receivedData,\r\n            nodeProperties: node.properties,\r\n          });\r\n\r\n          this.extendPersistedWithNewlyReceivedData({\r\n            data: node.properties,\r\n            object: this.persistedData,\r\n            extension: newData,\r\n          });\r\n\r\n          this.parsedData = this.getParsedData({\r\n            data: node.properties,\r\n            persistedData: this.persistedData,\r\n            defaultData: this._defaults,\r\n          });\r\n        }\r\n      };\r\n\r\n      private extendPersistedWithNewlyReceivedData(opts: {\r\n        data: Record<string, IData | DataDefaultFn>;\r\n        object: Record<string, any>;\r\n        extension: Record<string, any>;\r\n      }) {\r\n        Object.entries(opts.extension).forEach(([key, value]) => {\r\n          const dataForThisProp = this.getData(opts.data[key]);\r\n\r\n          // if this is a record, completely overwrite the stored persisted data\r\n          if (this.isRecordType(dataForThisProp.type)) {\r\n            opts.object[key] = value;\r\n          } else {\r\n            // if it's an object, extend the persisted data we've received so far with the newly received data\r\n            if (this.isObjectType(dataForThisProp.type)) {\r\n              if (value == null) {\r\n                opts.object[key] = null;\r\n              } else {\r\n                opts.object[key] = opts.object[key] || {};\r\n\r\n                this.extendPersistedWithNewlyReceivedData({\r\n                  data: dataForThisProp.boxedValue,\r\n                  object: opts.object[key],\r\n                  extension: value,\r\n                });\r\n              }\r\n            } else {\r\n              // otherwise no need to extend, simply overwrite the value\r\n              opts.object[key] = value;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      /**\r\n       * initializes getters for properties that are stored on this node in the backend\r\n       * as properties on this DO instance\r\n       */\r\n      private initializeNodePropGetters() {\r\n        Object.keys(node.properties).forEach(prop => {\r\n          if (Object.keys(PROPERTIES_QUERIED_FOR_ALL_NODES).includes(prop)) {\r\n            // do not create getters for any properties included in the node definition which are already being queried by sm-js regardless\r\n            // since the code in this DO relies on setting those properties directly using this.version or this.lastUpdatedBy\r\n            return;\r\n          }\r\n\r\n          const property = this.getData(node.properties[prop]);\r\n\r\n          if (this.isObjectType(property.type)) {\r\n            this.setObjectProp(prop);\r\n          } else if (this.isArrayType(property.type)) {\r\n            this.setArrayProp(prop);\r\n          } else {\r\n            this.setPrimitiveValueProp(prop);\r\n          }\r\n        });\r\n      }\r\n\r\n      private initializeNodeComputedGetters() {\r\n        const computedData = node.computed;\r\n        if (computedData) {\r\n          Object.keys(computedData).forEach(computedProp => {\r\n            this.setComputedProp({\r\n              propName: computedProp,\r\n              computedFn: computedData[computedProp] as (\r\n                data: Record<string, any>\r\n              ) => any,\r\n            });\r\n          });\r\n        }\r\n      }\r\n\r\n      private initializeNodeRelationalGetters() {\r\n        const relationalData = node.relational;\r\n        if (relationalData) {\r\n          Object.keys(relationalData).forEach(relationshipName => {\r\n            this.setRelationalProp({\r\n              relationshipName,\r\n              relationalQueryGetter: relationalData[\r\n                relationshipName\r\n              ] as () => NodeRelationalQueryBuilder<any>,\r\n            });\r\n          });\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Object type props have different getters and setters than non object type\r\n       * because when an object property is set we extend the previous value, instead of replacing its reference entirely (we've seen great performance gains doing this)\r\n       */\r\n      private setObjectProp = (propNameForThisObject: string) => {\r\n        Object.defineProperty(this, propNameForThisObject, {\r\n          configurable: true,\r\n          enumerable: true,\r\n          get: () => {\r\n            return this.parsedData[propNameForThisObject];\r\n          },\r\n        });\r\n      };\r\n\r\n      private setPrimitiveValueProp = (propName: string) => {\r\n        Object.defineProperty(this, propName, {\r\n          configurable: true,\r\n          enumerable: true,\r\n          get: () => {\r\n            return this.parsedData[propName];\r\n          },\r\n        });\r\n      };\r\n\r\n      private setArrayProp = (propName: string) => {\r\n        Object.defineProperty(this, propName, {\r\n          configurable: true,\r\n          enumerable: true,\r\n          get: () => {\r\n            return this.parsedData[propName];\r\n          },\r\n        });\r\n      };\r\n\r\n      private setComputedProp(opts: {\r\n        propName: string;\r\n        computedFn: (nodeData: Record<string, any>) => any;\r\n      }) {\r\n        let computedGetter = () => opts.computedFn(this);\r\n        mmGQLInstance.plugins?.forEach(plugin => {\r\n          if (plugin.DO?.computedDecorator) {\r\n            computedGetter = plugin.DO.computedDecorator({\r\n              computedFn: computedGetter,\r\n              DOInstance: this,\r\n            });\r\n          }\r\n        });\r\n\r\n        Object.defineProperty(this, opts.propName, {\r\n          get: () => computedGetter(),\r\n          configurable: true,\r\n          enumerable: true,\r\n        });\r\n      }\r\n\r\n      private setRelationalProp(opts: {\r\n        relationshipName: string;\r\n        relationalQueryGetter: () => NodeRelationalQueryBuilder<\r\n          INode<{\r\n            TNodeType: any;\r\n            TNodeData: TNodeData;\r\n            TNodeComputedData: TNodeComputedData;\r\n            TNodeRelationalData: TNodeRelationalData;\r\n          }>\r\n        >;\r\n      }) {\r\n        Object.defineProperty(this, opts.relationshipName, {\r\n          configurable: true,\r\n          get: () => {\r\n            return opts.relationalQueryGetter();\r\n          },\r\n        });\r\n      }\r\n\r\n      private getData(prop: IData<any> | DataDefaultFn) {\r\n        if (typeof prop === 'function') {\r\n          return (prop as any)._default as IData;\r\n        }\r\n        return prop as IData;\r\n      }\r\n\r\n      private isArrayType(type: string) {\r\n        return type === DATA_TYPES.array || type === DATA_TYPES.maybeArray;\r\n      }\r\n\r\n      private isObjectType(type: string) {\r\n        return type === DATA_TYPES.object || type === DATA_TYPES.maybeObject;\r\n      }\r\n\r\n      private isRecordType(type: string) {\r\n        return type === DATA_TYPES.record || type === DATA_TYPES.maybeRecord;\r\n      }\r\n    };\r\n  };\r\n}\r\n","import { OnPaginateCallback, NodesCollection } from './nodesCollection';\r\nimport { RELATIONAL_UNION_QUERY_SEPARATOR } from './consts';\r\nimport { DataParsingException } from './exceptions';\r\nimport {\r\n  IDOProxy,\r\n  Maybe,\r\n  IMMGQL,\r\n  IQueryManager,\r\n  QueryRecord,\r\n  BaseQueryRecordEntry,\r\n  RelationalQueryRecordEntry,\r\n  QueryRecordEntry,\r\n  IQueryPagination,\r\n} from './types';\r\n\r\ntype QueryManagerState = Record<\r\n  string, // the alias for this set of results\r\n  QueryManagerStateEntry\r\n>;\r\n\r\ntype QueryManagerStateEntry = {\r\n  // which id or ids represent the most up to date results for this alias, used in conjunction with proxyCache to build a returned data set\r\n  idsOrIdInCurrentResult: string | Array<string> | null;\r\n  proxyCache: QueryManagerProxyCache;\r\n  pagination?: IQueryPagination;\r\n};\r\n\r\ntype QueryManagerProxyCache = Record<\r\n  string, // id of the node\r\n  QueryManagerProxyCacheEntry\r\n>;\r\n\r\ntype QueryManagerProxyCacheEntry = {\r\n  proxy: IDOProxy;\r\n  relationalState: Maybe<QueryManagerState>;\r\n}; // the proxy for that DO and relational state from the query results/latest subscription message\r\n\r\ntype QueryManagerOpts = { onPaginate?: OnPaginateCallback };\r\n\r\nexport function createQueryManager(mmGQLInstance: IMMGQL) {\r\n  /**\r\n   * QueryManager is in charge of\r\n   *\r\n   *    1) receiving data from a query and notifying the appropriate DO repositories\r\n   *    2) building proxies for those DOs\r\n   *    3) keeping a cache of those generated proxies so that we can update proxies on subscription messages, rather than generating new ones\r\n   *    4) handling incoming subscription messages and\r\n   *       4.1) notifying DO repositories with the data in those sub messages\r\n   *       4.2) build proxies for new DOs received + update relational data (recursively) for proxies that had been previously built\r\n   *    5) building the resulting data that is returned by queriers from its cache of proxies\r\n   */\r\n  return class QueryManager implements IQueryManager {\r\n    public state: QueryManagerState = {};\r\n    public queryRecord: QueryRecord;\r\n    public opts: QueryManagerOpts | undefined;\r\n\r\n    constructor(queryRecord: QueryRecord, opts?: QueryManagerOpts) {\r\n      this.queryRecord = queryRecord;\r\n      this.opts = opts;\r\n    }\r\n\r\n    public onQueryResult(opts: { queryResult: any; queryId: string }) {\r\n      this.notifyRepositories({\r\n        data: opts.queryResult,\r\n        queryRecord: this.queryRecord,\r\n      });\r\n\r\n      this.state = this.getNewStateFromQueryResult({\r\n        ...opts,\r\n        queryRecord: this.queryRecord,\r\n      });\r\n    }\r\n\r\n    public onSubscriptionMessage(opts: {\r\n      node: Record<string, any>;\r\n      operation: {\r\n        action: 'UpdateNode' | 'DeleteNode' | 'InsertNode' | 'DeleteEdge';\r\n        path: string;\r\n      };\r\n      queryId: string;\r\n      subscriptionAlias: string;\r\n    }) {\r\n      const { node, subscriptionAlias } = opts;\r\n      const queryRecordEntryForThisSubscription = this.queryRecord[\r\n        subscriptionAlias\r\n      ];\r\n\r\n      this.notifyRepositories({\r\n        data: {\r\n          [subscriptionAlias]: node,\r\n        },\r\n        queryRecord: {\r\n          [subscriptionAlias]: queryRecordEntryForThisSubscription,\r\n        },\r\n      });\r\n\r\n      this.updateProxiesAndStateFromSubscriptionMessage(opts);\r\n    }\r\n\r\n    /**\r\n     * Returns the current results based on received query results and subscription messages\r\n     */\r\n    getResults() {\r\n      return this.getResultsFromState(this.state);\r\n    }\r\n\r\n    /**\r\n     * Is used to build the overall results for the query, and also to build the relational results used by each proxy\r\n     * which is why \"state\" is a param here\r\n     */\r\n    public getResultsFromState(state: QueryManagerState): Record<string, any> {\r\n      const acc = Object.keys(state).reduce((resultsAcc, queryAlias) => {\r\n        const stateForThisAlias = state[queryAlias];\r\n        const idsOrId = stateForThisAlias.idsOrIdInCurrentResult;\r\n        const resultsAlias = this.removeUnionSuffix(queryAlias);\r\n\r\n        if (Array.isArray(idsOrId)) {\r\n          const ids = idsOrId.map(id => stateForThisAlias.proxyCache[id].proxy);\r\n          resultsAcc[resultsAlias] = new NodesCollection({\r\n            items: ids,\r\n            itemsPerPage:\r\n              stateForThisAlias.pagination?.itemsPerPage || ids.length,\r\n            page: stateForThisAlias.pagination?.page || 1,\r\n            onPaginate: this.opts?.onPaginate,\r\n          });\r\n        } else if (idsOrId) {\r\n          resultsAcc[resultsAlias] =\r\n            stateForThisAlias.proxyCache[idsOrId].proxy;\r\n        } else {\r\n          resultsAcc[resultsAlias] = null;\r\n        }\r\n\r\n        return resultsAcc;\r\n      }, {} as Record<string, any>);\r\n\r\n      return acc;\r\n    }\r\n\r\n    /**\r\n     * Takes a queryRecord and the data that resulted from that query\r\n     * notifies the appropriate repositories so that DOs can be constructed or updated\r\n     */\r\n    public notifyRepositories(opts: {\r\n      data: Record<string, any>;\r\n      queryRecord: {\r\n        [key: string]: QueryRecordEntry | RelationalQueryRecordEntry;\r\n      };\r\n    }) {\r\n      Object.keys(opts.queryRecord).forEach(queryAlias => {\r\n        const dataForThisAlias = this.getDataFromResponse({\r\n          queryRecord: opts.queryRecord[queryAlias],\r\n          dataForThisAlias: opts.data[queryAlias],\r\n        });\r\n\r\n        if (!dataForThisAlias) {\r\n          throw Error(\r\n            `notifyRepositories could not find resulting data for the alias \"${queryAlias}\" in the following queryRecord:\\n${JSON.stringify(\r\n              opts.queryRecord,\r\n              null,\r\n              2\r\n            )}\\nResulting data:\\n${JSON.stringify(opts.data, null, 2)}`\r\n          );\r\n        }\r\n\r\n        const nodeRepository = opts.queryRecord[queryAlias].def.repository;\r\n\r\n        if (Array.isArray(dataForThisAlias)) {\r\n          dataForThisAlias.forEach(data => nodeRepository.onDataReceived(data));\r\n        } else {\r\n          nodeRepository.onDataReceived(dataForThisAlias);\r\n        }\r\n\r\n        const relationalQueries = opts.queryRecord[queryAlias].relational;\r\n\r\n        if (relationalQueries) {\r\n          Object.keys(relationalQueries).forEach(relationalAlias => {\r\n            let relationalDataForThisAlias = Array.isArray(dataForThisAlias)\r\n              ? dataForThisAlias.flatMap(\r\n                  (dataEntry: any) => dataEntry[relationalAlias]\r\n                )\r\n              : dataForThisAlias[relationalAlias];\r\n\r\n            // makes it easier to simply handle this as an array below\r\n            if (!Array.isArray(relationalDataForThisAlias)) {\r\n              relationalDataForThisAlias = [relationalDataForThisAlias];\r\n            }\r\n\r\n            relationalDataForThisAlias.forEach((relationalDataEntry: any) => {\r\n              const relationalQuery = relationalQueries[relationalAlias];\r\n\r\n              if (relationalAlias.includes(RELATIONAL_UNION_QUERY_SEPARATOR)) {\r\n                const node = relationalDataEntry;\r\n                if (node && node.type !== relationalQuery.def.type) return;\r\n              }\r\n\r\n              this.notifyRepositories({\r\n                data: {\r\n                  [relationalAlias]: relationalDataEntry,\r\n                },\r\n                queryRecord: {\r\n                  [relationalAlias]: relationalQuery,\r\n                },\r\n              });\r\n            });\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Gets the initial state for this manager from the initial query results\r\n     *   does not execute on subscription messages\r\n     */\r\n    public getNewStateFromQueryResult(opts: {\r\n      queryResult: Record<string, any>;\r\n      queryId: string;\r\n      queryRecord: Record<string, BaseQueryRecordEntry>;\r\n    }): QueryManagerState {\r\n      return Object.keys(opts.queryRecord).reduce(\r\n        (resultingStateAcc, queryAlias) => {\r\n          const cacheEntry = this.buildCacheEntry({\r\n            nodeData: this.getDataFromResponse({\r\n              dataForThisAlias: opts.queryResult[queryAlias],\r\n              queryRecord: opts.queryRecord[queryAlias],\r\n            }),\r\n            queryId: opts.queryId,\r\n            queryAlias,\r\n          });\r\n\r\n          if (!cacheEntry) return resultingStateAcc;\r\n          resultingStateAcc[queryAlias] = cacheEntry;\r\n\r\n          return resultingStateAcc;\r\n        },\r\n        {} as QueryManagerState\r\n      );\r\n    }\r\n\r\n    public buildCacheEntry(opts: {\r\n      nodeData: Record<string, any> | Array<Record<string, any>>;\r\n      queryId: string;\r\n      queryAlias: string;\r\n      queryRecord?: QueryRecord;\r\n    }): Maybe<QueryManagerStateEntry> {\r\n      const { nodeData, queryAlias } = opts;\r\n      const queryRecord = opts.queryRecord || this.queryRecord;\r\n      const { relational } = queryRecord[opts.queryAlias];\r\n\r\n      // if the query alias includes a relational union query separator\r\n      // and the first item in the array of results has a type that does not match the type of the node def in this query record\r\n      // this means that the result node likely matches a different type in that union\r\n      if (queryAlias.includes(RELATIONAL_UNION_QUERY_SEPARATOR)) {\r\n        const node = (opts.nodeData as Array<any>)[0];\r\n        if (node && node.type !== queryRecord[opts.queryAlias].def.type)\r\n          return null;\r\n      }\r\n\r\n      const buildRelationalStateForNode = (\r\n        node: Record<string, any>\r\n      ): Maybe<QueryManagerState> => {\r\n        if (!relational) return null;\r\n\r\n        return Object.keys(relational).reduce(\r\n          (relationalStateAcc, relationalAlias) => {\r\n            const relationalDataForThisAlias = this.getDataFromResponse({\r\n              queryRecord: relational[relationalAlias],\r\n              dataForThisAlias: node[relationalAlias],\r\n            });\r\n            if (!relationalDataForThisAlias) return relationalStateAcc;\r\n\r\n            const cacheEntry = this.buildCacheEntry({\r\n              nodeData: relationalDataForThisAlias,\r\n              queryId: opts.queryId,\r\n              queryAlias: relationalAlias,\r\n              queryRecord: (relational as unknown) as QueryRecord,\r\n            });\r\n            if (!cacheEntry) return relationalStateAcc;\r\n\r\n            return {\r\n              ...relationalStateAcc,\r\n              [this.removeUnionSuffix(relationalAlias)]: cacheEntry,\r\n            };\r\n          },\r\n          {} as QueryManagerState\r\n        );\r\n      };\r\n\r\n      const buildProxyCacheEntryForNode = (\r\n        node: Record<string, any>\r\n      ): QueryManagerProxyCacheEntry => {\r\n        const relationalState = buildRelationalStateForNode(node);\r\n        const nodeRepository = queryRecord[queryAlias].def.repository;\r\n        const relationalQueries = relational\r\n          ? this.getApplicableRelationalQueries({\r\n              relationalQueries: relational,\r\n              nodeData: node,\r\n            })\r\n          : null;\r\n\r\n        const proxy = mmGQLInstance.DOProxyGenerator({\r\n          node: queryRecord[opts.queryAlias].def,\r\n          allPropertiesQueried: queryRecord[opts.queryAlias].properties,\r\n          relationalQueries: relationalQueries,\r\n          queryId: opts.queryId,\r\n          relationalResults: !relationalState\r\n            ? null\r\n            : this.getResultsFromState(relationalState),\r\n          do: nodeRepository.byId(node.id),\r\n        });\r\n\r\n        return {\r\n          proxy,\r\n          relationalState,\r\n        };\r\n      };\r\n\r\n      if (Array.isArray(opts.nodeData)) {\r\n        if ('id' in queryRecord[opts.queryAlias]) {\r\n          if (opts.nodeData[0] == null) {\r\n            if (!queryRecord[opts.queryAlias].allowNullResult)\r\n              throw new DataParsingException({\r\n                receivedData: opts.nodeData,\r\n                message: `Queried a node by id for the query with the id \"${opts.queryId}\" but received back an empty array`,\r\n              });\r\n\r\n            return {\r\n              idsOrIdInCurrentResult: null,\r\n              proxyCache: {},\r\n            };\r\n          }\r\n\r\n          return {\r\n            idsOrIdInCurrentResult: opts.nodeData[0].id,\r\n            proxyCache: opts.nodeData.reduce((proxyCacheAcc, node) => {\r\n              proxyCacheAcc[node.id] = buildProxyCacheEntryForNode(node);\r\n\r\n              return proxyCacheAcc;\r\n            }, {} as QueryManagerProxyCache),\r\n          };\r\n        } else {\r\n          return {\r\n            idsOrIdInCurrentResult: opts.nodeData.map(node => node.id),\r\n            proxyCache: opts.nodeData.reduce((proxyCacheAcc, node) => {\r\n              proxyCacheAcc[node.id] = buildProxyCacheEntryForNode(node);\r\n\r\n              return proxyCacheAcc;\r\n            }, {} as QueryManagerProxyCache),\r\n            pagination: queryRecord[opts.queryAlias].pagination,\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          idsOrIdInCurrentResult: opts.nodeData.id,\r\n          proxyCache: {\r\n            [(nodeData as { id: string }).id]: buildProxyCacheEntryForNode(\r\n              nodeData\r\n            ),\r\n          },\r\n        };\r\n      }\r\n    }\r\n\r\n    public updateProxiesAndStateFromSubscriptionMessage(opts: {\r\n      node: any;\r\n      queryId: string;\r\n      operation: {\r\n        action: 'UpdateNode' | 'DeleteNode' | 'InsertNode' | 'DeleteEdge';\r\n        path: string;\r\n      };\r\n      subscriptionAlias: string;\r\n    }) {\r\n      const { node, queryId, subscriptionAlias, operation } = opts;\r\n      if (\r\n        (operation.action === 'DeleteNode' ||\r\n          operation.action === 'DeleteEdge') &&\r\n        operation.path === node.id\r\n      ) {\r\n        const idsOrIdInCurrentResult = this.state[subscriptionAlias]\r\n          .idsOrIdInCurrentResult;\r\n        if (Array.isArray(idsOrIdInCurrentResult)) {\r\n          this.state[\r\n            subscriptionAlias\r\n          ].idsOrIdInCurrentResult = idsOrIdInCurrentResult.filter(\r\n            id => id !== node.id\r\n          );\r\n        } else {\r\n          this.state[subscriptionAlias].idsOrIdInCurrentResult = null;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      const queryRecordEntryForThisSubscription = this.queryRecord[\r\n        subscriptionAlias\r\n      ];\r\n      this.state[subscriptionAlias] = this.state[subscriptionAlias] || {};\r\n      const stateForThisAlias = this.state[subscriptionAlias];\r\n      const nodeId = node.id;\r\n      const { proxy, relationalState } =\r\n        stateForThisAlias.proxyCache[nodeId] || {};\r\n\r\n      if (proxy) {\r\n        const newCacheEntry = this.recursivelyUpdateProxyAndReturnNewCacheEntry(\r\n          {\r\n            queryId,\r\n            proxy,\r\n            newRelationalData: this.getRelationalData({\r\n              queryRecord: queryRecordEntryForThisSubscription,\r\n              node: opts.node,\r\n            }),\r\n            relationalQueryRecord:\r\n              queryRecordEntryForThisSubscription.relational || null,\r\n            currentState: { proxy, relationalState },\r\n          }\r\n        );\r\n        stateForThisAlias.proxyCache[nodeId] = newCacheEntry;\r\n      } else {\r\n        const cacheEntry = this.buildCacheEntry({\r\n          nodeData: node,\r\n          queryId,\r\n          queryAlias: subscriptionAlias,\r\n          queryRecord: this.queryRecord,\r\n        });\r\n        if (!cacheEntry) return;\r\n        const { proxyCache } = cacheEntry;\r\n\r\n        const newlyGeneratedProxy = proxyCache[node.id];\r\n\r\n        if (!newlyGeneratedProxy)\r\n          throw Error('Expected a newly generated proxy');\r\n\r\n        stateForThisAlias.proxyCache[nodeId] = proxyCache[node.id];\r\n      }\r\n\r\n      if ('id' in queryRecordEntryForThisSubscription) {\r\n        if ((stateForThisAlias.idsOrIdInCurrentResult as string) === nodeId) {\r\n          return;\r\n        }\r\n\r\n        this.state[opts.subscriptionAlias].idsOrIdInCurrentResult = nodeId;\r\n      } else {\r\n        if (\r\n          (\r\n            stateForThisAlias.idsOrIdInCurrentResult || ([] as Array<string>)\r\n          ).includes(nodeId)\r\n        )\r\n          return; // don't need to do anything if this id was already in the returned set\r\n\r\n        this.state[opts.subscriptionAlias].idsOrIdInCurrentResult = [\r\n          nodeId, // insert the new node at the start of the array\r\n          ...(this.state[opts.subscriptionAlias]\r\n            .idsOrIdInCurrentResult as Array<string>),\r\n        ];\r\n      }\r\n    }\r\n\r\n    public recursivelyUpdateProxyAndReturnNewCacheEntry(opts: {\r\n      queryId: string;\r\n      proxy: IDOProxy;\r\n      newRelationalData: Maybe<\r\n        Record<string, Array<Record<string, any> | Record<string, any>>>\r\n      >;\r\n      relationalQueryRecord: Maybe<Record<string, RelationalQueryRecordEntry>>;\r\n      currentState: QueryManagerProxyCacheEntry;\r\n    }): QueryManagerProxyCacheEntry {\r\n      const {\r\n        queryId,\r\n        proxy,\r\n        newRelationalData,\r\n        currentState,\r\n        relationalQueryRecord,\r\n      } = opts;\r\n      const { relationalState: currentRelationalState } = currentState;\r\n\r\n      const newRelationalState = !relationalQueryRecord\r\n        ? null\r\n        : Object.keys(relationalQueryRecord).reduce(\r\n            (relationalStateAcc, relationalAlias) => {\r\n              if (!newRelationalData || !newRelationalData[relationalAlias]) {\r\n                return relationalStateAcc;\r\n              }\r\n\r\n              const relationalDataForThisAlias =\r\n                newRelationalData[relationalAlias];\r\n              const queryRecordForThisAlias =\r\n                relationalQueryRecord[relationalAlias];\r\n\r\n              const currentStateForThisAlias = !currentRelationalState\r\n                ? null\r\n                : currentRelationalState[relationalAlias];\r\n\r\n              if (!currentStateForThisAlias) {\r\n                const cacheEntry = this.buildCacheEntry({\r\n                  nodeData: relationalDataForThisAlias,\r\n                  queryId,\r\n                  queryAlias: relationalAlias,\r\n                  queryRecord: (relationalQueryRecord as unknown) as QueryRecord,\r\n                });\r\n\r\n                if (!cacheEntry) return relationalStateAcc;\r\n\r\n                relationalStateAcc[relationalAlias] = cacheEntry;\r\n\r\n                return relationalStateAcc;\r\n              }\r\n\r\n              if (Array.isArray(relationalDataForThisAlias)) {\r\n                relationalStateAcc[relationalAlias] = relationalStateAcc[\r\n                  relationalAlias\r\n                ] || { proxyCache: {}, idsOrIdInCurrentResult: [] };\r\n\r\n                relationalDataForThisAlias.forEach(node => {\r\n                  const existingProxy =\r\n                    currentStateForThisAlias.proxyCache[node.id]?.proxy;\r\n\r\n                  if (!existingProxy) {\r\n                    const cacheEntry = this.buildCacheEntry({\r\n                      nodeData: node,\r\n                      queryId: queryId,\r\n                      queryAlias: relationalAlias,\r\n                      queryRecord: (relationalQueryRecord as unknown) as QueryRecord,\r\n                    });\r\n\r\n                    if (!cacheEntry) return;\r\n\r\n                    relationalStateAcc[relationalAlias] = {\r\n                      proxyCache: {\r\n                        ...relationalStateAcc[relationalAlias].proxyCache,\r\n                        [node.id]: cacheEntry.proxyCache[node.id],\r\n                      },\r\n                      idsOrIdInCurrentResult: [\r\n                        ...(relationalStateAcc[relationalAlias]\r\n                          .idsOrIdInCurrentResult as Array<string>),\r\n                        node.id,\r\n                      ],\r\n                    };\r\n                  } else {\r\n                    const newCacheEntry = this.recursivelyUpdateProxyAndReturnNewCacheEntry(\r\n                      {\r\n                        queryId,\r\n                        proxy: existingProxy,\r\n                        newRelationalData: this.getRelationalData({\r\n                          queryRecord: queryRecordForThisAlias,\r\n                          node,\r\n                        }),\r\n                        relationalQueryRecord:\r\n                          queryRecordForThisAlias.relational || null,\r\n                        currentState:\r\n                          currentStateForThisAlias.proxyCache[node.id],\r\n                      }\r\n                    );\r\n\r\n                    relationalStateAcc[relationalAlias] = {\r\n                      proxyCache: {\r\n                        ...relationalStateAcc[relationalAlias].proxyCache,\r\n                        [node.id]: newCacheEntry,\r\n                      },\r\n                      idsOrIdInCurrentResult: [\r\n                        ...(relationalStateAcc[relationalAlias]\r\n                          .idsOrIdInCurrentResult as Array<string>),\r\n                        node.id,\r\n                      ],\r\n                    };\r\n                  }\r\n                });\r\n              } else {\r\n                throw Error(\r\n                  `Not implemented. ${JSON.stringify(\r\n                    relationalDataForThisAlias\r\n                  )}`\r\n                );\r\n              }\r\n\r\n              return relationalStateAcc;\r\n            },\r\n            {} as QueryManagerState\r\n          );\r\n\r\n      newRelationalState\r\n        ? proxy.updateRelationalResults(\r\n            this.getResultsFromState(newRelationalState)\r\n          )\r\n        : proxy.updateRelationalResults(null);\r\n\r\n      return {\r\n        proxy,\r\n        relationalState: newRelationalState,\r\n      };\r\n    }\r\n\r\n    public getRelationalData(opts: {\r\n      queryRecord: BaseQueryRecordEntry;\r\n      node: Record<string, any>;\r\n    }) {\r\n      return opts.queryRecord.relational\r\n        ? Object.keys(opts.queryRecord.relational).reduce(\r\n            (relationalDataAcc, relationalAlias) => {\r\n              relationalDataAcc[relationalAlias] = opts.node[relationalAlias];\r\n\r\n              return relationalDataAcc;\r\n            },\r\n            {} as Record<string, any>\r\n          )\r\n        : null;\r\n    }\r\n\r\n    public removeUnionSuffix(alias: string) {\r\n      if (alias.includes(RELATIONAL_UNION_QUERY_SEPARATOR))\r\n        return alias.split(RELATIONAL_UNION_QUERY_SEPARATOR)[0];\r\n      else return alias;\r\n    }\r\n\r\n    public getApplicableRelationalQueries(opts: {\r\n      relationalQueries: Record<string, RelationalQueryRecordEntry>;\r\n      nodeData: Record<string, any>;\r\n    }) {\r\n      return Object.keys(opts.relationalQueries).reduce(\r\n        (acc, relationalQueryAlias) => {\r\n          if (!relationalQueryAlias.includes(RELATIONAL_UNION_QUERY_SEPARATOR))\r\n            return {\r\n              ...acc,\r\n              [relationalQueryAlias]:\r\n                opts.relationalQueries[relationalQueryAlias],\r\n            };\r\n\r\n          const firstResult = opts.nodeData[relationalQueryAlias]\r\n            ? opts.nodeData[relationalQueryAlias][0]\r\n            : null;\r\n\r\n          // if the node.type returned in the relational query results does not match that of the relational query alias, skip adding this relational query\r\n          // this happens when a reference union is queried, for all nodes in the union type that do not match the type in the result\r\n          // and ensures that the correct node definition is used when building the decorated results for this query/subscription\r\n          if (\r\n            firstResult &&\r\n            firstResult.type !==\r\n              opts.relationalQueries[relationalQueryAlias].def.type\r\n          )\r\n            return acc;\r\n\r\n          return {\r\n            ...acc,\r\n            [this.removeUnionSuffix(relationalQueryAlias)]: opts\r\n              .relationalQueries[relationalQueryAlias],\r\n          };\r\n        },\r\n        {} as Record<string, RelationalQueryRecordEntry>\r\n      );\r\n    }\r\n\r\n    public getDataFromResponse(opts: {\r\n      queryRecord: BaseQueryRecordEntry;\r\n      dataForThisAlias: any;\r\n    }) {\r\n      return 'id' in opts.queryRecord || 'oneToOne' in opts.queryRecord\r\n        ? opts.dataForThisAlias\r\n        : opts.dataForThisAlias.nodes;\r\n    }\r\n  };\r\n}\r\n","import { DocumentNode } from '@apollo/client/core';\r\nimport { sortBy } from 'lodash';\r\nimport {\r\n  createEdge,\r\n  createEdges,\r\n  getMutationsFromEdgeCreateOperations,\r\n  dropEdge,\r\n  dropEdges,\r\n  getMutationsFromEdgeDropOperations,\r\n  replaceEdge,\r\n  replaceEdges,\r\n  getMutationsFromEdgeReplaceOperations,\r\n  updateEdge,\r\n  updateEdges,\r\n  getMutationsFromEdgeUpdateOperations,\r\n} from './edges';\r\nimport {\r\n  CreateEdgeOperation,\r\n  CreateEdgesOperation,\r\n  DropEdgeOperation,\r\n  DropEdgesOperation,\r\n  ReplaceEdgeOperation,\r\n  ReplaceEdgesOperation,\r\n  UpdateEdgeOperation,\r\n  UpdateEdgesOperation,\r\n} from './edges/types';\r\nimport {\r\n  createNode,\r\n  CreateNodeOperation,\r\n  createNodes,\r\n  CreateNodesOperation,\r\n  getMutationsFromTransactionCreateOperations,\r\n} from './create';\r\nimport {\r\n  getMutationsFromTransactionUpdateOperations,\r\n  updateNode,\r\n  UpdateNodeOperation,\r\n  updateNodes,\r\n  UpdateNodesOperation,\r\n} from './update';\r\nimport {\r\n  dropNode,\r\n  DropNodeOperation,\r\n  getMutationsFromTransactionDropOperations,\r\n} from './drop';\r\nimport { IMMGQL } from '../types';\r\nimport { DEFAULT_TOKEN_NAME } from '../consts';\r\n\r\nexport interface ITransactionContext {\r\n  createNodes: typeof createNodes;\r\n  createNode: typeof createNode;\r\n  updateNodes: typeof updateNodes;\r\n  updateNode: typeof updateNode;\r\n  dropNode: typeof dropNode;\r\n  createEdge: typeof createEdge;\r\n  createEdges: typeof createEdges;\r\n  dropEdge: typeof dropEdge;\r\n  dropEdges: typeof dropEdges;\r\n  updateEdge: typeof updateEdge;\r\n  updateEdges: typeof updateEdges;\r\n  replaceEdge: typeof replaceEdge;\r\n  replaceEdges: typeof replaceEdges;\r\n}\r\n\r\ntype TIndexedOperationType = OperationType & { position?: number };\r\n\r\ntype TExecutionResult =\r\n  | Array<{\r\n      data: Record<string, any>;\r\n    }>\r\n  | Array<\r\n      Array<{\r\n        data: Record<string, any>;\r\n      }>\r\n    >;\r\n\r\ntype TOperationsByType = Record<\r\n  OperationType['type'],\r\n  Array<TIndexedOperationType>\r\n>;\r\n\r\nexport interface IPendingTransaction {\r\n  operations: TOperationsByType;\r\n  execute: () => Promise<any>;\r\n  callbackResult?: void | Promise<any> | Array<IPendingTransaction>;\r\n  token: string;\r\n}\r\n\r\ntype OperationType =\r\n  | CreateNodeOperation\r\n  | CreateNodesOperation\r\n  | UpdateNodeOperation\r\n  | UpdateNodesOperation\r\n  | DropNodeOperation\r\n  | CreateEdgeOperation\r\n  | CreateEdgesOperation\r\n  | DropEdgeOperation\r\n  | DropEdgesOperation\r\n  | UpdateEdgeOperation\r\n  | UpdateEdgesOperation\r\n  | ReplaceEdgeOperation\r\n  | ReplaceEdgesOperation;\r\n\r\nexport function createTransaction(\r\n  mmGQLInstance: IMMGQL,\r\n  globalOperationHandlers: {\r\n    onUpdateRequested(update: {\r\n      id: string;\r\n      payload: Record<string, any>;\r\n    }): { onUpdateFailed(): void; onUpdateSuccessful(): void };\r\n  }\r\n) {\r\n  /**\r\n   * A transaction allows developers to build groups of mutations that execute with transactional integrity\r\n   *   this means if one mutation fails, others are cancelled and any graph state changes are rolled back.\r\n   *\r\n   * The callback function can return a promise if the transaction requires some data fetching to build its list of operations.\r\n   */\r\n  return function transaction(\r\n    callback:\r\n      | ((context: ITransactionContext) => void | Promise<void>)\r\n      | Array<IPendingTransaction>,\r\n    opts?: { tokenName?: string }\r\n  ) {\r\n    const operationsByType: TOperationsByType = {\r\n      createNode: [],\r\n      createNodes: [],\r\n      updateNode: [],\r\n      updateNodes: [],\r\n      dropNode: [],\r\n      createEdge: [],\r\n      createEdges: [],\r\n      dropEdge: [],\r\n      dropEdges: [],\r\n      replaceEdge: [],\r\n      replaceEdges: [],\r\n      updateEdge: [],\r\n      updateEdges: [],\r\n    };\r\n\r\n    /**\r\n     * Keeps track of the number of operations performed in this transaction (for operations that we need to provide callback data for).\r\n     * This is used to store each operation's order in the transaction so that we can map it to the response we get back from the backend.\r\n     * The backend responds with each operation in the order they were sent up.\r\n     */\r\n    let createOperationsCount = 0;\r\n    let updateOperationsCount = 0;\r\n\r\n    function pushOperation(operation: OperationType) {\r\n      if (!operationsByType[operation.type]) {\r\n        throw Error(\r\n          `No operationsByType array initialized for \"${operation.type}\"`\r\n        );\r\n      }\r\n      /**\r\n       * createNodes/updateNodes creates multiple nodes in a single operation,\r\n       * therefore we need to track the position of these nodes instead of just the position of the operation itself\r\n       */\r\n      if (operation.type === 'createNodes') {\r\n        createOperationsCount += 1;\r\n\r\n        operationsByType[operation.type].push({\r\n          ...operation,\r\n          position: createOperationsCount,\r\n          nodes: operation.nodes.map((node, idx) => {\r\n            return {\r\n              ...node,\r\n              position:\r\n                idx === 0\r\n                  ? createOperationsCount\r\n                  : (createOperationsCount += 1),\r\n            };\r\n          }),\r\n        });\r\n      } else if (operation.type === 'createNode') {\r\n        createOperationsCount += 1;\r\n\r\n        operationsByType[operation.type].push({\r\n          ...operation,\r\n          position: createOperationsCount,\r\n        });\r\n      } else if (operation.type === 'updateNodes') {\r\n        updateOperationsCount += 1;\r\n\r\n        operationsByType[operation.type].push({\r\n          ...operation,\r\n          position: updateOperationsCount,\r\n          nodes: operation.nodes.map((node, idx) => {\r\n            return {\r\n              ...node,\r\n              position:\r\n                idx === 0\r\n                  ? updateOperationsCount\r\n                  : (updateOperationsCount += 1),\r\n            };\r\n          }),\r\n        });\r\n      } else if (operation.type === 'updateNode') {\r\n        updateOperationsCount += 1;\r\n        operationsByType[operation.type].push({\r\n          ...operation,\r\n          position: updateOperationsCount,\r\n        });\r\n      } else {\r\n        operationsByType[operation.type].push(operation);\r\n      }\r\n    }\r\n\r\n    const context: ITransactionContext = {\r\n      createNode: opts => {\r\n        const operation = createNode(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n      createNodes: opts => {\r\n        const operation = createNodes(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n      updateNode: opts => {\r\n        const operation = updateNode(opts);\r\n        const {\r\n          onUpdateSuccessful,\r\n          onUpdateFailed,\r\n        } = globalOperationHandlers.onUpdateRequested({\r\n          id: opts.data.id,\r\n          payload: opts.data,\r\n        });\r\n\r\n        pushOperation({\r\n          ...operation,\r\n          onSuccess: data => {\r\n            operation.onSuccess && operation.onSuccess(data);\r\n            onUpdateSuccessful();\r\n          },\r\n          onFail: () => {\r\n            operation.onFail && operation.onFail();\r\n            onUpdateFailed();\r\n          },\r\n        });\r\n        return operation;\r\n      },\r\n      updateNodes: opts => {\r\n        const operation = updateNodes(opts);\r\n\r\n        const globalHandlers = opts.nodes.map(node => {\r\n          return globalOperationHandlers.onUpdateRequested({\r\n            id: node.data.id,\r\n            payload: node.data,\r\n          });\r\n        });\r\n        pushOperation({\r\n          ...operation,\r\n          nodes: operation.nodes.map((node, nodeIdx) => ({\r\n            ...node,\r\n            onSuccess: data => {\r\n              node.onSuccess && node.onSuccess(data);\r\n              globalHandlers[nodeIdx].onUpdateSuccessful();\r\n            },\r\n            onFail: () => {\r\n              node.onFail && node.onFail();\r\n              globalHandlers[nodeIdx].onUpdateFailed();\r\n            },\r\n          })),\r\n        });\r\n        return operation;\r\n      },\r\n      dropNode: opts => {\r\n        const operation = dropNode(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n      createEdge: opts => {\r\n        const operation = createEdge(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n      createEdges: opts => {\r\n        const operation = createEdges(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n      dropEdge: opts => {\r\n        const operation = dropEdge(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n      dropEdges: opts => {\r\n        const operation = dropEdges(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n      updateEdge: opts => {\r\n        const operation = updateEdge(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n      updateEdges: opts => {\r\n        const operation = updateEdges(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n      replaceEdge: opts => {\r\n        const operation = replaceEdge(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n      replaceEdges: opts => {\r\n        const operation = replaceEdges(opts);\r\n        pushOperation(operation);\r\n        return operation;\r\n      },\r\n    };\r\n\r\n    function sortMutationsByTransactionPosition<T>(\r\n      operations: Array<TIndexedOperationType>\r\n    ) {\r\n      return (sortBy(\r\n        operations,\r\n        operation => operation.position\r\n      ) as unknown) as T;\r\n    }\r\n\r\n    function getAllMutations(\r\n      operations: TOperationsByType\r\n    ): Array<DocumentNode> {\r\n      return [\r\n        ...getMutationsFromTransactionCreateOperations(\r\n          sortMutationsByTransactionPosition([\r\n            ...(operations.createNode as Array<\r\n              CreateNodeOperation & { position: number }\r\n            >),\r\n            ...(operations.createNodes as Array<\r\n              CreateNodesOperation & { position: number }\r\n            >),\r\n          ])\r\n        ),\r\n        ...getMutationsFromTransactionUpdateOperations(\r\n          sortMutationsByTransactionPosition([\r\n            ...(operations.updateNode as Array<\r\n              UpdateNodeOperation & { position: number }\r\n            >),\r\n            ...(operations.updateNodes as Array<\r\n              UpdateNodesOperation & { position: number }\r\n            >),\r\n          ])\r\n        ),\r\n        ...getMutationsFromTransactionDropOperations([\r\n          ...(operations.dropNode as Array<DropNodeOperation>),\r\n        ]),\r\n        ...getMutationsFromEdgeCreateOperations([\r\n          ...(operations.createEdge as Array<CreateEdgeOperation>),\r\n          ...(operations.createEdges as Array<CreateEdgesOperation>),\r\n        ]),\r\n        ...getMutationsFromEdgeDropOperations([\r\n          ...(operations.dropEdge as Array<DropEdgeOperation>),\r\n          ...(operations.dropEdges as Array<DropEdgesOperation>),\r\n        ]),\r\n        ...getMutationsFromEdgeReplaceOperations([\r\n          ...(operations.replaceEdge as Array<ReplaceEdgeOperation>),\r\n          ...(operations.replaceEdges as Array<ReplaceEdgesOperation>),\r\n        ]),\r\n        ...getMutationsFromEdgeUpdateOperations([\r\n          ...(operations.updateEdge as Array<UpdateEdgeOperation>),\r\n          ...(operations.updateEdges as Array<UpdateEdgesOperation>),\r\n        ]),\r\n      ];\r\n    }\r\n\r\n    const tokenName = opts?.tokenName || DEFAULT_TOKEN_NAME;\r\n    const token = mmGQLInstance.getToken({ tokenName });\r\n\r\n    /**\r\n     * Group operations by their operation name, sorted by position if applicable\r\n     */\r\n    function groupByOperationName(operations: TOperationsByType) {\r\n      const result = Object.entries(operations).reduce(\r\n        (acc, [_, operations]) => {\r\n          operations.forEach(\r\n            (operation: TIndexedOperationType | OperationType) => {\r\n              if (acc.hasOwnProperty(operation.operationName)) {\r\n                acc[operation.operationName] = [\r\n                  ...acc[operation.operationName],\r\n                  operation,\r\n                ];\r\n              } else {\r\n                acc[operation.operationName] = [operation];\r\n              }\r\n            }\r\n          );\r\n          return acc;\r\n        },\r\n        {} as Record<string, Array<any>>\r\n      );\r\n\r\n      Object.entries(result).forEach(([operationName, operations]) => {\r\n        result[operationName] = sortBy(\r\n          operations,\r\n          operation => operation.position\r\n        );\r\n      });\r\n\r\n      return result;\r\n    }\r\n\r\n    if (Array.isArray(callback)) {\r\n      return transactionGroup(callback);\r\n    }\r\n\r\n    const result = callback(context);\r\n\r\n    function handleErrorCallbacks(opts: {\r\n      operationsByType: TOperationsByType;\r\n    }) {\r\n      const { operationsByType } = opts;\r\n\r\n      const operationsByOperationName = groupByOperationName(operationsByType);\r\n\r\n      Object.entries(operationsByOperationName).forEach(\r\n        ([operationName, operations]) => {\r\n          operations.forEach(operation => {\r\n            // we only need to gather the data for node create/update operations\r\n            if (\r\n              operationName === 'CreateNodes' ||\r\n              operationName === 'UpdateNodes'\r\n            ) {\r\n              // for createNodes, execute callback on each individual node rather than top-level operation\r\n              if (operation.hasOwnProperty('nodes')) {\r\n                operation.nodes.forEach((node: any) => {\r\n                  if (node.hasOwnProperty('onFail')) {\r\n                    node.onFail();\r\n                  }\r\n                });\r\n              } else if (operation.hasOwnProperty('onFail')) {\r\n                operation.onFail();\r\n              }\r\n            }\r\n          });\r\n        }\r\n      );\r\n    }\r\n\r\n    function handleSuccessCallbacks(opts: {\r\n      executionResult: TExecutionResult;\r\n      operationsByType: TOperationsByType;\r\n    }) {\r\n      const { executionResult, operationsByType } = opts;\r\n\r\n      const operationsByOperationName = groupByOperationName(operationsByType);\r\n\r\n      /**\r\n       * Loop through the operations, map the operation to each result sent back from the backend,\r\n       * then pass the result into the callback if it exists\r\n       */\r\n      const executeCallbacksWithData = (executionResult: TExecutionResult) => {\r\n        executionResult.forEach(\r\n          (\r\n            result:\r\n              | {\r\n                  data: Record<string, any>;\r\n                }\r\n              | {\r\n                  data: Record<string, any>;\r\n                }[]\r\n          ) => {\r\n            // if executionResult is 2d array\r\n            if (Array.isArray(result)) {\r\n              executeCallbacksWithData(result);\r\n            } else {\r\n              const resultData = result.data;\r\n\r\n              Object.entries(operationsByOperationName).forEach(\r\n                ([operationName, operations]) => {\r\n                  if (resultData.hasOwnProperty(operationName)) {\r\n                    operations.forEach(operation => {\r\n                      // we only need to gather the data for node create/update operations\r\n                      if (\r\n                        operationName === 'CreateNodes' ||\r\n                        operationName === 'UpdateNodes'\r\n                      ) {\r\n                        const groupedResult = resultData[operationName];\r\n                        // for createNodes, execute callback on each individual node rather than top-level operation\r\n                        if (operation.hasOwnProperty('nodes')) {\r\n                          operation.nodes.forEach((node: any) => {\r\n                            if (node.hasOwnProperty('onSuccess')) {\r\n                              const operationResult =\r\n                                groupedResult[node.position - 1];\r\n\r\n                              node.onSuccess(operationResult);\r\n                            }\r\n                          });\r\n                        } else if (operation.hasOwnProperty('onSuccess')) {\r\n                          const operationResult =\r\n                            groupedResult[operation.position - 1];\r\n                          operation.onSuccess(operationResult);\r\n                        }\r\n                      }\r\n                    });\r\n                  }\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n      };\r\n\r\n      executeCallbacksWithData(executionResult);\r\n\r\n      /**\r\n       * For all other operations, just invoke the callback with no args.\r\n       * Transactions will guarantee that all operations have succeeded, so this is safe to do\r\n       */\r\n      Object.entries(operationsByOperationName).forEach(\r\n        ([operationName, operations]) => {\r\n          if (\r\n            operationName !== 'CreateNodes' &&\r\n            operationName !== 'UpdateNodes'\r\n          ) {\r\n            operations.forEach(operation => {\r\n              if (operation.hasOwnProperty('onSuccess')) {\r\n                operation.onSuccess();\r\n              } else if (operation.hasOwnProperty('edges')) {\r\n                (operation.edges as CreateEdgesOperation['edges']).forEach(\r\n                  edgeOperation => {\r\n                    if (edgeOperation.hasOwnProperty('onSuccess')) {\r\n                      edgeOperation.onSuccess!();\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            });\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    async function execute() {\r\n      try {\r\n        if (typeof callback === 'function') {\r\n          if (result instanceof Promise) {\r\n            await result;\r\n          }\r\n        }\r\n        const mutations = getAllMutations(operationsByType);\r\n\r\n        const executionResult: TExecutionResult = await mmGQLInstance.gqlClient.mutate(\r\n          {\r\n            mutations,\r\n            token,\r\n          }\r\n        );\r\n\r\n        if (executionResult) {\r\n          handleSuccessCallbacks({\r\n            executionResult,\r\n            operationsByType,\r\n          });\r\n        }\r\n\r\n        return executionResult;\r\n      } catch (error) {\r\n        handleErrorCallbacks({\r\n          operationsByType,\r\n        });\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    return {\r\n      operations: operationsByType,\r\n      execute,\r\n      callbackResult: result,\r\n      token,\r\n    };\r\n\r\n    function transactionGroup(\r\n      transactions: Array<IPendingTransaction>\r\n    ): Omit<IPendingTransaction, 'callbackResult'> {\r\n      const asyncCallbacks = transactions\r\n        .filter(tx => tx.callbackResult instanceof Promise)\r\n        .map(({ callbackResult }) => callbackResult);\r\n\r\n      async function execute() {\r\n        try {\r\n          const allTokensMatch = transactions.every(\r\n            ({ token }) => token === transactions[0].token\r\n          );\r\n\r\n          if (!allTokensMatch) {\r\n            throw new Error(\r\n              'transactionGroup - All grouped transactions must use the same authentication token.'\r\n            );\r\n          }\r\n\r\n          if (asyncCallbacks.length) {\r\n            await Promise.all(asyncCallbacks);\r\n          }\r\n\r\n          const allMutations = transactions.map(({ operations }) => {\r\n            return mmGQLInstance.gqlClient.mutate({\r\n              mutations: getAllMutations(operations),\r\n              token,\r\n            });\r\n          });\r\n\r\n          const executionResults: Array<TExecutionResult> = await Promise.all(\r\n            allMutations\r\n          );\r\n\r\n          if (executionResults) {\r\n            executionResults.forEach((result, idx) => {\r\n              handleSuccessCallbacks({\r\n                executionResult: result,\r\n                operationsByType: transactions[idx].operations,\r\n              });\r\n            });\r\n          }\r\n\r\n          return executionResults.flat();\r\n        } catch (error) {\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      return {\r\n        operations: operationsByType,\r\n        execute,\r\n        token,\r\n      };\r\n    }\r\n  };\r\n}\r\n","import { DocumentNode, gql } from '@apollo/client/core';\r\n\r\nimport { getMutationNameFromOperations } from './getMutationNameFromOperations';\r\n\r\nexport type DropNodeOperation = {\r\n  type: 'dropNode';\r\n  operationName: 'DropNode';\r\n  id: string;\r\n  name?: string;\r\n  onSuccess?: () => any;\r\n};\r\n\r\nexport function dropNode(\r\n  operation: Omit<DropNodeOperation, 'type' | 'operationName'>\r\n): DropNodeOperation {\r\n  return {\r\n    type: 'dropNode',\r\n    operationName: 'DropNode',\r\n    ...operation,\r\n  };\r\n}\r\n\r\nexport function getMutationsFromTransactionDropOperations(\r\n  operations: Array<DropNodeOperation>\r\n): Array<DocumentNode> {\r\n  if (!operations.length) return [];\r\n\r\n  const allDropNodeOperations: Array<{\r\n    id: string;\r\n    name?: string;\r\n  }> = operations.map(operation => {\r\n    if (operation.type === 'dropNode') {\r\n      return operation;\r\n    } else {\r\n      throw Error(`Operation not recognized: \"${operation}\"`);\r\n    }\r\n  });\r\n\r\n  return allDropNodeOperations.map(operation => {\r\n    const name = getMutationNameFromOperations([operation], 'DropNode');\r\n\r\n    return gql`\r\n      mutation ${name} {\r\n        DropNode(nodeId: \"${operation.id}\", transactional: true)\r\n      }    \r\n    `;\r\n  });\r\n}\r\n","import { PROPERTIES_QUERIED_FOR_ALL_NODES } from './consts';\r\nimport {\r\n  JSON_TAG,\r\n  NULL_TAG,\r\n  parseJSONFromBE,\r\n  prepareValueForFE,\r\n} from './dataConversions';\r\nimport { NotCachedException, DataParsingException } from './exceptions';\r\nimport { OBJECT_PROPERTY_SEPARATOR, OBJECT_IDENTIFIER } from './dataTypes';\r\nimport {\r\n  IData,\r\n  DataDefaultFn,\r\n  NodeDO,\r\n  INodeRepository,\r\n  DeepPartial,\r\n  GetAllAvailableNodeDataType,\r\n  DATA_TYPES,\r\n} from './types';\r\n\r\n/**\r\n * Returns an initialized instance of a repository for a Node\r\n */\r\nexport function RepositoryFactory<\r\n  TNodeData extends Record<string, IData | DataDefaultFn>\r\n>(opts: {\r\n  def: {\r\n    type: string;\r\n    properties: TNodeData;\r\n  };\r\n  DOClass: new (initialData?: Record<string, any>) => NodeDO;\r\n  onDataReceived(opts: {\r\n    data: { id: string } & Record<string, any>;\r\n    applyUpdateToDO: () => void;\r\n  }): void;\r\n  onDOConstructed?(DO: NodeDO): void;\r\n  onDODeleted?(DO: NodeDO): void;\r\n}): INodeRepository {\r\n  // silences the error \"A class can only implement an object type or intersection of object types with statically known members.\"\r\n  // wich happens because NodeDO has non statically known members (each property on a node in the backend is mapped to a non-statically known property on the DO)\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  class Repository implements INodeRepository {\r\n    private cached: Record<string, NodeDO> = {};\r\n\r\n    public onDataReceived(\r\n      data: { id: string; type: string } & Record<string, any>\r\n    ) {\r\n      if (opts.def.type !== data.type) {\r\n        throw Error(\r\n          `Attempted to query a node with an id belonging to a different type - Expected: ${opts.def.type} Received: ${data.type}`\r\n        );\r\n      }\r\n      const cached = this.cached[data.id];\r\n\r\n      const parsedData = this.parseDataFromBackend<TNodeData>(data);\r\n\r\n      if (!cached) {\r\n        const newDO = new opts.DOClass(parsedData);\r\n        this.cached[data.id] = newDO;\r\n        opts.onDOConstructed && opts.onDOConstructed(newDO);\r\n      }\r\n\r\n      // applyUpdateToDO is called conditionally by OptimisticUpdatesOrchestrator\r\n      // see comments in that class to understand why\r\n      opts.onDataReceived({\r\n        data: parsedData,\r\n        applyUpdateToDO: () => {\r\n          // if there was no cached node it was already initialized with this data\r\n          // calling onDataReceived again would be wasted CPU cycles\r\n          cached && cached.onDataReceived(parsedData);\r\n        },\r\n      });\r\n    }\r\n\r\n    public byId(id: string) {\r\n      const cached = this.cached[id];\r\n\r\n      if (!cached) {\r\n        throw new NotCachedException({\r\n          nodeType: opts.def.type,\r\n          id,\r\n        });\r\n      }\r\n\r\n      return cached;\r\n    }\r\n\r\n    public onNodeDeleted(id: string) {\r\n      if (this.cached[id]) {\r\n        if (opts.onDODeleted) {\r\n          opts.onDODeleted(this.cached[id]);\r\n        }\r\n        delete this.cached[id];\r\n      }\r\n    }\r\n    /**\r\n     * This method takes data that comes in from the backend and is about to be applied to this DO's instance. It needs to:\r\n     * 1) ignore data not specified in the node definition for this node\r\n     *     this is so that the querier in dataContext can call onDataReceived on the DO with the data it receives from the backend without having to ignore the relational aliases there\r\n     *     without doing this, we'd get errors about attempting to set a property on a DO which is read only\r\n     * 2) take objects spread into root properties and convert them to regular objects\r\n     *     for example, if we are trying to store `settings: { show: true }` in the backend, what is actually stored in the DB is\r\n     *     settings__dot__show: 'true'\r\n     *     since all data must be a string (we don't need to worry about coercing strings to booleans or numbers though, that's handled by the dataTypes)\r\n     */\r\n    private parseDataFromBackend<\r\n      TNodeData extends Record<string, IData | DataDefaultFn>\r\n    >(\r\n      receivedData: any\r\n    ): { id: string; version: number } & DeepPartial<\r\n      GetAllAvailableNodeDataType<{\r\n        TNodeData: TNodeData;\r\n        TNodeComputedData: {};\r\n      }>\r\n    > {\r\n      const oldStyleObjects: Record<string, any> = {};\r\n      return Object.keys(receivedData).reduce((parsed, key: string) => {\r\n        const isDataStoredOnAllNodes = Object.keys(\r\n          PROPERTIES_QUERIED_FOR_ALL_NODES\r\n        ).includes(key);\r\n        if (isDataStoredOnAllNodes) {\r\n          return {\r\n            ...parsed,\r\n            [key]: receivedData[key],\r\n          };\r\n        }\r\n\r\n        // point 1) above\r\n        const isDataStoredOnTheNode = key.includes(OBJECT_PROPERTY_SEPARATOR)\r\n          ? Object.keys(opts.def.properties).includes(\r\n              key.split(OBJECT_PROPERTY_SEPARATOR)[0]\r\n            )\r\n          : Object.keys(opts.def.properties).includes(key);\r\n\r\n        if (!isDataStoredOnTheNode) return parsed;\r\n\r\n        const type = (opts.def.properties[key] as IData)?.type;\r\n        const isObjectData =\r\n          key.includes(OBJECT_PROPERTY_SEPARATOR) ||\r\n          type === DATA_TYPES.object ||\r\n          type === DATA_TYPES.maybeObject;\r\n\r\n        const isRecordData =\r\n          type === DATA_TYPES.record || type === DATA_TYPES.maybeRecord;\r\n\r\n        const isArrayData = (() => {\r\n          if (isObjectData) {\r\n            return false;\r\n          }\r\n\r\n          const receivedDataValue = opts.def.properties[key];\r\n\r\n          const dataType =\r\n            typeof receivedDataValue === 'function'\r\n              ? ((receivedDataValue as any)._default as IData).type\r\n              : receivedDataValue.type;\r\n\r\n          return (\r\n            dataType === DATA_TYPES.array || dataType === DATA_TYPES.maybeArray\r\n          );\r\n        })();\r\n\r\n        // point 2 above\r\n        if (isObjectData) {\r\n          const [root, ...nests] = key.split(OBJECT_PROPERTY_SEPARATOR);\r\n\r\n          // it it was set to __NULL__ it means this\r\n          // node is using the old style of storing nested objects\r\n          if (receivedData[root] === NULL_TAG || receivedData[root] === null) {\r\n            parsed[root as keyof TNodeData] = null as any;\r\n            return parsed;\r\n          } else if (\r\n            typeof receivedData[root] === 'string' &&\r\n            receivedData[root].startsWith(JSON_TAG)\r\n          ) {\r\n            // https://tractiontools.atlassian.net/browse/TT-2905\r\n            // will ensure this would've been set to null if this object was updated\r\n            //\r\n            // this means 3 things\r\n            // 1 we can acquire all the data for this object from this one property\r\n            // 2 we have to ignore the \"null\" values coming in when we're querying for the new style propeties (root_nestedProperty)\r\n            // 3 we have to ensure we only return from this object data that was queried\r\n            //   otherwise we risk hitting the DO class with data that is not documented in the node definition, leading to errors\r\n            try {\r\n              oldStyleObjects[root] =\r\n                oldStyleObjects[root] || parseJSONFromBE(receivedData[root]);\r\n            } catch (e) {\r\n              throw new DataParsingException({\r\n                receivedData,\r\n                message: `Could not parse json stored in old format for an object in the key \"${key}\"`,\r\n              });\r\n            }\r\n          }\r\n\r\n          if (oldStyleObjects[root]) {\r\n            parsed[root as keyof TNodeData] =\r\n              parsed[root] ||\r\n              (this.getOnlyQueriedData({\r\n                allDataReceived: receivedData,\r\n                dataPreviouslyParsedForThisObject: oldStyleObjects[root],\r\n                rootProp: root,\r\n              }) as any);\r\n\r\n            return parsed;\r\n          }\r\n\r\n          if (parsed[root] == null) {\r\n            parsed[root as keyof TNodeData] = {} as any;\r\n          }\r\n\r\n          this.nest({\r\n            nests,\r\n            root: parsed[root] as Record<string, any>,\r\n            val:\r\n              receivedData[key] === OBJECT_IDENTIFIER ? {} : receivedData[key],\r\n          });\r\n\r\n          return parsed;\r\n        } else if (isRecordData) {\r\n          if (\r\n            typeof receivedData[key] === 'string' &&\r\n            receivedData[key].startsWith(JSON_TAG)\r\n          ) {\r\n            parsed[key as keyof TNodeData] = parseJSONFromBE(receivedData[key]);\r\n          } else if (receivedData[key] == null) {\r\n            parsed[key as keyof TNodeData] = null as any;\r\n          } else {\r\n            throw new DataParsingException({\r\n              receivedData,\r\n              message: `Could not parse json stored in old format for a record in the key \"${key}\"`,\r\n            });\r\n          }\r\n\r\n          return parsed;\r\n        } else if (isArrayData) {\r\n          parsed[key as keyof TNodeData] = prepareValueForFE(receivedData[key]);\r\n          return parsed;\r\n        } else {\r\n          parsed[key as keyof TNodeData] = receivedData[key];\r\n          return parsed;\r\n        }\r\n      }, {} as { id: string; version: number } & DeepPartial<GetAllAvailableNodeDataType<{ TNodeData: TNodeData; TNodeComputedData: {} }>>);\r\n    }\r\n\r\n    private getOnlyQueriedData(opts: {\r\n      allDataReceived: Record<string, any>;\r\n      dataPreviouslyParsedForThisObject: Record<string, any>;\r\n      rootProp: string;\r\n    }) {\r\n      const newStylePropertiesQueriedForThisObject = Object.keys(\r\n        opts.allDataReceived\r\n      ).filter(key =>\r\n        key.startsWith(`${opts.rootProp}${OBJECT_PROPERTY_SEPARATOR}`)\r\n      );\r\n\r\n      return newStylePropertiesQueriedForThisObject.reduce((acc, prop) => {\r\n        const [root, ...nests] = prop.split(OBJECT_PROPERTY_SEPARATOR);\r\n        this.nest({\r\n          nests,\r\n          root: acc,\r\n          val: this.getDataForProp({\r\n            prop,\r\n            object: { [root]: opts.dataPreviouslyParsedForThisObject },\r\n          }),\r\n        });\r\n\r\n        return acc;\r\n      }, {} as Record<string, any>);\r\n    }\r\n\r\n    // with a \"prop\" in the format root__dot__nestedKey__dot__evenMoreNestedKey\r\n    // returns the correct value from an \"object\" of previously parsed data { root: { nestedKey: { evenMoreNestedKey: true } } }\r\n    private getDataForProp(opts: {\r\n      object: Record<string, any>;\r\n      prop: string;\r\n    }): any {\r\n      if (opts.object == null) {\r\n        return undefined; // the prop is not set on the object at all\r\n      }\r\n\r\n      if (opts.prop.includes(OBJECT_PROPERTY_SEPARATOR)) {\r\n        const [root, ...rest] = opts.prop.split(OBJECT_PROPERTY_SEPARATOR);\r\n        return this.getDataForProp({\r\n          object: opts.object[root],\r\n          prop: rest.join(OBJECT_PROPERTY_SEPARATOR),\r\n        });\r\n      }\r\n\r\n      return opts.object[opts.prop];\r\n    }\r\n\r\n    private nest(opts: {\r\n      nests: Array<string>;\r\n      root: Record<string, any>;\r\n      val: any;\r\n    }) {\r\n      const parsedVal =\r\n        opts.val === NULL_TAG ? null : prepareValueForFE(opts.val);\r\n\r\n      if (opts.nests.length === 0) {\r\n        opts.root = parsedVal;\r\n      } else if (opts.nests.length === 1) {\r\n        const nextNest = opts.nests[0];\r\n        opts.root[nextNest] = parsedVal;\r\n      } else {\r\n        const [nextNest, ...remainingNests] = opts.nests;\r\n\r\n        if (opts.root[nextNest] == null) {\r\n          opts.root[nextNest] = null;\r\n        } else {\r\n          this.nest({\r\n            nests: remainingNests,\r\n            root: opts.root[nextNest],\r\n            val: parsedVal,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line\r\n  // @ts-ignore\r\n  return new Repository();\r\n}\r\n","import { getGQLCLient } from './gqlClient';\r\nimport { Config, EPaginationFilteringSortingInstance } from './types';\r\n\r\nexport function getDefaultConfig(): Config {\r\n  return {\r\n    gqlClient: getGQLCLient({\r\n      httpUrl:\r\n        'http://bloom-app-loadbalancer-dev-524448015.us-west-2.elb.amazonaws.com/graphql/',\r\n      wsUrl:\r\n        'ws://bloom-app-loadbalancer-dev-524448015.us-west-2.elb.amazonaws.com/graphql/',\r\n    }),\r\n    generateMockData: false,\r\n    enableQuerySlimming: false,\r\n    enableQuerySlimmingLogging: false,\r\n    paginationFilteringSortingInstance:\r\n      EPaginationFilteringSortingInstance.SERVER,\r\n  };\r\n}\r\n"],"names":["EPaginationFilteringSortingInstance","DATA_TYPES","RELATIONAL_TYPES","EStringFilterOperator","ENumberFilterOperator","NotUpToDateException","opts","propName","nodeType","queryId","Error","NotUpToDateInComputedException","_Error2","computedPropName","FilterPropertyNotDefinedInQueryException","_Error3","filterPropName","SortPropertyNotDefinedInQueryException","_Error4","sortPropName","ImpliedNodePropertyException","_Error5","NotCachedException","_Error6","id","NodesCollectionPageOutOfBoundsException","_Error7","page","DataTypeException","_Error8","dataType","value","DataTypeExplicitDefaultException","_Error9","DataParsingException","_Error10","message","JSON","stringify","receivedData","UnexpectedSubscriptionMessageException","exception","FilterOperatorNotImplementedException","exeption","_Error13","operator","UnreachableCaseError","val","_Error14","Data","type","parser","boxedValue","defaultValue","isOptional","acceptableValues","string","String","_default","optional","maybeString","stringEnum","enumValues","maybeStringEnum","number","parsed","Number","isNaN","error","process","env","NODE_ENV","console","throwLocallyLogInProd","maybeNumber","boolean","undefined","maybeBoolean","object","maybeObject","record","maybeRecord","PROPERTIES_QUERIED_FOR_ALL_NODES","version","lastUpdatedBy","DEFAULT_NODE_PROPERTIES","dateCreated","dateLastModified","lastUpdatedClientTimestamp","FILTER_OPERATORS","Object","values","_gte","_lte","_eq","_gt","_lt","_neq","_contains","_ncontains","parseJSONFromBE","jsonString","startsWith","JSON_TAG","parse","replace","prepareValueForFE","Array","isArray","map","entry","beData","keys","reduce","prepared","key","OptimisticUpdatesOrchestrator","DOsById","lastKnownPersistedDataById","inFlightRequestsById","onDOConstructed","DO","_this","onDODeleted","onPersistedDataReceived","nodeId","data","applyUpdateToDO","onUpdateRequested","update","getDOById","onUpdateSuccessful","onUpdateFailed","rollbackState","deepClone","obj","outputArray","forEach","item","push","outputObject","persistedData","updateIdx","length","currentVersion","onDataReceived","payload","handleUpdateFailed","handleUpdateSuccessful","inFlightRequestsForThisNode","this","__unsafeIgnoreVersion","splice","cleanupIfNoInFlightRequests","runtime","exports","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","tryCatch","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","chance","Chance","generateRandomString","word","generateRandomBoolean","bool","generateRandomNumber","min","max","integer","getMapFnReturn","relationaFns","mapFnOpts","properties","relational","acc","relationshipName","relationalQueryBuilder","_relationshipName","mapFn","getQueriedProperties","mapFnReturn","isRootLevel","includes","nestedKey","getAllNodeProperties","nodeProperties","getQueryRecordFromQueryDefinition","queryRecord","queryDefinitions","queryDefinitionsAlias","queriedProps","nodeDef","allowNullResult","queryDefinition","def","target","_queryDefinition$targ","computed","getRelationalQueries","relationalQueries","alias","addRelationalQueryRecord","relationalQueryRecord","relationalQueriesWithinThisRelationalQuery","relationalType","_relational","oneToOne","oneToMany","relationalQuery","queryBuilderOpts","filter","pagination","sort","unionType","queryRecordEntry","ids","some","getSpaces","numberOfSpaces","fill","join","getQueryPropertiesString","propsString","nestLevel","relationalQueryRecordEntry","operation","wrapInNodes","propertiesString","getRelationalQueryString","getOperationFromQueryRecordEntry","options","useServerSidePaginationFilteringSorting","readyForBE","current","filterForBE","eq","rest","condition","_condition","conditionArray","and","or","entries","index","stringifiedFilters","getGetNodeOptions","getQueryGQLStringFromQueryRecord","getSanitizedQueryId","getRootLevelQueryString","trim","convertQueryDefinitionToQueryInfo","queryGQLString","queryParamsString","getQueryRecordSortAndFilterValues","subscriptionConfigs","subscriptionConfigsAcc","subscriptionName","extractNodeFromSubscriptionMessage","subscriptionMessage","node","description","extractOperationFromSubscriptionMessage","gqlString","getQueryInfo","queryGQL","gql","subscriptionConfig","revisedConvertNodeDataToSMPersistedData","skipBooleanStringWrapping","parsedData","revisedPrepareForBE","nodeData","IDataRecord","generatingMockData","escapeText","text","revisedConvertEdgeDirectionNames","edgeItem","to","targetId","sourceId","from","IDataRecordForKey","childNodes","additionalEdges","revisedConvertPropertyToBE","omitObjectIdentifier","parentKey","preparedKey","revisedPrepareObjectForBE","generateMockNodeDataFromQueryRecordForQueriedProperties","nodePropertiesToMock","nodeProperty","mockedValues","getMockValuesForIDataRecord","getMockValueForIData","getRandomItemFromArray","array","_","maybeArray","generateMockData","extend","handledExtensionProps","objectProp","extensionValue","extension","deleteKeysNotInExtension","clearObject","extendNestedObjects","extensionProp","generateMockNodeDataFromQueryDefinitions","generateMockNodeDataForAllQueryRecords","queryRecords","mockedNodeData","queryRecordAlias","mockedNodeDataReturnValues","relationalMockNodeProperties","mockNodeDataForQueryRecord","numOfResultsToGenerate","arrayOfMockNodeValues","nodes","Math","floor","random","checkFilter","itemValue","filterValue","toLowerCase","indexOf","convertNullStringValuesToNull","underscoreSeparatedPropName","checkRelationalItems","relationalItems","relationalItem","relationalItemValue","getSortPosition","first","second","ascending","getNodeSortPropertyValue","isRelational","relationalKey","a","b","getItemSortValue","direction","x","underscoreSeparatedPropertyPath","applyClientSideSortAndFilterToData","containsArrayData","filterObject","getFlattenedNodeFilterObject","filterObject2","valueIsNotAFilterCondition","every","isObject","flatObject","filterProperties","dotSeparatedPropName","split","possibleRelationalKey","relationalProperties","propertyFilter","operators","isRelationalProperty","replaceAll","propNotInQuery","items","propertyNotInQuery","find","orConditions","andConditions","hasPassedEveryANDConditions","hasPassedSomeORConditions","applyClientSideFilterToData","sortObject","getFlattenedNodeSortObject","sorting","valueIsNotASortObject","_direction","orderBy","priority","_priority","sortPropertiesNotDefinedInQuery","applyClientSideSortToData","queryIdx","splitQueryDefinitionsByToken","tokenName","removeNullishQueryDefinitions","getNullishResults","generateQuerier","mmGQLInstance","queryManager","getError","getToken","performQueries","all","queryDefinitionsSplitByToken","paginationFilteringSortingInstance","SERVER","response","enableQuerySlimming","QuerySlimmer","query","queryOpts","token","batchKey","gqlClient","CLIENT","filteredAndSortedResponse","resultsForToken","nullishResults","stack","startStack","substring","nonNullishQueryDefinitions","onData","results","qM","QueryManager","onQueryResult","queryResult","_context3","onError","qmResults","getResults","subscriptionId","NodesCollection","itemsPerPage","onPaginate","goToPage","totalPages","goToNextPage","hasNextPage","goToPreviousPage","hasPreviousPage","startIndex","ceil","getMutationNameFromOperations","operations","fallback","operationNames","getEdgePermissionsString","permissions","view","edit","manage","terminate","addChild","convertEdgeCreationOperationToMutationArguments","edge","convertEdgeDropOperationToMutationArguments","convertEdgeReplaceOperationToMutationArguments","convertEdgeUpdateOperationToMutationArguments","convertNodeDataToSMPersistedData","convertEdgeDirectionNames","convertPropertyToBE","prepareObjectForBE","convertCreateNodeOperationToCreateNodesMutationArguments","mutationArgs","under","queriesByContext","inFlightQueryRecords","observable","newQuerySlimmedByCache","getSlimmedQueryAgainstQueriesByContext","getDataForQueryFromQueriesByContext","log","newQuerySlimmedByInFlightQueries","slimNewQueryAgainstInFlightQueries","sendQueryRequest","_opts$queryOpts","slimmedQueryRecord","_opts$queryOpts2","when","areDependentQueriesStillInFlight","queryIds","queryIdsSlimmedAgainst","querySlimmedByInFlightQueries","timeout","newQuery","parentContextKey","queryData","newQueryKey","contextKey","_this2","createContextKeyForQueryRecordEntry","cachedQueryData","newQueryData","newQueryRelationalData","property","newQueryByContextMap","getQueryRecordsByContextMap","inFlightQueriesToSlimAgainst","getInFlightQueriesToSlimAgainst","newQuerySlimmed","inFlightQueryContextKey","newQueryRecordPieceSlimmed","inFlightQueryRecord","slimmed","_this3","getSlimmedQueryAgainstInFlightQuery","newQueryCtxKey","queryRecordBaseKey","newQueryRecordEntry","newQueryRecordDepth","_this4","getRelationalDepthOfQueryRecordEntry","inFlightQueryRecordEntry","inFlightProp","inFlightQuery","isRelationalQueryRecord","slimmedRelationalQueryRecord","newRootRecordEntry","newRelationalRecordEntry","newRequestedProperties","_this5","getPropertiesNotCurrentlyBeingRequested","newQueryProps","inFlightProps","slimmedNewRelationalQueryRecord","queryRecordToReturn","isNewQueryARootQuery","newQueryContextKey","_this6","getPropertiesNotAlreadyCached","cachedQuerySubsByProperty","subscriptionsByProperty","objectToReturn","onSubscriptionCancelled","queryRecordKey","currentQueryContextKey","_this7","propertySubCount","relationalDepth","relationalEntry","_this8","populateQueriesByContext","_this9","previous","resultsForRelationalQueries","user","stringifyQueryParams","newQueryProperty","params","queryRecordsByContext","_this10","queryRecordSlice","setInFlightQuery","removeInFlightQuery","queryRecordContextKey","_this11","inFlightQueryToRemove","queryToRemoveCtxKey","_this12","inFlightRecord","isStillWaitingOnInFlightQueries","ctxKey","_this13","enableQuerySlimmingLogging","optionalParams","MMGQLContext","React","createContext","LoggingContext","unsafe__silenceDuplicateSubIdErrors","subscriptionIds","suspendEnabled","suspendDisabled","getGQLCLient","gqlClientOpts","wsLink","WebSocketLink","uri","wsUrl","reconnect","nonBatchedLink","HttpLink","httpUrl","queryBatchLink","getContext","BatchHttpLink","batchMax","batchInterval","headers","credentials","mutationBatchLink","batchedMutation","MAX_SAFE_INTEGER","requestLink","definition","getMainDefinition","kind","getContextWithToken","Authorization","authenticateSubscriptionDocument","documentBody","_opts$gql$loc","source","body","operationsThatRequireToken","documentBodyWithAuthTokensInjected","RegExp","authLink","ApolloLink","forward","Observable","observer","subscribe","bind","unsubscribe","baseClient","ApolloClient","link","cache","InMemoryCache","defaultOptions","watchQuery","fetchPolicy","errorPolicy","subscription","onMessage","mutate","mutations","mutation","convertUpdateNodeOperationToUpdateNodesMutationArguments","require","MMGQL","config","plugins","transaction","tokens","DOFactory","DOProxyGenerator","optimisticUpdatesOrchestrator","updateQueryManagerWithSubscriptionMessage","initSubs","unsub","subscriptionCancellers","cancel","queryDefinitionsSplitByTokenEntries","mustAwaitQuery","messageQueue","e","onSubscriptionMessage","subscriptionAlias","onQueryInfoConstructed","skipInitialQuery","onSubscriptionInitialized","_context4","relationalResults","nodeComputed","computedAccessors","computedKey","computedFn","proxy","plugin","DOProxy","_plugin$DOProxy","computedDecorator","ProxyInstance","Proxy","getOwnPropertyDescriptor","allPropertiesQueried","get","newRelationalResults","dataForThisProp","getNestedObjectWithNotUpToDateProtection","dataForThisObject","parentObjectKey","isUpToDate","prop","allCachedData","createDOProxyGenerator","initialData","_defaults","getDefaultData","nodePropertiesOrData","isObjectType","getDefaultFnValue","defaultData","defaultFn","isArrayType","propValue","isRecordType","newVersion","newData","parseReceivedData","extendPersistedWithNewlyReceivedData","getParsedData","setObjectProp","propNameForThisObject","setPrimitiveValueProp","setArrayProp","_plugin$DO","onConstruct","DOInstance","parsedDataKey","initializeNodePropGetters","initializeNodeComputedGetters","initializeNodeRelationalGetters","getData","propExistsInInitialData","_opts$defaultData2","computedData","computedProp","setComputedProp","relationalData","setRelationalProp","relationalQueryGetter","computedGetter","_plugin$DO2","createDOFactory","notifyRepositories","getNewStateFromQueryResult","queryRecordEntryForThisSubscription","updateProxiesAndStateFromSubscriptionMessage","getResultsFromState","resultsAcc","queryAlias","stateForThisAlias","idsOrId","idsOrIdInCurrentResult","resultsAlias","removeUnionSuffix","proxyCache","_this$opts","dataForThisAlias","getDataFromResponse","nodeRepository","repository","relationalAlias","relationalDataForThisAlias","flatMap","dataEntry","relationalDataEntry","resultingStateAcc","cacheEntry","buildCacheEntry","buildProxyCacheEntryForNode","relationalState","relationalStateAcc","buildRelationalStateForNode","getApplicableRelationalQueries","byId","proxyCacheAcc","action","path","newCacheEntry","recursivelyUpdateProxyAndReturnNewCacheEntry","newRelationalData","getRelationalData","currentState","currentRelationalState","newRelationalState","queryRecordForThisAlias","currentStateForThisAlias","existingProxy","_currentStateForThisA","updateRelationalResults","relationalDataAcc","relationalQueryAlias","firstResult","createQueryManager","globalOperationHandlers","callback","operationsByType","createNode","createNodes","updateNode","updateNodes","dropNode","createEdge","createEdges","dropEdge","dropEdges","replaceEdge","replaceEdges","updateEdge","updateEdges","createOperationsCount","updateOperationsCount","pushOperation","position","idx","operationName","onSuccess","onFail","globalHandlers","nodeIdx","edges","sortMutationsByTransactionPosition","sortBy","getAllMutations","allCreateNodeOperations","getMutationsFromTransactionCreateOperations","allUpdateNodeOperations","dropPropertiesMutations","updateNodeOperation","propertiesToNull","getPropertiesToNull","concat","getMutationsFromTransactionUpdateOperations","getMutationsFromTransactionDropOperations","getMutationsFromEdgeCreateOperations","getMutationsFromEdgeDropOperations","getMutationsFromEdgeReplaceOperations","getMutationsFromEdgeUpdateOperations","groupByOperationName","transactions","asyncCallbacks","tx","callbackResult","allMutations","executionResults","handleSuccessCallbacks","executionResult","flat","execute","transactionGroup","handleErrorCallbacks","operationsByOperationName","executeCallbacksWithData","resultData","groupedResult","edgeOperation","createTransaction","defaultProp","addDefaultNodeProperties","defWithDefaultProperties","DOClass","_isNodeDef","cached","parseDataFromBackend","newDO","onNodeDeleted","oldStyleObjects","_opts$def$properties$","isObjectData","isRecordData","isArrayData","receivedDataValue","root","nests","getOnlyQueriedData","allDataReceived","dataPreviouslyParsedForThisObject","rootProp","nest","getDataForProp","parsedVal","nextNest","remainingNests","defTyped","setToken","clearTokens","props","useContext","ongoingSubscriptionRecord","useRef","cleanupTimeoutRecord","mountedHooksBySubId","updateSubscriptionInfo","useCallback","subInfo","scheduleCleanup","cleanup","existingContextSubscription","subscriptionTTLMs","setTimeout","cancelCleanup","clearTimeout","onHookMount","silenceDuplicateSubIdErrors","onHookUnmount","Provider","mmGQL","children","parsedBoxedValue","useSubscription","captureStackTrace","preExistingState","preExistingContextForThisSubscription","querying","getPreexistingState","useState","setResults","setError","setQuerying","loggingContext","qdStateManager","qdError","parentSubscriptionId","onResults","handlers","suspendPromise","useSubOpts","doNotSuspend","splitQueryDefinitions","allSubscriptionIds","getAllSubscriptionStates","handleNewQueryDefitions","subOpts","newQueryInfo","newQueryDefinitionsAreAllNull","suspend","subscriptionSuffix","preExistingQueryInfo","queryInfo","queryDefinitionHasBeenUpdated","queryTimestamp","Date","valueOf","lastQueryTimestamp","_opts$context$ongoing","contextForThisParentSub","newResults","contextforThisSub","subscriptionCanceller","subscriptionState","contextForThisSub","_opts$context$ongoing2","subId","buildQueryDefinitionStateManager","useEffect"],"mappings":"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"}